<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structevt__desc__cbs">
<title>evt_desc_cbs Struct Reference</title>
<indexterm><primary>evt_desc_cbs</primary></indexterm>
<para>
<computeroutput>#include &lt;evtree.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para>int(* <link linkend="_structevt__desc__cbs_1a0bc352b14ae8a8a4b538cdaf63e4047d">dc_bio_free_cb</link> )(struct <link linkend="_structumem__instance">umem_instance</link> *umm, struct <link linkend="_structevt__desc">evt_desc</link> *desc, daos_size_t nob, void *args)</para>
</listitem>
            <listitem><para><anchor xml:id="_structevt__desc__cbs_1a137b7a23723f939164fa41f16ae693cb"/>void * <emphasis role="strong">dc_bio_free_args</emphasis></para>
</listitem>
            <listitem><para>int(* <link linkend="_structevt__desc__cbs_1aeecd22c17b723113b31b7dda57297356">dc_log_status_cb</link> )(struct <link linkend="_structumem__instance">umem_instance</link> *umm, daos_epoch_t epoch, struct <link linkend="_structevt__desc">evt_desc</link> *desc, int intent, void *args)</para>
</listitem>
            <listitem><para><anchor xml:id="_structevt__desc__cbs_1a0f7864d540163430a6bcac31655b40a6"/>void * <emphasis role="strong">dc_log_status_args</emphasis></para>
</listitem>
            <listitem><para>int(* <link linkend="_structevt__desc__cbs_1a0546382bea558aac06f2f06547f44ac1">dc_log_add_cb</link> )(struct <link linkend="_structumem__instance">umem_instance</link> *umm, struct <link linkend="_structevt__desc">evt_desc</link> *desc, void *args)</para>
</listitem>
            <listitem><para><anchor xml:id="_structevt__desc__cbs_1ab1f0360b2360180053ef06d1dc136913"/>void * <emphasis role="strong">dc_log_add_args</emphasis></para>
</listitem>
            <listitem><para>int(* <link linkend="_structevt__desc__cbs_1a6eafa510f08f7539fd05ecd134bf1ba4">dc_log_del_cb</link> )(struct <link linkend="_structumem__instance">umem_instance</link> *umm, daos_epoch_t epoch, struct <link linkend="_structevt__desc">evt_desc</link> *desc, void *args)</para>
</listitem>
            <listitem><para><anchor xml:id="_structevt__desc__cbs_1ad2a15956b07b4ee4492088ebd3d71590"/>void * <emphasis role="strong">dc_log_del_args</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Callbacks and parameters for evtree descriptor</para>

<para>NB:<itemizedlist>
<listitem>
<para>evtree is a standalone algorithm, it should not depend on the rest part of VOS, this function table is abstraction of those direct calls to VOS/DTX.</para>
</listitem><listitem>
<para>Most part of this function table is about undo log callbacks, we might want to separate those functions to a dedicated function table for undo log in the future. So both evtree &amp; dbtree can share the same definition of undo log. </para>
</listitem></itemizedlist>
</para>
<para>
Definition at line 69 of file evtree.h.</para>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_structevt__desc__cbs_1a0bc352b14ae8a8a4b538cdaf63e4047d"/>    <section>
    <title>dc_bio_free_cb</title>
<indexterm><primary>dc_bio_free_cb</primary><secondary>evt_desc_cbs</secondary></indexterm>
<indexterm><primary>evt_desc_cbs</primary><secondary>dc_bio_free_cb</secondary></indexterm>
<para><computeroutput>int(* dc_bio_free_cb(struct <link linkend="_structumem__instance">umem_instance</link> *umm, struct <link linkend="_structevt__desc">evt_desc</link> *desc, daos_size_t nob, void *args)</computeroutput></para>
<para>callback to free bio address, EVtree does not allocate bio address so it wouldn&apos;t free it as well, user should provide callback to free it. </para>
<para>
Definition at line 75 of file evtree.h.</para>
    </section><anchor xml:id="_structevt__desc__cbs_1a0546382bea558aac06f2f06547f44ac1"/>    <section>
    <title>dc_log_add_cb</title>
<indexterm><primary>dc_log_add_cb</primary><secondary>evt_desc_cbs</secondary></indexterm>
<indexterm><primary>evt_desc_cbs</primary><secondary>dc_log_add_cb</secondary></indexterm>
<para><computeroutput>int(* dc_log_add_cb(struct <link linkend="_structumem__instance">umem_instance</link> *umm, struct <link linkend="_structevt__desc">evt_desc</link> *desc, void *args)</computeroutput></para>
<para>Add a descriptor to undo log </para>
<para>
Definition at line 90 of file evtree.h.</para>
    </section><anchor xml:id="_structevt__desc__cbs_1a6eafa510f08f7539fd05ecd134bf1ba4"/>    <section>
    <title>dc_log_del_cb</title>
<indexterm><primary>dc_log_del_cb</primary><secondary>evt_desc_cbs</secondary></indexterm>
<indexterm><primary>evt_desc_cbs</primary><secondary>dc_log_del_cb</secondary></indexterm>
<para><computeroutput>int(* dc_log_del_cb(struct <link linkend="_structumem__instance">umem_instance</link> *umm, daos_epoch_t epoch, struct <link linkend="_structevt__desc">evt_desc</link> *desc, void *args)</computeroutput></para>
<para>remove a descriptor to undo log </para>
<para>
Definition at line 94 of file evtree.h.</para>
    </section><anchor xml:id="_structevt__desc__cbs_1aeecd22c17b723113b31b7dda57297356"/>    <section>
    <title>dc_log_status_cb</title>
<indexterm><primary>dc_log_status_cb</primary><secondary>evt_desc_cbs</secondary></indexterm>
<indexterm><primary>evt_desc_cbs</primary><secondary>dc_log_status_cb</secondary></indexterm>
<para><computeroutput>int(* dc_log_status_cb(struct <link linkend="_structumem__instance">umem_instance</link> *umm, daos_epoch_t epoch, struct <link linkend="_structevt__desc">evt_desc</link> *desc, int intent, void *args)</computeroutput></para>
<para>Availability check, it is for data tracked by DTX undo log. It is optional, EVTree always treats data extent is available if this method is absent. </para>
<para>
Definition at line 84 of file evtree.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
src/include/daos_srv/evtree.h</section>
</section>
