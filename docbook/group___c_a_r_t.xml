<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___c_a_r_t">
<title>CART API</title>
<indexterm><primary>CART API</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structcrt__corpc__ops">crt_corpc_ops</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___c_a_r_t_1ga660a415dda17860766a23f515fa69964">CRT_VAR</link>   0</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga4fabc6807e06bc6464993a4f33d4d2f3"/>#define <emphasis role="strong">CRT_PTR</emphasis>   1</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga0c6be89b4b895bd21e17dd88576d544b"/>#define <emphasis role="strong">CRT_ARRAY</emphasis>   2</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga4ab1549db565fefa85fe10f6e8345d8b"/>#define <emphasis role="strong">CRT_RAW</emphasis>   3</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gae3a17507f6d6d79988f6800af7f0eaa2"/>#define <emphasis role="strong">CRT_GEN_GET_TYPE</emphasis>(seq)   BOOST_PP_SEQ_HEAD(seq)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga35169dbf1608f11c205c294b10d9921e"/>#define <emphasis role="strong">CRT_GEN_GET_NAME</emphasis>(seq)   BOOST_PP_SEQ_ELEM(1, seq)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga46fbe994150ab8487414e5a838bffe90"/>#define <emphasis role="strong">CRT_GEN_GET_KIND</emphasis>(seq)   BOOST_PP_SEQ_TAIL(BOOST_PP_SEQ_TAIL(seq))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CRT_GEN_STRUCT_FIELD</emphasis>(r,  data,  seq)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CRT_GEN_STRUCT</emphasis>(struct_type_name,  seq)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">crt_proc_struct</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga5c9b32fd34759489b509cd241396f6c7"/>#define <emphasis role="strong">CRT_GEN_X</emphasis>(x)   x</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga62c6081cd624d7f624d0a307e5199ddf"/>#define <emphasis role="strong">CRT_GEN_X2</emphasis>(x)   CRT_GEN_X BOOST_PP_LPAREN() crt_proc_##x BOOST_PP_RPAREN()</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga5d9edb246dbd96ed7b8388c6cab241c3"/>#define <emphasis role="strong">CRT_GEN_GET_FUNC</emphasis>(seq)   CRT_GEN_X2 BOOST_PP_SEQ_FIRST_N(1, seq)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga0168cde3accc04f90390feef63ce3d25"/>#define <emphasis role="strong">CRT_GEN_PROC_FIELD</emphasis>(r,  ptr,  seq)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CRT_GEN_PROC_FUNC</emphasis>(type_name,  seq)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CRT_RPC_DECLARE</emphasis>(rpc_name,  fields_in,  fields_out)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga046876d498fadedaeb2fad557173880c"/>#define <emphasis role="strong">CRT_DISABLE_SIZEOF_POINTER_DIV</emphasis></para>
</listitem>
            <listitem><para>#define <emphasis role="strong">CRT_RPC_DEFINE</emphasis>(rpc_name,  fields_in,  fields_out)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gacdd1d9438cd8c92a81d65196651200ea"/>#define <emphasis role="strong">CRT_RPC_CORPC_REGISTER</emphasis>(opcode,  rpc_name,  rpc_handler,  co_ops)   <link linkend="_group___c_a_r_t_1gaba82673fa83307e86afef3fc3fea3961">crt_corpc_register</link>(opcode, &amp;CQF_##rpc_name, rpc_handler, co_ops)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga51d539c4a42ff336191f90826d1d6e0a"/>#define <emphasis role="strong">CRT_RPC_SRV_REGISTER</emphasis>(opcode,  flags,  rpc_name,  rpc_handler)   <link linkend="_group___c_a_r_t_1ga836b16ede44ec086c47c6c0da5f3c67c">crt_rpc_srv_register</link>(opcode, flags, &amp;CQF_##rpc_name, rpc_handler)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga7730764c66d341097cd274d1d58fa737"/>#define <emphasis role="strong">CRT_RPC_REGISTER</emphasis>(opcode,  flags,  rpc_name)   <link linkend="_group___c_a_r_t_1ga13f295ad36554f93feee03e6fd76f789">crt_rpc_register</link>(opcode, flags, &amp;CQF_##rpc_name)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___c_a_r_t_1ga7aa8c8adbbe2ac33f3a1eebd040388c2">crt_bulk_decref</link>(bulk_hdl)   <link linkend="_group___c_a_r_t_1gac6dabec2240d728d62bacec3d2a89df7">crt_bulk_free</link>(bulk_hdl)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gaf5f69a6a113bf635cb5b25137982fc60"/>#define <emphasis role="strong">CRT_TREE_TYPE_SHIFT</emphasis>   (16U)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga5bb95e351370f62d71e9b09534408fd6"/>#define <emphasis role="strong">CRT_TREE_MAX_RATIO</emphasis>   (64)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga799c555309c4db527577a11349e73543"/>#define <emphasis role="strong">CRT_TREE_MIN_RATIO</emphasis>   (2)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga5ff3f3cd376d345d09b7418921233950"/>#define <emphasis role="strong">crt_proc_raw</emphasis>   <link linkend="_group___c_a_r_t_1gac68d7ff7120655c800ba09359640be50">crt_proc_memcpy</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga6f0cf8025ae3cf6c0117ef0b61e32beb"/>#define <emphasis role="strong">crt_proc__Bool</emphasis>   <link linkend="_group___c_a_r_t_1gaf7e7c9babd4f43f0a1ae0b96f1702c7d">crt_proc_bool</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga387956ae8a5f6e2007e553261aeaf539"/>#define <emphasis role="strong">crt_proc_d_rank_t</emphasis>   <link linkend="_group___c_a_r_t_1ga26a21f8d43858142c598eee1387b12b7">crt_proc_uint32_t</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga7463264b7ab151b91a6c5eee3b004182"/>#define <emphasis role="strong">crt_proc_int</emphasis>   <link linkend="_group___c_a_r_t_1gaa95f26166658b049482d10e6fee8ff28">crt_proc_int32_t</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga262f77988bae2ef3115df1cd11dc95fd"/>#define <emphasis role="strong">crt_proc_crt_status_t</emphasis>   <link linkend="_group___c_a_r_t_1gaa95f26166658b049482d10e6fee8ff28">crt_proc_int32_t</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga7c073826bf717f754242e719981142f4"/>#define <emphasis role="strong">crt_proc_crt_group_id_t</emphasis>   <link linkend="_group___c_a_r_t_1ga778f5628eab28dfe9650d7a0ea189394">crt_proc_d_string_t</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gaf81b67195f89b983424d838e24e4473f"/>#define <emphasis role="strong">crt_proc_crt_phy_addr_t</emphasis>   <link linkend="_group___c_a_r_t_1ga778f5628eab28dfe9650d7a0ea189394">crt_proc_d_string_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef int(* <link linkend="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426">crt_rpc_task_t</link>) (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> *ctx, void *rpc_hdlr_arg, void(*rpc_hdlr) (void *), void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga19f6a8a70ca59be9a7eb596d2b998c4d"/>typedef int(* <emphasis role="strong">crt_grp_destroy_cb_t</emphasis>) (void *arg, int status)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga65671c60f0a8421ea337888f2c7f6362"/>typedef void(* <emphasis role="strong">crt_progress_cb</emphasis>) (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> ctx, void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga98c70ff85a11e6b8bd2aea9b6e9659d8"/>typedef void(* <emphasis role="strong">crt_timeout_cb</emphasis>) (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> ctx, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *rpc, void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gaee8bbd2c1fc8670b2616b4d302368666"/>typedef void(* <emphasis role="strong">crt_eviction_cb</emphasis>) (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gacd43636e1237f4e99c6425b5fab43564"/>typedef void(* <emphasis role="strong">crt_event_cb</emphasis>) (<link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, enum crt_event_source src, enum crt_event_type type, void *arg)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gabbc9d44c874cc396db1f7500cf8d085e"/>enum <emphasis role="strong">crt_tree_type</emphasis> { 
<emphasis role="strong">CRT_TREE_INVALID</emphasis> = 0, 
<emphasis role="strong">CRT_TREE_MIN</emphasis> = 1, 
<emphasis role="strong">CRT_TREE_FLAT</emphasis> = 1, 
<emphasis role="strong">CRT_TREE_KARY</emphasis> = 2, 

<emphasis role="strong">CRT_TREE_KNOMIAL</emphasis> = 3, 
<emphasis role="strong">CRT_TREE_MAX</emphasis> = 3
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_group___c_a_r_t_1gacfbc8243090b9821fcb4a138a205cb34">crt_proc_op_t</link> { <link linkend="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a356d2703575b63de86a40aa29cc4fbde">CRT_PROC_ENCODE</link>, 
<link linkend="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a1d32757630fc4bb27314f7ed495fc172">CRT_PROC_DECODE</link>, 
<link linkend="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a476f3ed609dd4936e15f34765bdb69ff">CRT_PROC_FREE</link>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga77aaf444cca8082606259c3cb873f142"/>enum <emphasis role="strong">crt_event_source</emphasis> { <emphasis role="strong">CRT_EVS_UNKNOWN</emphasis>, 
<emphasis role="strong">CRT_EVS_SWIM</emphasis>
 }</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1ga7f63c91e081ffe734b4636ca366c1c41"/>enum <emphasis role="strong">crt_event_type</emphasis> { <emphasis role="strong">CRT_EVT_ALIVE</emphasis>, 
<emphasis role="strong">CRT_EVT_DEAD</emphasis>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga9383ec65a20b8de170a7e54c19ed135d">crt_init_opt</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grpid, uint32_t flags, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gab22231966be5442b49fdced962a513df">crt_init_options_t</link> *opt)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga07eb1757b968c01796e32a5b9350cb8f">crt_context_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> *crt_ctx)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga0c292fc8a9b62dca06eab39f6f598423">crt_context_set_timeout</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, uint32_t timeout_sec)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga0bbef2e88904b5ff96ac5e026727ebc3">crt_context_destroy</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int force)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___c_a_r_t_1ga1bbbd9ba3a54384b8c41470652d3f222">crt_context_ep_empty</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga8cd1507f48cd4c6e7a74def265859a5c">crt_context_flush</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, uint64_t timeout)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaead25d94b1228f3a3c33b0a60a7b482f">crt_context_idx</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int *ctx_idx)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga4fed553ebd62a4ff404b339cf3e2a5e4">crt_context_num</link> (int *ctx_num)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac4586b6542b4c809a737a63e18b6f314">crt_finalize</link> (void)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gad8e2ce33333c631754c0ea69846851d8">crt_progress</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int64_t timeout)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gab7611702682ff56c57d697cb2670d426">crt_progress_cond</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int64_t timeout, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gacef78a24d5f55f2da8a57bb1aceef174">crt_progress_cond_cb_t</link> cond_cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56">crt_req_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> *tgt_ep, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> **req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga709043318d2a089cb7f8816afbb08388">crt_req_set_endpoint</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, <link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> *tgt_ep)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga5613cf2c576e417c441f66416c0a816d">crt_req_set_timeout</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, uint32_t timeout_sec)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac57bcd14a37730e582e8e883cec02a34">crt_req_addref</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gadced98d9b4ff3084a36e4bc1034c28a8">crt_req_decref</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gacfddf38953b180f44f8c4b53b9b57973">crt_req_send</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaec5f68d3f953c61fadbd8a3d1a39c919">crt_cb_t</link> complete_cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga3d7216bc7c9cf01c3ca3ce41a1d52783">crt_reply_send</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga9abd7828b2b604fb68c34f5a4cf9568f">crt_req_src_rank_get</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> *rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga77c47e976ee1a7b340d32c7ad6ee76d3">crt_req_dst_rank_get</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> *rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga367a527b8653b020fedfcb6314dd623f">crt_req_dst_tag_get</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req, uint32_t *tag)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1gadfaee37eaf074ffaab7a7706544935c5">crt_hlc_get</link> (void)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga25030f5bcea43a1e47f56cf7f43cd596">crt_hlc_get_msg</link> (uint64_t msg, uint64_t *hlc_out, uint64_t *offset)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1ga41358b9de3b91a0f453077886b64ea22">crt_hlc2nsec</link> (uint64_t hlc)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1ga4a895b8ea1fb5065547e963872a6ad5f">crt_nsec2hlc</link> (uint64_t nsec)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1ga0dcbf9c1b804b281539c8d14884e9f2e">crt_hlc2unixnsec</link> (uint64_t hlc)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1ga100933432920bca56a6c1f51e9b1d35d">crt_unixnsec2hlc</link> (uint64_t unixnsec)</para>
</listitem>
            <listitem><para>void <link linkend="_group___c_a_r_t_1ga2737d6daf6a8ad986097ff85fc8736a6">crt_hlc_epsilon_set</link> (uint64_t epsilon)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1ga154ce95ef86a6ded2d1470dbbbc87131">crt_hlc_epsilon_get</link> (void)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___c_a_r_t_1gac6e9725c387d76d22a7f6b7a99d5d601">crt_hlc_epsilon_get_bound</link> (uint64_t hlc)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga3061431302513c2fc6b37b0844eebfb0">crt_req_abort</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> *req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gab49687fc6b749807872c6c14f6dbf7ab">crt_ep_abort</link> (<link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> *ep)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga13f295ad36554f93feee03e6fd76f789">crt_rpc_register</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, uint32_t flags, struct <link linkend="_structcrt__req__format">crt_req_format</link> *drf)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga383347752c15c431a5eabedafc2d2910">crt_context_register_rpc_task</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426">crt_rpc_task_t</link> rpc_cb, <link linkend="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426">crt_rpc_task_t</link> iv_resp_cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga836b16ede44ec086c47c6c0da5f3c67c">crt_rpc_srv_register</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, uint32_t flags, struct <link linkend="_structcrt__req__format">crt_req_format</link> *crf, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga163a4cfb0f83c051338adb9a4c326eed">crt_rpc_cb_t</link> rpc_handler)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaba8a38409ed5a85ae321b6824dafa2a4">crt_bulk_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structd__sg__list__t">d_sg_list_t</link> *sgl, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga0baa03079c26075653589c9138e74e0e">crt_bulk_perm_t</link> bulk_perm, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> *bulk_hdl)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac66777b15f7a835cf8806ff91199b0fa">crt_bulk_bind</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga71778dc6e151ae5cb915e251a94053f0">crt_bulk_addref</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga62bfa2cc197157396a2d9a27bd85503a">crt_bulk_access</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, <link linkend="_structd__sg__list__t">d_sg_list_t</link> *sgl)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac6dabec2240d728d62bacec3d2a89df7">crt_bulk_free</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaae90d605eafc12f8c90e7aa430b87679">crt_bulk_transfer</link> (struct <link linkend="_structcrt__bulk__desc">crt_bulk_desc</link> *bulk_desc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf25e76b2c5b895478f2b640af5ef9405">crt_bulk_cb_t</link> complete_cb, void *arg, crt_bulk_opid_t *opid)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga219734f8633dcbe40254e7586f9ff810">crt_bulk_bind_transfer</link> (struct <link linkend="_structcrt__bulk__desc">crt_bulk_desc</link> *bulk_desc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf25e76b2c5b895478f2b640af5ef9405">crt_bulk_cb_t</link> complete_cb, void *arg, crt_bulk_opid_t *opid)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga8ad87ffb793d7e1ada6a9c2a2a9faaa2">crt_bulk_get_len</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, size_t *bulk_len)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaad009bd02a5e2bc06d63e35fb87dfadc">crt_bulk_get_sgnum</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, unsigned int *bulk_sgnum)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gae1b44d6b294d89a75744fd7262cf96d8"/>int <emphasis role="strong">crt_bulk_abort</emphasis> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, crt_bulk_opid_t opid)</para>
</listitem>
            <listitem><para><link linkend="_structcrt__group">crt_group_t</link> * <link linkend="_group___c_a_r_t_1ga924c5e73f8133fadc6d323eb7ec596ac">crt_group_lookup</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grp_id)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga89eb388dcb9f8e29d4aaa3f10aec0dd8">crt_group_destroy</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, crt_grp_destroy_cb_t grp_destroy_cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga69f78261760cc22432b6d79f591ef6f6">crt_group_attach</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> srv_grpid, <link linkend="_structcrt__group">crt_group_t</link> **attached_grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga488d62a433d3799355798075a9d2aa25">crt_group_config_path_set</link> (const char *path)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga4524b67a753babb8236aa5628e46b273">crt_group_config_save</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, bool forall)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga1fecd36a0cebf97f4a1dd8ad7fc17f70">crt_group_config_remove</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga25fd9e4aeddc993b950f4f6d1b1cc5e6">crt_group_detach</link> (<link linkend="_structcrt__group">crt_group_t</link> *attached_grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga38f94d125e012d5ee8c7e7e1951977f7">crt_group_rank_p2s</link> (<link linkend="_structcrt__group">crt_group_t</link> *subgrp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank_in, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> *rank_out)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga1ee5768a3251446b9032a2efa9e82956">crt_group_rank_s2p</link> (<link linkend="_structcrt__group">crt_group_t</link> *subgrp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank_in, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> *rank_out)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga78eb548c0805c201b3ef45a3d0f57265">crt_corpc_req_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *filter_ranks, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> co_bulk_hdl, void *priv, uint32_t flags, int tree_topo, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> **req)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaba82673fa83307e86afef3fc3fea3961">crt_corpc_register</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, struct <link linkend="_structcrt__req__format">crt_req_format</link> *drf, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga163a4cfb0f83c051338adb9a4c326eed">crt_rpc_cb_t</link> rpc_handler, struct <link linkend="_structcrt__corpc__ops">crt_corpc_ops</link> *co_ops)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaa6195cef16a9b1d8fcd53c6a70f698bc">crt_group_rank</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> *rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaeb3e7ce396595c4ccc7efd906fe0fc1f">crt_group_version</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, uint32_t *version)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga551bfde3b82cd593538596880b820e46">crt_group_version_set</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, uint32_t version)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga3871193c4165b6dff00addb4836fc2a6">crt_group_size</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, uint32_t *size)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga822752e99a7283692cd060fab6e1daee">crt_proc_get_op</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_group___c_a_r_t_1gacfbc8243090b9821fcb4a138a205cb34">crt_proc_op_t</link> *proc_op)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac68d7ff7120655c800ba09359640be50">crt_proc_memcpy</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, void *data, size_t data_size)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga4ef07373df253f6c70ef1e1e45d322b8">crt_proc_int8_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int8_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga91b123e3fa2287bd0a31ebf8cbc2a4f0">crt_proc_uint8_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint8_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga2ed12b03a85fba73bda6054fd6f53f20">crt_proc_int16_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int16_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga7b00ae9657ee806e0859e2a631987a94">crt_proc_uint16_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint16_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaa95f26166658b049482d10e6fee8ff28">crt_proc_int32_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int32_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga26a21f8d43858142c598eee1387b12b7">crt_proc_uint32_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint32_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga6ff49fb8d9573d4f1d48c5262d5664e7">crt_proc_int64_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int64_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga7c220deeb56ef025dcbd69d6ca9d70d4">crt_proc_uint64_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint64_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaf7e7c9babd4f43f0a1ae0b96f1702c7d">crt_proc_bool</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, bool *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga452dc384be3595f6d7bd286b86e61230">crt_proc_crt_bulk_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> *bulk_hdl)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga778f5628eab28dfe9650d7a0ea189394">crt_proc_d_string_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, d_string_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gae16aeb42e71f6607342c8a3d86a65367">crt_proc_d_const_string_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, d_const_string_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga4703edbf21168a660b18b993917878d8">crt_proc_uuid_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uuid_t *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga2ae2e6bf75b5f8b89b996d69ef98dc1d">crt_proc_d_rank_list_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_structd__rank__list__t">d_rank_list_t</link> **data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gab8e5dddce30fb7643832ed05304e3d5a">crt_proc_d_iov_t</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_structd__iov__t">d_iov_t</link> *data)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gabdc6b7a0637bd846543b97a89c3ef080">crt_register_progress_cb</link> (crt_progress_cb cb, int ctx_idx, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaa63036cdba68a597084fe7a11da4aea7">crt_unregister_progress_cb</link> (crt_progress_cb cb, int ctx_idx, void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___c_a_r_t_1gab56d0dadd63ec9ee7c241aeb6d456ebd"/>int <emphasis role="strong">crt_register_timeout_cb</emphasis> (crt_timeout_cb cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaf65c8659f71470294c9d702b78a86097">crt_register_event_cb</link> (crt_event_cb event_handler, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gae333d240708c08ccd38ecf9df8449c35">crt_unregister_event_cb</link> (crt_event_cb event_handler, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gadfdd482f95145207f5e591af771037a2">crt_proto_register</link> (struct <link linkend="_structcrt__proto__format">crt_proto_format</link> *cpf)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gafe86d4600a2c1c1755c808b2834e7aa4">crt_proto_query</link> (<link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> *tgt_ep, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> base_opc, uint32_t *ver, int count, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gac91077f0afeb8cf8f6dc6933d7e54a6b">crt_proto_query_cb_t</link> cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga57f75b8ebd9c694b07c3aae13b9365ac">crt_rank_self_set</link> (<link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac61f182a8231c602267eafc5f1fc544f">crt_rank_uri_get</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, int tag, char **uri)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gac627ee6b4355ab3e277453a60ee0174d">crt_rank_state_get</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, struct <link linkend="_structswim__member__state">swim_member_state</link> *state)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga4f8f6d935bf918c31003c82cc02bd55b">crt_group_rank_remove</link> (<link linkend="_structcrt__group">crt_group_t</link> *group, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gad6b2b86a7bc35f74afebcbe1dac4ca87">crt_self_uri_get</link> (int tag, char **uri)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gafcba15a416034cca857d610726be3d7b">crt_group_info_get</link> (<link linkend="_structcrt__group">crt_group_t</link> *group, <link linkend="_structd__iov__t">d_iov_t</link> *grp_info)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gad03bd00dfb94ae9df11d9b6d70297821">crt_group_info_set</link> (<link linkend="_structd__iov__t">d_iov_t</link> *grp_info)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga404d78b73d711f7de5d997676fea00b5">crt_group_ranks_get</link> (<link linkend="_structcrt__group">crt_group_t</link> *group, <link linkend="_structd__rank__list__t">d_rank_list_t</link> **list)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga276c01c89aa5db8c3cdd1fd12fa6cde0">crt_group_view_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grpid, <link linkend="_structcrt__group">crt_group_t</link> **ret_grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga9d2535be2fa010039ae73222af0c603b">crt_group_view_destroy</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga18ffa8213adb6c0df49fb917b32087a7">crt_group_psr_set</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga9f31926b084149cfbe4ba581075a23e3">crt_group_psrs_set</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga5849954786bca2e5668a51f10641851a">crt_group_primary_rank_add</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> ctx, <link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> primary_rank, char *uri)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga6763a139366b59f7181c797fc40cd9d6">crt_group_secondary_rank_add</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> secondary_rank, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> primary_rank)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gafd785115d57a80cb730db77abb373b16">crt_group_secondary_create</link> (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grp_name, <link linkend="_structcrt__group">crt_group_t</link> *primary_grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *ranks, <link linkend="_structcrt__group">crt_group_t</link> **ret_grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga1f780239bb28215e64aa3edb7e36021a">crt_group_secondary_destroy</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1gaa18493edb4133011d65bbae0176da16b">crt_group_primary_modify</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> *ctxs, int num_ctxs, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *ranks, char **uris, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga45d6c2aa7ad84115a6398b74d29150e5">crt_group_mod_op_t</link> op, uint32_t version)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga5a8c919b8f0d85264425e45311205b70">crt_group_secondary_modify</link> (<link linkend="_structcrt__group">crt_group_t</link> *grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *sec_ranks, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *prim_ranks, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga45d6c2aa7ad84115a6398b74d29150e5">crt_group_mod_op_t</link> op, uint32_t version)</para>
</listitem>
            <listitem><para>int <link linkend="_group___c_a_r_t_1ga3bab597f86d13a32ae1ed335f3eda7bd">crt_swim_init</link> (int crt_ctx_idx)</para>
</listitem>
            <listitem><para>void <link linkend="_group___c_a_r_t_1ga6c54f3ae1017bc377f5824766c531a01">crt_swim_fini</link> (void)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___c_a_r_t_1ga7aa8c8adbbe2ac33f3a1eebd040388c2"/>    <section>
    <title>crt_bulk_decref</title>
<indexterm><primary>crt_bulk_decref</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_decref</secondary></indexterm>
<para><computeroutput>#define crt_bulk_decref( bulk_hdl)   <link linkend="_group___c_a_r_t_1gac6dabec2240d728d62bacec3d2a89df7">crt_bulk_free</link>(bulk_hdl)</computeroutput></para>
<para>Decrease reference of the bulk handle. </para>
<para>
Definition at line 966 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga8199b325289cd50bf713a97b51446255"/>    <section>
    <title>CRT_GEN_PROC_FUNC</title>
<indexterm><primary>CRT_GEN_PROC_FUNC</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_GEN_PROC_FUNC</secondary></indexterm>
<para><computeroutput>#define CRT_GEN_PROC_FUNC( type_name,  seq)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;crt_proc_struct_##type_name(<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link>&#32;proc,&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;type_name&#32;*ptr)&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;rc&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(proc&#32;==&#32;NULL&#32;||&#32;ptr&#32;==&#32;NULL)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_GOTO(out,&#32;rc&#32;=&#32;-DER_INVAL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_SEQ_FOR_EACH(CRT_GEN_PROC_FIELD,&#32;ptr,&#32;seq)&#32;\
&#32;&#32;&#32;&#32;out:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;rc;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
</programlisting><para>
Definition at line 745 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaf2c6a8f789ef6e904a1dc1a89368c52a"/>    <section>
    <title>CRT_GEN_STRUCT</title>
<indexterm><primary>CRT_GEN_STRUCT</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_GEN_STRUCT</secondary></indexterm>
<para><computeroutput>#define CRT_GEN_STRUCT( struct_type_name,  seq)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>struct_type_name&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_SEQ_FOR_EACH(CRT_GEN_STRUCT_FIELD,&#32;,&#32;seq)&#32;&#32;\
&#32;&#32;&#32;&#32;};
</programlisting><para>
Definition at line 685 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga7f57d141918ce10f867c1932687166e9"/>    <section>
    <title>CRT_GEN_STRUCT_FIELD</title>
<indexterm><primary>CRT_GEN_STRUCT_FIELD</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_GEN_STRUCT_FIELD</secondary></indexterm>
<para><computeroutput>#define CRT_GEN_STRUCT_FIELD( r,  data,  seq)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_EQUAL(CRT_ARRAY,&#32;CRT_GEN_GET_KIND(seq)),&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint64_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ca_count;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_GET_TYPE(seq)&#32;&#32;&#32;*ca_arrays;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_GET_TYPE(seq))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_EQUAL(CRT_PTR,&#32;CRT_GEN_GET_KIND(seq)),&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*CRT_GEN_GET_NAME(seq),&#32;CRT_GEN_GET_NAME(seq));
</programlisting><para>
Definition at line 675 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga861a3ced53f5701d716737b48f986afb"/>    <section>
    <title>crt_proc_struct</title>
<indexterm><primary>crt_proc_struct</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_struct</secondary></indexterm>
<para><computeroutput>#define crt_proc_struct</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;BOOST_PP_RPAREN()&#32;BOOST_PP_CAT&#32;BOOST_PP_LPAREN()&#32;\
&#32;&#32;&#32;&#32;crt_proc_struct_,
</programlisting><para>
Definition at line 691 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaf3875cc9d015cd8f5e18e63e06bea925"/>    <section>
    <title>CRT_RPC_DECLARE</title>
<indexterm><primary>CRT_RPC_DECLARE</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_RPC_DECLARE</secondary></indexterm>
<para><computeroutput>#define CRT_RPC_DECLARE( rpc_name,  fields_in,  fields_out)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_in),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_STRUCT(rpc_name##_in,&#32;fields_in),&#32;)&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_out),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_STRUCT(rpc_name##_out,&#32;fields_out),&#32;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;extern&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcrt__req__format">crt_req_format</link>&#32;CQF_##rpc_name;
</programlisting><para>
Definition at line 756 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga62c11e872f6451559fe92b2e6482e274"/>    <section>
    <title>CRT_RPC_DEFINE</title>
<indexterm><primary>CRT_RPC_DEFINE</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_RPC_DEFINE</secondary></indexterm>
<para><computeroutput>#define CRT_RPC_DEFINE( rpc_name,  fields_in,  fields_out)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_in),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_PROC_FUNC(rpc_name##_in,&#32;fields_in),&#32;)&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_out),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CRT_GEN_PROC_FUNC(rpc_name##_out,&#32;fields_out),&#32;)&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;_Pragma(<emphasis role="stringliteral">&quot;GCC&#32;diagnostic&#32;push&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;CRT_DISABLE_SIZEOF_POINTER_DIV&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;struct&#32;<link linkend="_structcrt__req__format">crt_req_format</link>&#32;CQF_##rpc_name&#32;=&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.crf_proc_in&#32;&#32;=&#32;(<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga1266fedf6067dbd6400b70730468145a">crt_proc_cb_t</link>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_in),&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crt_proc_struct_##rpc_name##_in,&#32;NULL),&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.crf_proc_out&#32;=&#32;(<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga1266fedf6067dbd6400b70730468145a">crt_proc_cb_t</link>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_out),&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crt_proc_struct_##rpc_name##_out,&#32;NULL),&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.crf_size_in&#32;&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_in),&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;rpc_name##_in),&#32;0),&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.crf_size_out&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BOOST_PP_IF(BOOST_PP_SEQ_SIZE(fields_out),&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;rpc_name##_out),&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;_Pragma(<emphasis role="stringliteral">&quot;GCC&#32;diagnostic&#32;pop&quot;</emphasis>)
</programlisting><para>
Definition at line 771 of file api.h.</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga660a415dda17860766a23f515fa69964"/>    <section>
    <title>CRT_VAR</title>
<indexterm><primary>CRT_VAR</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_VAR</secondary></indexterm>
<para><computeroutput>#define CRT_VAR   0</computeroutput></para>
<para>CART provides a set of macros for RPC registration. Using the macro interface to register RPCs is much simpler and reduces the opportunities for mistakes.</para>

<para>public macros: <literallayout><computeroutput>preparation:
    - CRT_RPC_DECLARE()
    - CRT_RPC_DEFINE()

registration:
    - CRT_RPC_REGISTER()
    - CRT_RPC_SRV_REGISTER()
</computeroutput></literallayout></para>

<para>To register an RPC using macros: CRT_RPC_DECLARE(my_rpc_name, input_fields, output_fields) CRT_RPC_DEFINE(my_rpc_name, input_fields, output_fields) CRT_RPC_REGISTER(opcode, flags, my_rpc_name);</para>

<para>The input/output structs can be accessed using the following pointers: struct my_rpc_name_in *rpc_in; struct my_rpc_name_out *rpc_out; Prepare struct types and format description for the input/output of an RPC. Supported types in the fields_in/fields_out list can be found in <link linkend="_cart_2types_8h">include/cart/types.h</link></para>

<para>Example usage:</para>

<para>#define CRT_ISEQ_MY_RPC ((int32_t) (mr_arg_1) CRT_VAR) ((uint32_t) (mr_arg_2) CRT_VAR) ((d_rank_t) (mr_rank) CRT_VAR) ((<link linkend="_structd__rank__list__t">d_rank_list_t</link>) (mr_rank_list) CRT_PTR) ((uuid_t) (mr_array) CRT_ARRAY) ((d_string_t) (mr_name) CRT_VAR)</para>

<para>#define CRT_OSEQ_MY_RPC ((int32_t) (mr_ret) CRT_VAR)</para>

<para>CRT_RPC_DECLARE(my_rpc, CRT_ISEQ_MY_RPC, CRT_OSEQ_MY_RPC) CRT_RPC_REGISTER(opcode, flags, my_rpc);</para>

<para>these two macros above expands into:</para>

<para>struct my_rpc_in { int32_t mr_arg_1; uint32_t mr_arg_2; d_rank_t mr_rank; <link linkend="_structd__rank__list__t">d_rank_list_t</link> *mr_rank_list; struct crt_array mr_array; d_string_t mr_name; };</para>

<para>struct my_rpc_out { int32_t mr_ret; };</para>

<para>crt_register(opcode, flags, &amp;CQF_my_rpc);</para>

<para>the macros CRT_RPC_DEFINE(my_rpc, CRT_ISEQ_MY_RPC, CRT_OSEQ_MY_RPC) expands into internal RPC definition which will be used in RPC registration. The content of this macro expansion will be changed in the future.</para>

<para>To use array types it&apos;s possible to define types as above, and then use the same macros to declare types and proc structs for types, and then reference the type directly in the RPC definition.</para>

<para>CRT_GEN_STRUCT(struct, CRT_SEQ_MY_TYPE) <formalpara><title>CRT_GEN_PROC_FUNC(struct, CRT_SEQ_MY_TYPE)</title></formalpara>
</para>
<para>
Definition at line 666 of file api.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426"/>    <section>
    <title>crt_rpc_task_t</title>
<indexterm><primary>crt_rpc_task_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rpc_task_t</secondary></indexterm>
<para><computeroutput>typedef int(* crt_rpc_task_t) (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> *ctx, void *rpc_hdlr_arg, void(*rpc_hdlr)(void *), void *arg)</computeroutput></para>
<para>The RPC callback for the context, which will be called when the context receives any RPC. In this callback, the handler can do sth specially for the RPC on this context, for example create another ULT to handle it, see DAOS.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ctx</entry>
                                <entry>
<para>The cart context. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rpc_hdlr_arg</entry>
                                <entry>
<para>The argument of rpc_hdlr. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rpc_hdlr</entry>
                                <entry>
<para>Real RPC handler. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>Extra argument for the callback.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 for success, negative value if failed. </para>
</formalpara>
</para>
<para>
Definition at line 835 of file api.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group___c_a_r_t_1gacfbc8243090b9821fcb4a138a205cb34"/>    <section>
    <title>crt_proc_op_t</title>
<indexterm><primary>crt_proc_op_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_op_t</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___c_a_r_t_1gacfbc8243090b9821fcb4a138a205cb34">crt_proc_op_t</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>CRT_PROC_ENCODE</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_PROC_ENCODE</secondary></indexterm>
<anchor xml:id="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a356d2703575b63de86a40aa29cc4fbde"/>CRT_PROC_ENCODE</entry><entry>
<para>causes the type to be encoded into the stream </para>
</entry></row><row><entry><indexterm><primary>CRT_PROC_DECODE</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_PROC_DECODE</secondary></indexterm>
<anchor xml:id="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a1d32757630fc4bb27314f7ed495fc172"/>CRT_PROC_DECODE</entry><entry>
<para>causes the type to be extracted from the stream </para>
</entry></row><row><entry><indexterm><primary>CRT_PROC_FREE</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>CRT_PROC_FREE</secondary></indexterm>
<anchor xml:id="_group___c_a_r_t_1ggacfbc8243090b9821fcb4a138a205cb34a476f3ed609dd4936e15f34765bdb69ff"/>CRT_PROC_FREE</entry><entry>
<para>can be used to release the space allocated by CRT_DECODE request </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 1396 of file api.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___c_a_r_t_1ga62bfa2cc197157396a2d9a27bd85503a"/>    <section>
    <title>crt_bulk_access()</title>
<indexterm><primary>crt_bulk_access</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_access</secondary></indexterm>
<para><computeroutput>int crt_bulk_access (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, <link linkend="_structd__sg__list__t">d_sg_list_t</link> * sgl)</computeroutput></para>
<para>Access local bulk handle to retrieve the sgl (segment list) associated with it.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>bulk handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>pointer to buffer segment list Caller should provide a valid sgl pointer, if sgl-&gt;sg_nr is too small, -DER_TRUNC will be returned and the needed number of iovs be set at sgl-&gt;sg_nr_out. On success, sgl-&gt;sg_nr_out will be set as the actual number of iovs.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga71778dc6e151ae5cb915e251a94053f0"/>    <section>
    <title>crt_bulk_addref()</title>
<indexterm><primary>crt_bulk_addref</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_addref</secondary></indexterm>
<para><computeroutput>int crt_bulk_addref (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl)</computeroutput></para>
<para>Add reference of the bulk handle.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>bulk handle</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac66777b15f7a835cf8806ff91199b0fa"/>    <section>
    <title>crt_bulk_bind()</title>
<indexterm><primary>crt_bulk_bind</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_bind</secondary></indexterm>
<para><computeroutput>int crt_bulk_bind (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx)</computeroutput></para>
<para>Bind bulk handle to local context, to associate the origin address of the local context to the bulk handle.</para>

<para>It can be used to forward/share the bulk handle from one server to another server, in that case the origin address of the bulk handle can be serialized/ de-serialized on-the-fly. The example usage: client sends a RPC request with a bulk handle embedded to server A, server A forward the client-side bulk handle to another server B. For that usage, client should call this API to bind the bulk handle with its local context before sending the RPC to server A. So when server B gets the de-serialized bulk handle forwarded by server A, the server B can know the client-side origin address to do the bulk transferring.</para>

<para>Users should note that binding a bulk handle adds an extra overhead on serialization, therefore it is recommended to use it with care. When binding a bulk handle on origin, <link linkend="_group___c_a_r_t_1ga219734f8633dcbe40254e7586f9ff810">crt_bulk_bind_transfer()</link> should be used since origin address information is embedded in the handle.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>created bulk handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga219734f8633dcbe40254e7586f9ff810"/>    <section>
    <title>crt_bulk_bind_transfer()</title>
<indexterm><primary>crt_bulk_bind_transfer</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_bind_transfer</secondary></indexterm>
<para><computeroutput>int crt_bulk_bind_transfer (struct <link linkend="_structcrt__bulk__desc">crt_bulk_desc</link> * bulk_desc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf25e76b2c5b895478f2b640af5ef9405">crt_bulk_cb_t</link> complete_cb, void * arg, crt_bulk_opid_t * opid)</computeroutput></para>
<para>Start a bulk transferring by using the remote bulk handle bound address rather than the RPC&apos;s origin address. It can be used for the case that the origin address of bulk handle is different with RPC request, for example DAOS&apos; bulk handle forwarding for server-side I/O dispatching.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_desc</entry>
                                <entry>
<para>pointer to bulk transferring descriptor it is user&apos;s responsibility to allocate and free it. Can free it after the calling returns. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>complete_cb</entry>
                                <entry>
<para>completion callback </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>arguments for the <emphasis>complete_cb</emphasis> </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>opid</entry>
                                <entry>
<para>returned bulk opid which can be used to abort the bulk. It is optional, can pass in NULL if don&apos;t need it.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaba8a38409ed5a85ae321b6824dafa2a4"/>    <section>
    <title>crt_bulk_create()</title>
<indexterm><primary>crt_bulk_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_create</secondary></indexterm>
<para><computeroutput>int crt_bulk_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structd__sg__list__t">d_sg_list_t</link> * sgl, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga0baa03079c26075653589c9138e74e0e">crt_bulk_perm_t</link> bulk_perm, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> * bulk_hdl)</computeroutput></para>
<para>Create a bulk handle</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>pointer to buffer segment list </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_perm</entry>
                                <entry>
<para>bulk permission, See <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga0baa03079c26075653589c9138e74e0e">crt_bulk_perm_t</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>created bulk handle</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac6dabec2240d728d62bacec3d2a89df7"/>    <section>
    <title>crt_bulk_free()</title>
<indexterm><primary>crt_bulk_free</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_free</secondary></indexterm>
<para><computeroutput>int crt_bulk_free (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl)</computeroutput></para>
<para>Free a bulk handle</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>bulk handle to be freed</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga8ad87ffb793d7e1ada6a9c2a2a9faaa2"/>    <section>
    <title>crt_bulk_get_len()</title>
<indexterm><primary>crt_bulk_get_len</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_get_len</secondary></indexterm>
<para><computeroutput>int crt_bulk_get_len (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, size_t * bulk_len)</computeroutput></para>
<para>Get length (number of bytes) of data abstracted by bulk handle.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>bulk handle </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>bulk_len</entry>
                                <entry>
<para>length of the data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaad009bd02a5e2bc06d63e35fb87dfadc"/>    <section>
    <title>crt_bulk_get_sgnum()</title>
<indexterm><primary>crt_bulk_get_sgnum</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_get_sgnum</secondary></indexterm>
<para><computeroutput>int crt_bulk_get_sgnum (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> bulk_hdl, unsigned int * bulk_sgnum)</computeroutput></para>
<para>Get the number of segments of data abstracted by bulk handle.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>bulk handle </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>bulk_sgnum</entry>
                                <entry>
<para>number of segments</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaae90d605eafc12f8c90e7aa430b87679"/>    <section>
    <title>crt_bulk_transfer()</title>
<indexterm><primary>crt_bulk_transfer</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_bulk_transfer</secondary></indexterm>
<para><computeroutput>int crt_bulk_transfer (struct <link linkend="_structcrt__bulk__desc">crt_bulk_desc</link> * bulk_desc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf25e76b2c5b895478f2b640af5ef9405">crt_bulk_cb_t</link> complete_cb, void * arg, crt_bulk_opid_t * opid)</computeroutput></para>
<para>Start a bulk transferring (inside an RPC handler).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>bulk_desc</entry>
                                <entry>
<para>pointer to bulk transferring descriptor it is user&apos;s responsibility to allocate and free it. Can free it after the calling returns. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>complete_cb</entry>
                                <entry>
<para>completion callback </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>arguments for the <emphasis>complete_cb</emphasis> </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>opid</entry>
                                <entry>
<para>returned bulk opid which can be used to abort the bulk. It is optional, can pass in NULL if don&apos;t need it.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga07eb1757b968c01796e32a5b9350cb8f"/>    <section>
    <title>crt_context_create()</title>
<indexterm><primary>crt_context_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_create</secondary></indexterm>
<para><computeroutput>int crt_context_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> * crt_ctx)</computeroutput></para>
<para>Create CRT transport context. Must be destroyed by <link linkend="_group___c_a_r_t_1ga0bbef2e88904b5ff96ac5e026727ebc3">crt_context_destroy()</link> before calling <link linkend="_group___c_a_r_t_1gac4586b6542b4c809a737a63e18b6f314">crt_finalize()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>created CRT transport context</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga0bbef2e88904b5ff96ac5e026727ebc3"/>    <section>
    <title>crt_context_destroy()</title>
<indexterm><primary>crt_context_destroy</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_destroy</secondary></indexterm>
<para><computeroutput>int crt_context_destroy (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int force)</computeroutput></para>
<para>Destroy CRT transport context.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context to be destroyed </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>force</entry>
                                <entry>
<para>1) force == 0 return as -EBUSY if there is any in-flight RPC request, so caller can wait its completion or timeout. 2) force != 0 will cancel all in-flight RPC requests.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error</para>
</formalpara>
<note><title>Note</title>

<para>Currently there is no in-flight list/queue in mercury. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga1bbbd9ba3a54384b8c41470652d3f222"/>    <section>
    <title>crt_context_ep_empty()</title>
<indexterm><primary>crt_context_ep_empty</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_ep_empty</secondary></indexterm>
<para><computeroutput>bool crt_context_ep_empty (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx)</computeroutput></para>
<para>check if the endpoint associated with <emphasis>crt_ctx</emphasis> is empty i.e. has no pending RPCs</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context to check</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if <emphasis>crt_ctx</emphasis> is empty, false if <emphasis>crt_ctx</emphasis> is not empty </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga8cd1507f48cd4c6e7a74def265859a5c"/>    <section>
    <title>crt_context_flush()</title>
<indexterm><primary>crt_context_flush</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_flush</secondary></indexterm>
<para><computeroutput>int crt_context_flush (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, uint64_t timeout)</computeroutput></para>
<para>Flush pending RPCs associated with the specified context.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context to flush </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout</entry>
                                <entry>
<para>max time duration (in seconds) to try to flush. 0 means infinite timeout. After <emphasis>timeout</emphasis> amount of time, this function will return even if there are still RPCs pending.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS if there are no more pending RPCs, -DER_TIMEDOUT if time out is reached before all RPCs are processed, other negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaead25d94b1228f3a3c33b0a60a7b482f"/>    <section>
    <title>crt_context_idx()</title>
<indexterm><primary>crt_context_idx</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_idx</secondary></indexterm>
<para><computeroutput>int crt_context_idx (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int * ctx_idx)</computeroutput></para>
<para>Query the index of the transport context, the index value ranges in [0, ctx_num - 1].</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ctx_idx</entry>
                                <entry>
<para>pointer to the returned index</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4fed553ebd62a4ff404b339cf3e2a5e4"/>    <section>
    <title>crt_context_num()</title>
<indexterm><primary>crt_context_num</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_num</secondary></indexterm>
<para><computeroutput>int crt_context_num (int * ctx_num)</computeroutput></para>
<para>Query the total number of the transport contexts.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out                                </entry>                                <entry>ctx_num</entry>
                                <entry>
<para>pointer to the returned number</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga383347752c15c431a5eabedafc2d2910"/>    <section>
    <title>crt_context_register_rpc_task()</title>
<indexterm><primary>crt_context_register_rpc_task</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_register_rpc_task</secondary></indexterm>
<para><computeroutput>int crt_context_register_rpc_task (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426">crt_rpc_task_t</link> rpc_cb, <link linkend="_group___c_a_r_t_1gab814fd7c6d7030a7ff733c3180f3c426">crt_rpc_task_t</link> iv_resp_cb, void * arg)</computeroutput></para>
<para>Register RPC process callback for all RPCs this context received. This callback enables the thread to modify how the rpc callbacks are handled for this context. For example DAOS creates another argobot ULT to handle it.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>The context to be registered. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rpc_cb</entry>
                                <entry>
<para>The RPC process callback. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iv_reps_cb</entry>
                                <entry>
<para>The IV response callback. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>The argument for RPC process callback.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga0c292fc8a9b62dca06eab39f6f598423"/>    <section>
    <title>crt_context_set_timeout()</title>
<indexterm><primary>crt_context_set_timeout</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_context_set_timeout</secondary></indexterm>
<para><computeroutput>int crt_context_set_timeout (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, uint32_t timeout_sec)</computeroutput></para>
<para>Set the timeout value for all RPC requests created on the specified context. Setting the timeout after <link linkend="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56">crt_req_create()</link> call will not affect already created rpcs.</para>

<para>This is an optional function.</para>

<para>The precedence order of timeouts:<itemizedlist>
<listitem>
<para><link linkend="_group___c_a_r_t_1ga5613cf2c576e417c441f66416c0a816d">crt_req_set_timeout()</link></para>
</listitem><listitem>
<para><link linkend="_group___c_a_r_t_1ga0c292fc8a9b62dca06eab39f6f598423">crt_context_set_timeout()</link></para>
</listitem><listitem>
<para>CRT_TIMEOUT environment variable</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CaRT context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout_sec</entry>
                                <entry>
<para>timeout value in seconds value of zero will be treated as invalid parameter.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaba82673fa83307e86afef3fc3fea3961"/>    <section>
    <title>crt_corpc_register()</title>
<indexterm><primary>crt_corpc_register</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_corpc_register</secondary></indexterm>
<para><computeroutput>int crt_corpc_register (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, struct <link linkend="_structcrt__req__format">crt_req_format</link> * drf, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga163a4cfb0f83c051338adb9a4c326eed">crt_rpc_cb_t</link> rpc_handler, struct <link linkend="_structcrt__corpc__ops">crt_corpc_ops</link> * co_ops)</computeroutput></para>
<para>Dynamically register a collective RPC. Can only be called on the server side.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>opc</entry>
                                <entry>
<para>unique opcode for the RPC </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>drf</entry>
                                <entry>
<para>pointer to the request format, which describe the request format and provide callback to pack/unpack each items in the request. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rpc_handler</entry>
                                <entry>
<para>pointer to RPC handler which will be triggered when RPC request opcode associated with rpc_name is received. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>co_ops</entry>
                                <entry>
<para>pointer to corpc ops table.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>1) User can use crt_rpc_srv_reg to register collective RPC if no reply aggregation needed. 2) Can pass in a NULL drf or rpc_handler if it was registered already, this routine only overwrite if they are non-NULL. 3) A NULL co_ops is allowed for the case that user does not need the corpc op table (the aggregating callback).</para>
</note>
<formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga78eb548c0805c201b3ef45a3d0f57265"/>    <section>
    <title>crt_corpc_req_create()</title>
<indexterm><primary>crt_corpc_req_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_corpc_req_create</secondary></indexterm>
<para><computeroutput>int crt_corpc_req_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * filter_ranks, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> co_bulk_hdl, void * priv, uint32_t flags, int tree_topo, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> ** req)</computeroutput></para>
<para>Create collective RPC request. Can reuse the crt_req_send to broadcast it. Can only be called on the server side.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>CRT group for the collective RPC </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>filter_ranks</entry>
                                <entry>
<para>optional filter ranks. By default, the RPC will be delivered to all members in the group except those in <emphasis>filter_ranks</emphasis>. If <emphasis>flags</emphasis> includes CRT_RPC_FLAG_FILTER_INVERT, the RPC will be delivered to <emphasis>filter_ranks</emphasis> only. The ranks are numbered in primary group. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>opc</entry>
                                <entry>
<para>unique opcode for the RPC </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>co_bulk_hdl</entry>
                                <entry>
<para>collective bulk handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>priv</entry>
                                <entry>
<para>A private pointer associated with the request will be passed to <link linkend="_structcrt__corpc__ops_1af99db443bd1d126cfe017fbb58880708">crt_corpc_ops::co_aggregate</link> as 2nd parameter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>collective RPC flags: CRT_RPC_FLAG_FILTER_INVERT to send only to <emphasis>filter_ranks</emphasis>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>tree_topo</entry>
                                <entry>
<para>tree topology for the collective propagation, can be calculated by crt_tree_topo(). See <emphasis>crt_tree_type</emphasis>, <emphasis>crt_tree_topo()</emphasis>. </para>
</entry>
                            </row>
                            <row>
                                <entry>                                </entry>                                <entry>req</entry>
                                <entry>
<para>[out] created collective RPC request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gab49687fc6b749807872c6c14f6dbf7ab"/>    <section>
    <title>crt_ep_abort()</title>
<indexterm><primary>crt_ep_abort</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_ep_abort</secondary></indexterm>
<para><computeroutput>int crt_ep_abort (<link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> * ep)</computeroutput></para>
<para>Abort all in-flight RPC requests targeting to an endpoint.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ep</entry>
                                <entry>
<para>endpoint address</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac4586b6542b4c809a737a63e18b6f314"/>    <section>
    <title>crt_finalize()</title>
<indexterm><primary>crt_finalize</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_finalize</secondary></indexterm>
<para><computeroutput>int crt_finalize (void )</computeroutput></para>
<para>Finalize CRT transport layer. Must be called on both the server side and client side before exit. This function is reference counted.</para>

<para><formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga69f78261760cc22432b6d79f591ef6f6"/>    <section>
    <title>crt_group_attach()</title>
<indexterm><primary>crt_group_attach</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_attach</secondary></indexterm>
<para><computeroutput>int crt_group_attach (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> srv_grpid, <link linkend="_structcrt__group">crt_group_t</link> ** attached_grp)</computeroutput></para>
<para>Attach to a primary service group.</para>

<para>By calling this function to attach to service primary group, and set <link linkend="_structcrt__endpoint__t_1aa5ce92d465b2def135da62d9a29058c0">crt_endpoint_t::ep_grp</link> as the returned attached_grp to send RPC to it.</para>

<para>For client, the first attached service primary group become its default service primary group. For server, its default service primary group is the primary group created in crt_init(). User can pass <link linkend="_structcrt__endpoint__t_1aa5ce92d465b2def135da62d9a29058c0">crt_endpoint_t::ep_grp</link> pointer as NULL to send RPC to the default service primary group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>srv_grpid</entry>
                                <entry>
<para>Primary service group ID to attach to. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>attached_grp</entry>
                                <entry>
<para>Returned attached group handle pointer.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error</para>
</formalpara>
<note><title>Note</title>

<para>Make sure cart context 0 exists when calling this function. cart context 0 is created by the first call to <link linkend="_group___c_a_r_t_1ga07eb1757b968c01796e32a5b9350cb8f">crt_context_create()</link>. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga488d62a433d3799355798075a9d2aa25"/>    <section>
    <title>crt_group_config_path_set()</title>
<indexterm><primary>crt_group_config_path_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_config_path_set</secondary></indexterm>
<para><computeroutput>int crt_group_config_path_set (const char * path)</computeroutput></para>
<para>Set an alternative directory to store/retrieve group attach info</para>

<para>The default location is /tmp. This allows client and server to agree on a location where to store the information and to avoid conflicts with other server groups that may be sharing the nodes</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>path</entry>
                                <entry>
<para>Path where to store attach info</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga1fecd36a0cebf97f4a1dd8ad7fc17f70"/>    <section>
    <title>crt_group_config_remove()</title>
<indexterm><primary>crt_group_config_remove</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_config_remove</secondary></indexterm>
<para><computeroutput>int crt_group_config_remove (<link linkend="_structcrt__group">crt_group_t</link> * grp)</computeroutput></para>
<para>Remove the attach info file for the specified group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Primary service group attach info to delete, NULL indicates local primary group.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4524b67a753babb8236aa5628e46b273"/>    <section>
    <title>crt_group_config_save()</title>
<indexterm><primary>crt_group_config_save</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_config_save</secondary></indexterm>
<para><computeroutput>int crt_group_config_save (<link linkend="_structcrt__group">crt_group_t</link> * grp, bool forall)</computeroutput></para>
<para>Dump the attach info for the specified group to a file. If not the local primary service group, it must be an attached service group. This must be invoked before any singleton can attach to the specified group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Primary service group attach info to save, NULL indicates local primary group. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>forall</entry>
                                <entry>
<para>True to save all service ranks&apos; uri addresses, false to only save the calling rank&apos;s uri for server, or the internal PSR of attached remote service group for client.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga89eb388dcb9f8e29d4aaa3f10aec0dd8"/>    <section>
    <title>crt_group_destroy()</title>
<indexterm><primary>crt_group_destroy</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_destroy</secondary></indexterm>
<para><computeroutput>int crt_group_destroy (<link linkend="_structcrt__group">crt_group_t</link> * grp, crt_grp_destroy_cb_t grp_destroy_cb, void * arg)</computeroutput></para>
<para>Destroy a CRT group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>group handle to be destroyed. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_destroy_cb</entry>
                                <entry>
<para>optional completion callback. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>optional arg for <emphasis>grp_destroy_cb</emphasis>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga25fd9e4aeddc993b950f4f6d1b1cc5e6"/>    <section>
    <title>crt_group_detach()</title>
<indexterm><primary>crt_group_detach</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_detach</secondary></indexterm>
<para><computeroutput>int crt_group_detach (<link linkend="_structcrt__group">crt_group_t</link> * attached_grp)</computeroutput></para>
<para>Detach a primary service group which was attached previously.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>attached_grp</entry>
                                <entry>
<para>attached primary service group handle.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gafcba15a416034cca857d610726be3d7b"/>    <section>
    <title>crt_group_info_get()</title>
<indexterm><primary>crt_group_info_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_info_get</secondary></indexterm>
<para><computeroutput>int crt_group_info_get (<link linkend="_structcrt__group">crt_group_t</link> * group, <link linkend="_structd__iov__t">d_iov_t</link> * grp_info)</computeroutput></para>
<para>Retrieve group information containing ranks and associated uris</para>

<para>This call will allocate memory for buffers in passed <emphasis>grp_info</emphasis>. User is responsible for freeing the memory once not needed anymore.</para>

<para>Returned data in <emphasis>grp_info</emphasis> can be passed to crt_group_info_set call in order to setup group on a different node.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>group</entry>
                                <entry>
<para>Group identifier </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_info</entry>
                                <entry>
<para>group info to be filled.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gad03bd00dfb94ae9df11d9b6d70297821"/>    <section>
    <title>crt_group_info_set()</title>
<indexterm><primary>crt_group_info_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_info_set</secondary></indexterm>
<para><computeroutput>int crt_group_info_set (<link linkend="_structd__iov__t">d_iov_t</link> * grp_info)</computeroutput></para>
<para>Sets group info (nodes and associated uris) baesd on passed grp_info data. <emphasis>grp_info</emphasis> is to be retrieved via <emphasis>crt_group_info_get</emphasis> call.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_info</entry>
                                <entry>
<para>Group information to set</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga924c5e73f8133fadc6d323eb7ec596ac"/>    <section>
    <title>crt_group_lookup()</title>
<indexterm><primary>crt_group_lookup</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_lookup</secondary></indexterm>
<para><computeroutput><link linkend="_structcrt__group">crt_group_t</link>* crt_group_lookup (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grp_id)</computeroutput></para>
<para>Lookup the group handle of one group ID (sub-group or primary group).</para>

<para>The primary group can be queried using the group ID passed to crt_init. Some special cases: 1) If (grp_id == NULL), it means the default primary group ID CRT_DEFAULT_GRPID.</para>

<para><note><title>Note</title>

<para>user can cache the returned group handle to avoid the overhead of frequent lookup.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_id</entry>
                                <entry>
<para>unique group ID.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>group handle on success, NULL if not found. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaa18493edb4133011d65bbae0176da16b"/>    <section>
    <title>crt_group_primary_modify()</title>
<indexterm><primary>crt_group_primary_modify</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_primary_modify</secondary></indexterm>
<para><computeroutput>int crt_group_primary_modify (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> * ctxs, int num_ctxs, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * ranks, char ** uris, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga45d6c2aa7ad84115a6398b74d29150e5">crt_group_mod_op_t</link> op, uint32_t version)</computeroutput></para>
<para>Perform a primary group modification in an atomic fashion based on the operation specified. Currently supported operations are &apos;add&apos;, &apos;remove&apos; and &apos;replace&apos;. This API allows multiple ranks to be added or removed at the same time with a single call.</para>

<para>Add: Ranks in the rank list are added to the group with corresponding uris Remove: Ranks in the rank list are removed from the group Replace: Ranks that exist in group and not in rank list get removed Ranks that exist in rank list and not in group get added Ranks that exist in both rank list and group are left unmodified</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ctxs</entry>
                                <entry>
<para>Array of contexts </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>num_ctxs</entry>
                                <entry>
<para>Number of contexts </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ranks</entry>
                                <entry>
<para>Modification rank list </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>uris</entry>
                                <entry>
<para>Array of URIs corresponding to contexts and rank list </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>op</entry>
                                <entry>
<para>Modification operation. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>version</entry>
                                <entry>
<para>New group version</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure.</para>
</formalpara>
Note: uris shall be an array of (ranks-&gt;rl_nr * num_ctxs) strings In multi-provider case, where num_ctxs &gt; 1, uris array should be formed as follows: [uri0 for provider0 identified by ctx0] [uri1 for provider0] .... [uriX for provider0]</para>

<para>[uri0 for provider1 identified by ctx1] [uri1 for provider1] ... [uriX for provider1]</para>

<para>[uri0 for provider2 identified by ctx2] etc... </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga5849954786bca2e5668a51f10641851a"/>    <section>
    <title>crt_group_primary_rank_add()</title>
<indexterm><primary>crt_group_primary_rank_add</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_primary_rank_add</secondary></indexterm>
<para><computeroutput>int crt_group_primary_rank_add (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> ctx, <link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> primary_rank, char * uri)</computeroutput></para>
<para>Add rank to the specified primary group.</para>

<para>Passed ctx will be used to determine a provider for which the uri is being added in the case of the primary group.</para>

<para>For primary groups when uri is specified, the uri is assumed to be &apos;base&apos; URI, corresponding to tag=0 of the node being added.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ctx</entry>
                                <entry>
<para>Associated cart context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>primary_rank</entry>
                                <entry>
<para>Primary rank to be added </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>uri</entry>
                                <entry>
<para>URI of the primary rank</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga18ffa8213adb6c0df49fb917b32087a7"/>    <section>
    <title>crt_group_psr_set()</title>
<indexterm><primary>crt_group_psr_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_psr_set</secondary></indexterm>
<para><computeroutput>int crt_group_psr_set (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</computeroutput></para>
<para>Specify rank to be a PSR for the provided group</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Rank to set as PSR</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga9f31926b084149cfbe4ba581075a23e3"/>    <section>
    <title>crt_group_psrs_set()</title>
<indexterm><primary>crt_group_psrs_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_psrs_set</secondary></indexterm>
<para><computeroutput>int crt_group_psrs_set (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * rank_list)</computeroutput></para>
<para>Specify list of ranks to be a PSRs for the provided group</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank_list</entry>
                                <entry>
<para>Ranks to set as PSRs</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaa6195cef16a9b1d8fcd53c6a70f698bc"/>    <section>
    <title>crt_group_rank()</title>
<indexterm><primary>crt_group_rank</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_rank</secondary></indexterm>
<para><computeroutput>int crt_group_rank (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> * rank)</computeroutput></para>
<para>Query the caller&apos;s rank number within group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>CRT group handle, NULL mean the primary/global group </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rank</entry>
                                <entry>
<para>result rank number. In singleton mode always get rank 0 for local group.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga38f94d125e012d5ee8c7e7e1951977f7"/>    <section>
    <title>crt_group_rank_p2s()</title>
<indexterm><primary>crt_group_rank_p2s</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_rank_p2s</secondary></indexterm>
<para><computeroutput>int crt_group_rank_p2s (<link linkend="_structcrt__group">crt_group_t</link> * subgrp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank_in, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> * rank_out)</computeroutput></para>
<para>Convert a primary group rank to a local subgroup rank. Given a primary group rank <computeroutput>rank_in</computeroutput>, find its rank number <computeroutput>rank_out</computeroutput> within a sub-group <computeroutput>subgrp</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>subgrp</entry>
                                <entry>
<para>CRT subgroup handle. subgrp must be local, i.e. not created by <link linkend="_group___c_a_r_t_1ga69f78261760cc22432b6d79f591ef6f6">crt_group_attach()</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank_in</entry>
                                <entry>
<para>primary group rank number. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rank_out</entry>
                                <entry>
<para>the result rank number of the conversion. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4f8f6d935bf918c31003c82cc02bd55b"/>    <section>
    <title>crt_group_rank_remove()</title>
<indexterm><primary>crt_group_rank_remove</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_rank_remove</secondary></indexterm>
<para><computeroutput>int crt_group_rank_remove (<link linkend="_structcrt__group">crt_group_t</link> * group, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</computeroutput></para>
<para>Remove specified rank from the group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>group</entry>
                                <entry>
<para>Group identifier </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Rank to remove</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga1ee5768a3251446b9032a2efa9e82956"/>    <section>
    <title>crt_group_rank_s2p()</title>
<indexterm><primary>crt_group_rank_s2p</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_rank_s2p</secondary></indexterm>
<para><computeroutput>int crt_group_rank_s2p (<link linkend="_structcrt__group">crt_group_t</link> * subgrp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank_in, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> * rank_out)</computeroutput></para>
<para>Convert a local subgroup rank to a primary group rank. Given a sub-group <computeroutput>subgrp</computeroutput> and rank <computeroutput>rank_in</computeroutput> within the sub-group, find out its primary group rank number <computeroutput>rank_out</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>subgrp</entry>
                                <entry>
<para>CRT subgroup handle. subgrp must be local, i.e. not created by <link linkend="_group___c_a_r_t_1ga69f78261760cc22432b6d79f591ef6f6">crt_group_attach()</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank_in</entry>
                                <entry>
<para>rank number within grp. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rank_out</entry>
                                <entry>
<para>the result rank number of the conversion. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga404d78b73d711f7de5d997676fea00b5"/>    <section>
    <title>crt_group_ranks_get()</title>
<indexterm><primary>crt_group_ranks_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_ranks_get</secondary></indexterm>
<para><computeroutput>int crt_group_ranks_get (<link linkend="_structcrt__group">crt_group_t</link> * group, <link linkend="_structd__rank__list__t">d_rank_list_t</link> ** list)</computeroutput></para>
<para>Retrieve list of ranks that belong to the specified gorup.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>group</entry>
                                <entry>
<para>Group identifier </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>list</entry>
                                <entry>
<para>Rank list that gets filled with members</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gafd785115d57a80cb730db77abb373b16"/>    <section>
    <title>crt_group_secondary_create()</title>
<indexterm><primary>crt_group_secondary_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_secondary_create</secondary></indexterm>
<para><computeroutput>int crt_group_secondary_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grp_name, <link linkend="_structcrt__group">crt_group_t</link> * primary_grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * ranks, <link linkend="_structcrt__group">crt_group_t</link> ** ret_grp)</computeroutput></para>
<para>Create a secondary group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_name</entry>
                                <entry>
<para>Name of the group </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>primary_grp</entry>
                                <entry>
<para>Primary group handle associated with this group. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ranks</entry>
                                <entry>
<para>Optional list of primary ranks </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ret_grp</entry>
                                <entry>
<para>Returned group handle for the secondary group</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga1f780239bb28215e64aa3edb7e36021a"/>    <section>
    <title>crt_group_secondary_destroy()</title>
<indexterm><primary>crt_group_secondary_destroy</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_secondary_destroy</secondary></indexterm>
<para><computeroutput>int crt_group_secondary_destroy (<link linkend="_structcrt__group">crt_group_t</link> * grp)</computeroutput></para>
<para>Destroy a secondary group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga5a8c919b8f0d85264425e45311205b70"/>    <section>
    <title>crt_group_secondary_modify()</title>
<indexterm><primary>crt_group_secondary_modify</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_secondary_modify</secondary></indexterm>
<para><computeroutput>int crt_group_secondary_modify (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * sec_ranks, <link linkend="_structd__rank__list__t">d_rank_list_t</link> * prim_ranks, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga45d6c2aa7ad84115a6398b74d29150e5">crt_group_mod_op_t</link> op, uint32_t version)</computeroutput></para>
<para>Perform a secondary group modification in an atomic fashion based on the operation type specified. Operations are the same as in <link linkend="_group___c_a_r_t_1gaa18493edb4133011d65bbae0176da16b">crt_group_primary_modify</link> API.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sec_ranks</entry>
                                <entry>
<para>List of secondary ranks </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>prim_ranks</entry>
                                <entry>
<para>List of primary ranks </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>op</entry>
                                <entry>
<para>Modification operation </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>version</entry>
                                <entry>
<para>New group version</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga6763a139366b59f7181c797fc40cd9d6"/>    <section>
    <title>crt_group_secondary_rank_add()</title>
<indexterm><primary>crt_group_secondary_rank_add</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_secondary_rank_add</secondary></indexterm>
<para><computeroutput>int crt_group_secondary_rank_add (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> secondary_rank, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> primary_rank)</computeroutput></para>
<para>Add rank to the specified secondary group.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>secondary_rank</entry>
                                <entry>
<para>Secondary rank </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>primary_rank</entry>
                                <entry>
<para>Primary rank to map to secondary</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga3871193c4165b6dff00addb4836fc2a6"/>    <section>
    <title>crt_group_size()</title>
<indexterm><primary>crt_group_size</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_size</secondary></indexterm>
<para><computeroutput>int crt_group_size (<link linkend="_structcrt__group">crt_group_t</link> * grp, uint32_t * size)</computeroutput></para>
<para>Query number of group members.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>CRT group handle, NULL mean the local primary/global group </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>size</entry>
                                <entry>
<para>size (total number of ranks) of the group. In singleton mode always get size 1 for local group.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaeb3e7ce396595c4ccc7efd906fe0fc1f"/>    <section>
    <title>crt_group_version()</title>
<indexterm><primary>crt_group_version</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_version</secondary></indexterm>
<para><computeroutput>int crt_group_version (<link linkend="_structcrt__group">crt_group_t</link> * grp, uint32_t * version)</computeroutput></para>
<para>Query the group membership version</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>CRT group handle, NULL means the local primary/global group </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>version</entry>
                                <entry>
<para>group membership version</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga551bfde3b82cd593538596880b820e46"/>    <section>
    <title>crt_group_version_set()</title>
<indexterm><primary>crt_group_version_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_version_set</secondary></indexterm>
<para><computeroutput>int crt_group_version_set (<link linkend="_structcrt__group">crt_group_t</link> * grp, uint32_t version)</computeroutput></para>
<para>Set the group membership version</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>CRT group handle, NULL means the local primary/global group </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>version</entry>
                                <entry>
<para>New group membership version</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga276c01c89aa5db8c3cdd1fd12fa6cde0"/>    <section>
    <title>crt_group_view_create()</title>
<indexterm><primary>crt_group_view_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_view_create</secondary></indexterm>
<para><computeroutput>int crt_group_view_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grpid, <link linkend="_structcrt__group">crt_group_t</link> ** ret_grp)</computeroutput></para>
<para>Create local group view and return a handle to a group. This call is only supported for clients.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp_id</entry>
                                <entry>
<para>Group id to create </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ret_grp</entry>
                                <entry>
<para>Returned group handle</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga9d2535be2fa010039ae73222af0c603b"/>    <section>
    <title>crt_group_view_destroy()</title>
<indexterm><primary>crt_group_view_destroy</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_group_view_destroy</secondary></indexterm>
<para><computeroutput>int crt_group_view_destroy (<link linkend="_structcrt__group">crt_group_t</link> * grp)</computeroutput></para>
<para>Destroy group handle previously created by <emphasis>crt_Group_view_create</emphasis> This call is only supported for clients</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group handle to destroy</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga41358b9de3b91a0f453077886b64ea22"/>    <section>
    <title>crt_hlc2nsec()</title>
<indexterm><primary>crt_hlc2nsec</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc2nsec</secondary></indexterm>
<para><computeroutput>uint64_t crt_hlc2nsec (uint64_t hlc)</computeroutput></para>
<para>Return the nanosecond timestamp of hlc.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hlc</entry>
                                <entry>
<para>HLC timestamp</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Nanosecond timestamp </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga0dcbf9c1b804b281539c8d14884e9f2e"/>    <section>
    <title>crt_hlc2unixnsec()</title>
<indexterm><primary>crt_hlc2unixnsec</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc2unixnsec</secondary></indexterm>
<para><computeroutput>uint64_t crt_hlc2unixnsec (uint64_t hlc)</computeroutput></para>
<para>Return the Unix nanosecond timestamp of hlc.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hlc</entry>
                                <entry>
<para>HLC timestamp</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Unix nanosecond timestamp </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga154ce95ef86a6ded2d1470dbbbc87131"/>    <section>
    <title>crt_hlc_epsilon_get()</title>
<indexterm><primary>crt_hlc_epsilon_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc_epsilon_get</secondary></indexterm>
<para><computeroutput>uint64_t crt_hlc_epsilon_get (void )</computeroutput></para>
<para>Get the maximum system clock offset. See crt_hlc_set_epsilon&apos;s API doc.</para>

<para><formalpara><title>Returns</title>

<para>Nonnegative HLC duration </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac6e9725c387d76d22a7f6b7a99d5d601"/>    <section>
    <title>crt_hlc_epsilon_get_bound()</title>
<indexterm><primary>crt_hlc_epsilon_get_bound</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc_epsilon_get_bound</secondary></indexterm>
<para><computeroutput>uint64_t crt_hlc_epsilon_get_bound (uint64_t hlc)</computeroutput></para>
<para>Get the upper bound of the HLC timestamp of an event happened before (through out of band communication) the event at <emphasis>hlc</emphasis>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>hlc</entry>
                                <entry>
<para>HLC timestamp</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Upper bound HLC timestamp </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga2737d6daf6a8ad986097ff85fc8736a6"/>    <section>
    <title>crt_hlc_epsilon_set()</title>
<indexterm><primary>crt_hlc_epsilon_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc_epsilon_set</secondary></indexterm>
<para><computeroutput>void crt_hlc_epsilon_set (uint64_t epsilon)</computeroutput></para>
<para>Set the maximum system clock offset.</para>

<para>This is the maximum offset believed to be observable between the physical clocks behind any two HLCs in the system. The format of the value represent a nonnegative diff between two HLC timestamps. The value is rounded up to the HLC physical resolution.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>epsilon</entry>
                                <entry>
<para>Nonnegative HLC duration </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_a_r_t_1gadfaee37eaf074ffaab7a7706544935c5"/>    <section>
    <title>crt_hlc_get()</title>
<indexterm><primary>crt_hlc_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc_get</secondary></indexterm>
<para><computeroutput>uint64_t crt_hlc_get (void )</computeroutput></para>
<para>Return current HLC timestamp</para>

<para>HLC timestamps are synchronized between nodes. They sends with each RPC for different nodes and updated when received from different node. The HLC timestamps synchronization will be called transparently at sending/receiving RPC into the wire (when Mercury will encode/decode the packet). So, with each call of this function you will get from it always last HLC timestamp synchronized across all nodes involved in current communication.</para>

<para><formalpara><title>Returns</title>

<para>HLC timestamp </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga25030f5bcea43a1e47f56cf7f43cd596"/>    <section>
    <title>crt_hlc_get_msg()</title>
<indexterm><primary>crt_hlc_get_msg</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_hlc_get_msg</secondary></indexterm>
<para><computeroutput>int crt_hlc_get_msg (uint64_t msg, uint64_t * hlc_out, uint64_t * offset)</computeroutput></para>
<para>Sync HLC with remote message and get current HLC timestamp.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>msg</entry>
                                <entry>
<para>remote HLC timestamp </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>hlc_out</entry>
                                <entry>
<para>HLC timestamp </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>offset</entry>
                                <entry>
<para>Returned observed clock offset.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success or error on failure </para>
</formalpara>

                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>-DER_HLC_SYNC</entry>
                                <entry>
<para><emphasis>msg</emphasis> is too much higher than the local physical clock </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga9383ec65a20b8de170a7e54c19ed135d"/>    <section>
    <title>crt_init_opt()</title>
<indexterm><primary>crt_init_opt</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_init_opt</secondary></indexterm>
<para><computeroutput>int crt_init_opt (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gade68a0764f3116705808a124b9147ab6">crt_group_id_t</link> grpid, uint32_t flags, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gab22231966be5442b49fdced962a513df">crt_init_options_t</link> * opt)</computeroutput></para>
<para>Initialize CRT transport layer. Must be called on both the server side and the client side. This function is reference counted, it can be called multiple times. Each call must be paired with a corresponding <link linkend="_group___c_a_r_t_1gac4586b6542b4c809a737a63e18b6f314">crt_finalize()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grpid</entry>
                                <entry>
<para>primary group ID, user can provide a NULL value in that case will use the default group ID CRT_DEFAULT_GRPID. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>bit flags, see <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaad03f467ebc70e6873998feeaa0a9dae">crt_init_flag_bits</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>opt</entry>
                                <entry>
<para>additional init time options. If a NULL value is provided, this call becomes identical to crt_init().</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4a895b8ea1fb5065547e963872a6ad5f"/>    <section>
    <title>crt_nsec2hlc()</title>
<indexterm><primary>crt_nsec2hlc</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_nsec2hlc</secondary></indexterm>
<para><computeroutput>uint64_t crt_nsec2hlc (uint64_t nsec)</computeroutput></para>
<para>Return the HLC timestamp from nsec.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>nsec</entry>
                                <entry>
<para>Nanosecond timestamp</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>HLC timestamp </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaf7e7c9babd4f43f0a1ae0b96f1702c7d"/>    <section>
    <title>crt_proc_bool()</title>
<indexterm><primary>crt_proc_bool</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_bool</secondary></indexterm>
<para><computeroutput>int crt_proc_bool (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, bool * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga452dc384be3595f6d7bd286b86e61230"/>    <section>
    <title>crt_proc_crt_bulk_t()</title>
<indexterm><primary>crt_proc_crt_bulk_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_crt_bulk_t</secondary></indexterm>
<para><computeroutput>int crt_proc_crt_bulk_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga98854df58311faf6d4fcfb3c7554f66c">crt_bulk_t</link> * bulk_hdl)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>bulk_hdl</entry>
                                <entry>
<para>pointer to bulk handle</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gae16aeb42e71f6607342c8a3d86a65367"/>    <section>
    <title>crt_proc_d_const_string_t()</title>
<indexterm><primary>crt_proc_d_const_string_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_d_const_string_t</secondary></indexterm>
<para><computeroutput>int crt_proc_d_const_string_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, d_const_string_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gab8e5dddce30fb7643832ed05304e3d5a"/>    <section>
    <title>crt_proc_d_iov_t()</title>
<indexterm><primary>crt_proc_d_iov_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_d_iov_t</secondary></indexterm>
<para><computeroutput>int crt_proc_d_iov_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_structd__iov__t">d_iov_t</link> * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga2ae2e6bf75b5f8b89b996d69ef98dc1d"/>    <section>
    <title>crt_proc_d_rank_list_t()</title>
<indexterm><primary>crt_proc_d_rank_list_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_d_rank_list_t</secondary></indexterm>
<para><computeroutput>int crt_proc_d_rank_list_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_structd__rank__list__t">d_rank_list_t</link> ** data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>second level pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error</para>
</formalpara>
<note><title>Note</title>

<para>1) here pass in the 2nd level pointer of <link linkend="_structd__rank__list__t">d_rank_list_t</link>, to make it possible to set it to NULL when decoding. 2) if the rank_list is non-NULL, caller should firstly duplicate it and pass the duplicated rank list&apos;s 2nd level pointer as parameter, because this function will internally free the memory when freeing the input or output. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga778f5628eab28dfe9650d7a0ea189394"/>    <section>
    <title>crt_proc_d_string_t()</title>
<indexterm><primary>crt_proc_d_string_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_d_string_t</secondary></indexterm>
<para><computeroutput>int crt_proc_d_string_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, d_string_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga822752e99a7283692cd060fab6e1daee"/>    <section>
    <title>crt_proc_get_op()</title>
<indexterm><primary>crt_proc_get_op</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_get_op</secondary></indexterm>
<para><computeroutput>int crt_proc_get_op (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, <link linkend="_group___c_a_r_t_1gacfbc8243090b9821fcb4a138a205cb34">crt_proc_op_t</link> * proc_op)</computeroutput></para>
<para>Get the operation type associated to the proc processor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>proc_op</entry>
                                <entry>
<para>returned proc operation type</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga2ed12b03a85fba73bda6054fd6f53f20"/>    <section>
    <title>crt_proc_int16_t()</title>
<indexterm><primary>crt_proc_int16_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_int16_t</secondary></indexterm>
<para><computeroutput>int crt_proc_int16_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int16_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaa95f26166658b049482d10e6fee8ff28"/>    <section>
    <title>crt_proc_int32_t()</title>
<indexterm><primary>crt_proc_int32_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_int32_t</secondary></indexterm>
<para><computeroutput>int crt_proc_int32_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int32_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga6ff49fb8d9573d4f1d48c5262d5664e7"/>    <section>
    <title>crt_proc_int64_t()</title>
<indexterm><primary>crt_proc_int64_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_int64_t</secondary></indexterm>
<para><computeroutput>int crt_proc_int64_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int64_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4ef07373df253f6c70ef1e1e45d322b8"/>    <section>
    <title>crt_proc_int8_t()</title>
<indexterm><primary>crt_proc_int8_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_int8_t</secondary></indexterm>
<para><computeroutput>int crt_proc_int8_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, int8_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac68d7ff7120655c800ba09359640be50"/>    <section>
    <title>crt_proc_memcpy()</title>
<indexterm><primary>crt_proc_memcpy</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_memcpy</secondary></indexterm>
<para><computeroutput>int crt_proc_memcpy (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, void * data, size_t data_size)</computeroutput></para>
<para>Base proc routine using memcpy().</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>data_size</entry>
                                <entry>
<para>data size</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga7b00ae9657ee806e0859e2a631987a94"/>    <section>
    <title>crt_proc_uint16_t()</title>
<indexterm><primary>crt_proc_uint16_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_uint16_t</secondary></indexterm>
<para><computeroutput>int crt_proc_uint16_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint16_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga26a21f8d43858142c598eee1387b12b7"/>    <section>
    <title>crt_proc_uint32_t()</title>
<indexterm><primary>crt_proc_uint32_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_uint32_t</secondary></indexterm>
<para><computeroutput>int crt_proc_uint32_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint32_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga7c220deeb56ef025dcbd69d6ca9d70d4"/>    <section>
    <title>crt_proc_uint64_t()</title>
<indexterm><primary>crt_proc_uint64_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_uint64_t</secondary></indexterm>
<para><computeroutput>int crt_proc_uint64_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint64_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga91b123e3fa2287bd0a31ebf8cbc2a4f0"/>    <section>
    <title>crt_proc_uint8_t()</title>
<indexterm><primary>crt_proc_uint8_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_uint8_t</secondary></indexterm>
<para><computeroutput>int crt_proc_uint8_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uint8_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga4703edbf21168a660b18b993917878d8"/>    <section>
    <title>crt_proc_uuid_t()</title>
<indexterm><primary>crt_proc_uuid_t</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proc_uuid_t</secondary></indexterm>
<para><computeroutput>int crt_proc_uuid_t (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga433c0df9cb4242d917d16dd2bc56968a">crt_proc_t</link> proc, uuid_t * data)</computeroutput></para>
<para>Generic processing routine.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in,out                                </entry>                                <entry>proc</entry>
                                <entry>
<para>abstract processor object </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>data</entry>
                                <entry>
<para>pointer to data</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gad8e2ce33333c631754c0ea69846851d8"/>    <section>
    <title>crt_progress()</title>
<indexterm><primary>crt_progress</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_progress</secondary></indexterm>
<para><computeroutput>int crt_progress (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int64_t timeout)</computeroutput></para>
<para>Progress RPC execution on a cart context <emphasis>crt_ctx</emphasis> for at most <emphasis>timeout</emphasis> micro-seconds. The progress call returns when the timeout is reached or any completion has occurred.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>cart context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout</entry>
                                <entry>
<para>how long is caller going to wait (micro-second) at most for a completion to occur. Can return when one or more operation progressed. zero means no waiting.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success -DER_TIMEDOUT if exited after timeout has expired negative value if other internal error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gab7611702682ff56c57d697cb2670d426"/>    <section>
    <title>crt_progress_cond()</title>
<indexterm><primary>crt_progress_cond</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_progress_cond</secondary></indexterm>
<para><computeroutput>int crt_progress_cond (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, int64_t timeout, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gacef78a24d5f55f2da8a57bb1aceef174">crt_progress_cond_cb_t</link> cond_cb, void * arg)</computeroutput></para>
<para>Progress RPC execution on a cart context with a callback function. The callback function is regularly called internally. The progress call returns when the callback returns a non-zero value or when the timeout expires.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>cart context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout</entry>
                                <entry>
<para>how long is the caller going to wait in micro-second. zero means no waiting and -1 waits indefinitely. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cond_cb</entry>
                                <entry>
<para>progress condition callback. cart internally calls this function, when it returns non-zero then stops the progressing or waiting and returns. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>optional argument to cond_cb.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success -DER_TIMEDOUT if exited after timeout has expired negative value if internal and <emphasis>conb_cb</emphasis> error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gafe86d4600a2c1c1755c808b2834e7aa4"/>    <section>
    <title>crt_proto_query()</title>
<indexterm><primary>crt_proto_query</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proto_query</secondary></indexterm>
<para><computeroutput>int crt_proto_query (<link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> * tgt_ep, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> base_opc, uint32_t * ver, int count, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gac91077f0afeb8cf8f6dc6933d7e54a6b">crt_proto_query_cb_t</link> cb, void * arg)</computeroutput></para>
<para>query tgt_ep if it has registered base_opc with version.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tgt_ep</entry>
                                <entry>
<para>the service rank to query </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>base_opc</entry>
                                <entry>
<para>the base opcode for the protocol </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ver</entry>
                                <entry>
<para>array of protocol version </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>number of elements in ver </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cb</entry>
                                <entry>
<para>completion callback. <link linkend="_group___c_a_r_t_1gafe86d4600a2c1c1755c808b2834e7aa4">crt_proto_query()</link> internally sends an RPC to <emphasis>tgt_ep</emphasis>. <emphasis>cb</emphasis> will be called upon completion of that RPC. The highest protocol version supported by the target is available to <emphasis>cb</emphasis> as cb_info-&gt;pq_ver. (See <link linkend="_group___c_a_r_t___t_y_p_e_s_1gac91077f0afeb8cf8f6dc6933d7e54a6b">crt_proto_query_cb_t</link> and <link linkend="_structcrt__proto__query__cb__info">crt_proto_query_cb_info</link>) </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>arg</entry>
                                <entry>
<para>argument for <emphasis>cb</emphasis>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gadfdd482f95145207f5e591af771037a2"/>    <section>
    <title>crt_proto_register()</title>
<indexterm><primary>crt_proto_register</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_proto_register</secondary></indexterm>
<para><computeroutput>int crt_proto_register (struct <link linkend="_structcrt__proto__format">crt_proto_format</link> * cpf)</computeroutput></para>
<para>A protocol is a set of RPCs. A protocol has a base opcode and a version, member RPCs have opcodes that are contiguous numbers starting from (base opcode | version). For example, if the protocol has</para>

<para>base opcode: 0x05000000 version number: 0x00030000,</para>

<para>its member RPCs will have opcode 0x05030000 0x05030001 0x05030002 and so on</para>

<para>base opcode mask 0xFF000000UL version number mask 0x00FF0000UL</para>

<para>The base opcode 0xFF000000UL is not allowed. This gives 255 protocols, 256 versions for each protocol, 65,536 RPCs per protocol.</para>

<para>Mode of operation:</para>

<para>The client and server have knowledge of all possibly supported protocols. The protocol negotiation is just to let a client find out which ones are actually registered on the server.</para>

<para>1) A server registers a protocol with base opcode MY_BASE_OPC and version number MY_VER, with member RPC opcodes MY_OPC_0 = (MY_BASE_OPC | MY_VER), MY_OPC_1 = (MY_BASE_OPC | MY_VER) + 1, MY_OPC_2 = (MY_BASE_OPC | MY_VER) + 2, 2) A client queries the server if MY_BASE_OPC with version number is registered, the server replies Yes.</para>

<para>3) The client registers MY_BASE_OPC with version number MY_VER, then starts sending RPCs using it&apos;s member opcodes. 1) define crf for each member RPC. my_rpc_crf_1, my_rpc_crf_2</para>

<para>2) req_format array for member RPCs: struct <link linkend="_structcrt__req__format">crt_req_format</link> *my_crf_array[] = { &amp;my_crf_1, &amp;my_crf_2, };</para>

<para>rpc handler array for member RPCs, one handler for each RPC: crt_rpc_cb_t hdlr[] = { my_hdlr_1, my_hdlr_2, };</para>

<para>3) define <link linkend="_structcrt__proto__format">crt_proto_format</link>. struct <link linkend="_structcrt__proto__format">crt_proto_format</link> my_proto_fmt = DEFINE_CRT_PROTO_FMT(&quot;my-proto&quot;, ver, my_crf_array);</para>

<para>which expands to: { .cpf_name = &quot;my-proto&quot;; .cpf_ver = ver; .cpf_crf = { &amp;my_crf_1, &amp;my_crf_2, }; .cpf_hdlr = { my_hdlr_1, my_hdlr_2, }; } Register a protocol. Can be called on a server or a client. Re-registering existing base_opc + version combination will result in -DER_EXIST error being returned to the caller.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>cpf</entry>
                                <entry>
<para>protocol format description. (See <link linkend="_structcrt__proto__format">crt_proto_format</link>)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga57f75b8ebd9c694b07c3aae13b9365ac"/>    <section>
    <title>crt_rank_self_set()</title>
<indexterm><primary>crt_rank_self_set</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rank_self_set</secondary></indexterm>
<para><computeroutput>int crt_rank_self_set (<link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</computeroutput></para>
<para>Set self rank.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Rank to set on self.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac627ee6b4355ab3e277453a60ee0174d"/>    <section>
    <title>crt_rank_state_get()</title>
<indexterm><primary>crt_rank_state_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rank_state_get</secondary></indexterm>
<para><computeroutput>int crt_rank_state_get (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, struct <link linkend="_structswim__member__state">swim_member_state</link> * state)</computeroutput></para>
<para>Get rank SWIM state.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group identifier </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Rank to get SWIM state for </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>state</entry>
                                <entry>
<para>The pointer to store SWIM state</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac61f182a8231c602267eafc5f1fc544f"/>    <section>
    <title>crt_rank_uri_get()</title>
<indexterm><primary>crt_rank_uri_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rank_uri_get</secondary></indexterm>
<para><computeroutput>int crt_rank_uri_get (<link linkend="_structcrt__group">crt_group_t</link> * grp, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, int tag, char ** uri)</computeroutput></para>
<para>Retrieve URI of the requested rank:tag pair.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>grp</entry>
                                <entry>
<para>Group identifier </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Rank to get uri for </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>tag</entry>
                                <entry>
<para>Tag to get uri for </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>uri</entry>
                                <entry>
<para>Returned uri string</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>Returned uri string must be de-allocated by the user at some point once the information is no longer needed.</para>
</note>
<formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaf65c8659f71470294c9d702b78a86097"/>    <section>
    <title>crt_register_event_cb()</title>
<indexterm><primary>crt_register_event_cb</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_register_event_cb</secondary></indexterm>
<para><computeroutput>int crt_register_event_cb (crt_event_cb event_handler, void * arg)</computeroutput></para>
<para>This function registers an event handler for any changes in rank state. There is not any modification about the rank in rank list at this point. The decision about adding or eviction the rank should be made from an information from this handler.</para>

<para>Important: The event should be processed in non-blocking mode because this handler is called under lock which should not be held for long time. Sleeping is also prohibited in this handler! Only quick reaction is expected into this handler before return.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>event_handler</entry>
                                <entry>
<para>event handler to register </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>arg to event_handler</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gabdc6b7a0637bd846543b97a89c3ef080"/>    <section>
    <title>crt_register_progress_cb()</title>
<indexterm><primary>crt_register_progress_cb</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_register_progress_cb</secondary></indexterm>
<para><computeroutput>int crt_register_progress_cb (crt_progress_cb cb, int ctx_idx, void * arg)</computeroutput></para>
<para>Register a callback function which will be called inside <link linkend="_group___c_a_r_t_1gad8e2ce33333c631754c0ea69846851d8">crt_progress()</link> </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga3d7216bc7c9cf01c3ca3ce41a1d52783"/>    <section>
    <title>crt_reply_send()</title>
<indexterm><primary>crt_reply_send</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_reply_send</secondary></indexterm>
<para><computeroutput>int crt_reply_send (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req)</computeroutput></para>
<para>Send an RPC reply. Only to be called on the server side.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error</para>
</formalpara>
<note><title>Note</title>

<para>the crt_rpc_t is exported to user, caller should fill the <link linkend="_structcrt__rpc_1a52b8062393d06dfc797f0d0c88334d5e">crt_rpc_t::cr_output</link> before sending the RPC reply. See <link linkend="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56">crt_req_create</link>. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga3061431302513c2fc6b37b0844eebfb0"/>    <section>
    <title>crt_req_abort()</title>
<indexterm><primary>crt_req_abort</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_abort</secondary></indexterm>
<para><computeroutput>int crt_req_abort (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req)</computeroutput></para>
<para>Abort an RPC request.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error If the RPC has been sent out by crt_req_send, the completion callback will be called with DER_CANCELED set to <link linkend="_structcrt__cb__info_1a768754b09b1a5ec20c1007bdbf5a6d9b">crt_cb_info::cci_rc</link> for a successful aborting. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gac57bcd14a37730e582e8e883cec02a34"/>    <section>
    <title>crt_req_addref()</title>
<indexterm><primary>crt_req_addref</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_addref</secondary></indexterm>
<para><computeroutput>int crt_req_addref (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req)</computeroutput></para>
<para>Add reference of the RPC request.</para>

<para>The typical usage is that user needs to do some asynchronous operations in RPC handler and does not want to block in RPC handler, then it can call this function to hold a reference and return. Later when that asynchronous operation is done, it can release the reference (See <link linkend="_group___c_a_r_t_1gadced98d9b4ff3084a36e4bc1034c28a8">crt_req_decref</link>). CRT internally frees the resource of the RPC request when its reference drops to zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56"/>    <section>
    <title>crt_req_create()</title>
<indexterm><primary>crt_req_create</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_create</secondary></indexterm>
<para><computeroutput>int crt_req_create (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gaf4e3a9a2fe312291fed2125c9971e54d">crt_context_t</link> crt_ctx, <link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> * tgt_ep, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> ** req)</computeroutput></para>
<para>Create an RPC request.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx</entry>
                                <entry>
<para>CRT transport context </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>tgt_ep</entry>
                                <entry>
<para>RPC target endpoint </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>opc</entry>
                                <entry>
<para>RPC request opcode </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to created request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error</para>
</formalpara>
<note><title>Note</title>

<para>the crt_req_create will internally allocate zeroed buffers for input and output parameters (<link linkend="_structcrt__rpc_1a5062624e2652fd18e2007b41993cf2c1">crt_rpc_t::cr_input</link>/cr_output), and set the appropriate size (<link linkend="_structcrt__rpc_1a134c2b1b20464b06cbe2ffc221db00aa">crt_rpc_t::cr_input_size</link>/cr_output_size). User needs not to allocate extra input/output buffers. After the request created, user can directly fill input parameters into <link linkend="_structcrt__rpc_1a5062624e2652fd18e2007b41993cf2c1">crt_rpc_t::cr_input</link> and send the RPC request. When the RPC request finishes executing, CRT internally frees the RPC request and the input/output buffers, so user needs not to call crt_req_destroy (no such function exported) or free the input/output buffers. Similarly, on the RPC server-side, when an RPC request received, CRT internally allocates input/output buffers as well, and internally frees those buffers when the reply is sent out. So in user&apos;s RPC handler it needs not to allocate extra input/output buffers, and also needs not to free input/output buffers in the completion callback of crt_reply_send. tgt_ep may be NULL, in which case <link linkend="_group___c_a_r_t_1ga709043318d2a089cb7f8816afbb08388">crt_req_set_endpoint()</link> must be called for this req before <link linkend="_group___c_a_r_t_1gacfddf38953b180f44f8c4b53b9b57973">crt_req_send()</link>. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gadced98d9b4ff3084a36e4bc1034c28a8"/>    <section>
    <title>crt_req_decref()</title>
<indexterm><primary>crt_req_decref</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_decref</secondary></indexterm>
<para><computeroutput>int crt_req_decref (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req)</computeroutput></para>
<para>Decrease reference of the RPC request. See <link linkend="_group___c_a_r_t_1gac57bcd14a37730e582e8e883cec02a34">crt_req_addref</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga77c47e976ee1a7b340d32c7ad6ee76d3"/>    <section>
    <title>crt_req_dst_rank_get()</title>
<indexterm><primary>crt_req_dst_rank_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_dst_rank_get</secondary></indexterm>
<para><computeroutput>int crt_req_dst_rank_get (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> * rank)</computeroutput></para>
<para>Return destination rank</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>Pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Returned rank</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success or error on failure </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga367a527b8653b020fedfcb6314dd623f"/>    <section>
    <title>crt_req_dst_tag_get()</title>
<indexterm><primary>crt_req_dst_tag_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_dst_tag_get</secondary></indexterm>
<para><computeroutput>int crt_req_dst_tag_get (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, uint32_t * tag)</computeroutput></para>
<para>Return destination tag</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>Pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>tag</entry>
                                <entry>
<para>Returned tag</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success or error on failure </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gacfddf38953b180f44f8c4b53b9b57973"/>    <section>
    <title>crt_req_send()</title>
<indexterm><primary>crt_req_send</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_send</secondary></indexterm>
<para><computeroutput>int crt_req_send (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, <link linkend="_group___c_a_r_t___t_y_p_e_s_1gaec5f68d3f953c61fadbd8a3d1a39c919">crt_cb_t</link> complete_cb, void * arg)</computeroutput></para>
<para>Send an RPC request. In the case of sending failure, CRT internally destroy the request <emphasis>req</emphasis>. In the case of succeed, the <emphasis>req</emphasis> will be internally destroyed when the reply received. User needs not call <link linkend="_group___c_a_r_t_1gadced98d9b4ff3084a36e4bc1034c28a8">crt_req_decref()</link> to destroy the request in either case.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>complete_cb</entry>
                                <entry>
<para>optional completion callback, when it is provided the completion result (success or failure) will be reported by calling it in the context of user&apos;s calling of <link linkend="_group___c_a_r_t_1gad8e2ce33333c631754c0ea69846851d8">crt_progress()</link> or <link linkend="_group___c_a_r_t_1gacfddf38953b180f44f8c4b53b9b57973">crt_req_send()</link>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>arguments for the <emphasis>complete_cb</emphasis> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>if <emphasis>complete_cb</emphasis> provided (non-NULL), always returns zero; otherwise returns DER_SUCCESS on success, negative value if error.</para>
</formalpara>
<note><title>Note</title>

<para>the crt_rpc_t is exported to user, caller should fill the <link linkend="_structcrt__rpc_1a5062624e2652fd18e2007b41993cf2c1">crt_rpc_t::cr_input</link> and before sending the RPC request. See <link linkend="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56">crt_req_create</link>. </para>
</note>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga709043318d2a089cb7f8816afbb08388"/>    <section>
    <title>crt_req_set_endpoint()</title>
<indexterm><primary>crt_req_set_endpoint</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_set_endpoint</secondary></indexterm>
<para><computeroutput>int crt_req_set_endpoint (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, <link linkend="_structcrt__endpoint__t">crt_endpoint_t</link> * tgt_ep)</computeroutput></para>
<para>Set the endpoint for an RPC request.</para>

<para>This is an optional function, it must be called before req_send() if an endpoint was not provided to <link linkend="_group___c_a_r_t_1ga620993c739a94ff703d78ce92a630c56">crt_req_create()</link> however it will fail if there is already an endpoint associated with the request.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>tgt_ep</entry>
                                <entry>
<para>RPC target endpoint</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga5613cf2c576e417c441f66416c0a816d"/>    <section>
    <title>crt_req_set_timeout()</title>
<indexterm><primary>crt_req_set_timeout</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_set_timeout</secondary></indexterm>
<para><computeroutput>int crt_req_set_timeout (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, uint32_t timeout_sec)</computeroutput></para>
<para>Set the timeout value for an RPC request.</para>

<para>It is an optional function. If user does not call it, then will depend on CRT_TIMEOUT ENV as timeout value (see the CRT_TIMEOUT section in README.env). User can also explicitly set one RPC request&apos;s timeout value by calling this function.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>timeout_sec</entry>
                                <entry>
<para>timeout value in seconds. value of zero will be treated as invalid parameter.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga9abd7828b2b604fb68c34f5a4cf9568f"/>    <section>
    <title>crt_req_src_rank_get()</title>
<indexterm><primary>crt_req_src_rank_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_req_src_rank_get</secondary></indexterm>
<para><computeroutput>int crt_req_src_rank_get (<link linkend="_group___c_a_r_t___t_y_p_e_s_1ga22c4380156baf0663b9d7eee1ae65004">crt_rpc_t</link> * req, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> * rank)</computeroutput></para>
<para>Return originator/source rank</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>req</entry>
                                <entry>
<para>Pointer to RPC request </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>rank</entry>
                                <entry>
<para>Returned rank</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success or error on failure </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga13f295ad36554f93feee03e6fd76f789"/>    <section>
    <title>crt_rpc_register()</title>
<indexterm><primary>crt_rpc_register</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rpc_register</secondary></indexterm>
<para><computeroutput>int crt_rpc_register (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, uint32_t flags, struct <link linkend="_structcrt__req__format">crt_req_format</link> * drf)</computeroutput></para>
<para>Dynamically register an RPC with features at client-side.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>opc</entry>
                                <entry>
<para>unique opcode for the RPC </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>feature bits, now only supports CRT_RPC_FEAT_NO_REPLY - disables reply when set, re-enables reply when not set. CRT_RPC_FEAT_NO_TIMEOUT - if it&apos;s set, the elapsed time is reset to 0 on RPC timeout </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>drf</entry>
                                <entry>
<para>pointer to the request format, which describe the request format and provide callback to pack/unpack each items in the request. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga836b16ede44ec086c47c6c0da5f3c67c"/>    <section>
    <title>crt_rpc_srv_register()</title>
<indexterm><primary>crt_rpc_srv_register</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_rpc_srv_register</secondary></indexterm>
<para><computeroutput>int crt_rpc_srv_register (<link linkend="_group___c_a_r_t___t_y_p_e_s_1gae3dde8d6f8414e344befaafc0a3b7d3a">crt_opcode_t</link> opc, uint32_t flags, struct <link linkend="_structcrt__req__format">crt_req_format</link> * crf, <link linkend="_group___c_a_r_t___t_y_p_e_s_1ga163a4cfb0f83c051338adb9a4c326eed">crt_rpc_cb_t</link> rpc_handler)</computeroutput></para>
<para>Dynamically register an RPC with features at server-side.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>opc</entry>
                                <entry>
<para>unique opcode for the RPC </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>feature bits, now only supports <link linkend="_group___c_a_r_t___t_y_p_e_s_1gafea9e969d4960a162107c90d47a50879">CRT_RPC_FEAT_NO_REPLY</link> - disables reply when set, re-enables reply when not set. <link linkend="_group___c_a_r_t___t_y_p_e_s_1gadd33883ad9d938ca364507c9d8b0cec7">CRT_RPC_FEAT_NO_TIMEOUT</link> - if it&apos;s set, the elapsed time is reset to 0 on RPC timeout </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>crf</entry>
                                <entry>
<para>pointer to the request format, which describe the request format and provide callback to pack/unpack each items in the request. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>rpc_handler</entry>
                                <entry>
<para>pointer to RPC handler which will be triggered when RPC request opcode associated with rpc_name is received. Will return -DER_INVAL if pass in NULL rpc_handler.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gad6b2b86a7bc35f74afebcbe1dac4ca87"/>    <section>
    <title>crt_self_uri_get()</title>
<indexterm><primary>crt_self_uri_get</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_self_uri_get</secondary></indexterm>
<para><computeroutput>int crt_self_uri_get (int tag, char ** uri)</computeroutput></para>
<para>Retrieve uri of self for the specified tag. The uri must be freed by the user using D_FREE().</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tag</entry>
                                <entry>
<para>Tag to get uri for </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>uri</entry>
                                <entry>
<para>Returned uri string This is a NULL terminated string of size up to CRT_ADDR_STR_MAX_LEN (including the trailing NULL). Must be freed by the user.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga6c54f3ae1017bc377f5824766c531a01"/>    <section>
    <title>crt_swim_fini()</title>
<indexterm><primary>crt_swim_fini</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_swim_fini</secondary></indexterm>
<para><computeroutput>void crt_swim_fini (void )</computeroutput></para>
<para>Finalize swim. </para>
    </section><anchor xml:id="_group___c_a_r_t_1ga3bab597f86d13a32ae1ed335f3eda7bd"/>    <section>
    <title>crt_swim_init()</title>
<indexterm><primary>crt_swim_init</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_swim_init</secondary></indexterm>
<para><computeroutput>int crt_swim_init (int crt_ctx_idx)</computeroutput></para>
<para>Initialize swim on the specified context index.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>crt_ctx_idx</entry>
                                <entry>
<para>Context index to initialize swim on</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1ga100933432920bca56a6c1f51e9b1d35d"/>    <section>
    <title>crt_unixnsec2hlc()</title>
<indexterm><primary>crt_unixnsec2hlc</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_unixnsec2hlc</secondary></indexterm>
<para><computeroutput>uint64_t crt_unixnsec2hlc (uint64_t unixnsec)</computeroutput></para>
<para>Return the HLC timestamp of unixnsec in hlc.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>unixnsec</entry>
                                <entry>
<para>Unix nanosecond timestamp</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>HLC timestamp on success, or 0 when it is impossible to convert unixnsec to hlc </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gae333d240708c08ccd38ecf9df8449c35"/>    <section>
    <title>crt_unregister_event_cb()</title>
<indexterm><primary>crt_unregister_event_cb</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_unregister_event_cb</secondary></indexterm>
<para><computeroutput>int crt_unregister_event_cb (crt_event_cb event_handler, void * arg)</computeroutput></para>
<para>Unregister an event handler. The pair of arguments (event_handler and arg) should be same as the ones provided during registration.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>event_handler</entry>
                                <entry>
<para>event handler to register </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>arg to event_handler</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___c_a_r_t_1gaa63036cdba68a597084fe7a11da4aea7"/>    <section>
    <title>crt_unregister_progress_cb()</title>
<indexterm><primary>crt_unregister_progress_cb</primary><secondary>CART API</secondary></indexterm>
<indexterm><primary>CART API</primary><secondary>crt_unregister_progress_cb</secondary></indexterm>
<para><computeroutput>int crt_unregister_progress_cb (crt_progress_cb cb, int ctx_idx, void * arg)</computeroutput></para>
<para>Unregister a callback function. The pair of arguments (ctx_idx and arg) should be same as the ones provided during registration. </para>
</section>
</section>
</section>
