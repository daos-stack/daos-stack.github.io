<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structd__hash__table__ops__t">
<title>d_hash_table_ops_t Struct Reference</title>
<indexterm><primary>d_hash_table_ops_t</primary></indexterm>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para>bool(* <link linkend="_structd__hash__table__ops__t_1a2bfceb073124e85834f6d7d321374e73">hop_key_cmp</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>void(* <link linkend="_structd__hash__table__ops__t_1a99899bd5ae3f15d5d8eeddbd2dc7bb9d">hop_key_init</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</para>
</listitem>
            <listitem><para>uint32_t(* <link linkend="_structd__hash__table__ops__t_1aa0ac76c2589bd567d5feae3af00c35fc">hop_key_hash</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>uint32_t(* <link linkend="_structd__hash__table__ops__t_1a005d4ff55059c51cefe8175d04838b3c">hop_rec_hash</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>void(* <link linkend="_structd__hash__table__ops__t_1a961ee23e4fae5fbf5e8ff6f5eb26c0f4">hop_rec_addref</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>bool(* <link linkend="_structd__hash__table__ops__t_1ae4ba445b2785280addc71ce16b6cc401">hop_rec_decref</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>int(* <link linkend="_structd__hash__table__ops__t_1a675abc269f5307f7c5b00c67ba02329d">hop_rec_ndecref</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, int count)</para>
</listitem>
            <listitem><para>void(* <link linkend="_structd__hash__table__ops__t_1aa90a00c00c5c97e9724ddbaf09812c89">hop_rec_free</link> )(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line 41 of file hash.h.</para>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_structd__hash__table__ops__t_1a2bfceb073124e85834f6d7d321374e73"/>    <section>
    <title>hop_key_cmp</title>
<indexterm><primary>hop_key_cmp</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_key_cmp</secondary></indexterm>
<para><computeroutput>bool(* hop_key_cmp(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, const void *key, unsigned int ksize)</computeroutput></para>
<para>Compare <computeroutput>key</computeroutput> with the key of the record <computeroutput>link</computeroutput> This member function is mandatory.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>Key to compare </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>The key of the record equals to <computeroutput>key</computeroutput>. </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>No match </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 56 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1aa0ac76c2589bd567d5feae3af00c35fc"/>    <section>
    <title>hop_key_hash</title>
<indexterm><primary>hop_key_hash</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_key_hash</secondary></indexterm>
<para><computeroutput>uint32_t(* hop_key_hash(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</computeroutput></para>
<para>Optional, hash <computeroutput>key</computeroutput> to a 32-bit value. DJB2 hash is used when this function is abscent.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>Key to hash </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Key size</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>hash of the key </para>
</formalpara>
</para>
<para>
Definition at line 80 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1a99899bd5ae3f15d5d8eeddbd2dc7bb9d"/>    <section>
    <title>hop_key_init</title>
<indexterm><primary>hop_key_init</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_key_init</secondary></indexterm>
<para><computeroutput>void(* hop_key_init(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</computeroutput></para>
<para>Optional, generate a key for the record <computeroutput>link</computeroutput>.</para>

<para>This function is called before inserting a record w/o key into a hash table.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record to generate key. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>Input arguments for the key generating. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 68 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1a961ee23e4fae5fbf5e8ff6f5eb26c0f4"/>    <section>
    <title>hop_rec_addref</title>
<indexterm><primary>hop_rec_addref</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_rec_addref</secondary></indexterm>
<para><computeroutput>void(* hop_rec_addref(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</computeroutput></para>
<para>Optional, increase refcount on the record <computeroutput>link</computeroutput> If this function is provided, it will be called for successfully inserted record.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The record being referenced. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 101 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1ae4ba445b2785280addc71ce16b6cc401"/>    <section>
    <title>hop_rec_decref</title>
<indexterm><primary>hop_rec_decref</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_rec_decref</secondary></indexterm>
<para><computeroutput>bool(* hop_rec_decref(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</computeroutput></para>
<para>Optional, release refcount on the record <computeroutput>link</computeroutput> </para>

<para>If this function is provided, it is called while deleting a record from the hash table.</para>

<para>If <link linkend="_structd__hash__table__ops__t_1aa90a00c00c5c97e9724ddbaf09812c89">hop_rec_free()</link> is provided, this function can return true when the refcount reaches zero, in this case, hop_free() will be called. If the record should not be automatically freed by the hash table despite of refcount, then this function should never return true.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link being released.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>Do nothing </para>
</entry>
                            </row>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Only if refcount is zero and the hash item can be freed. If this function can return true, then <link linkend="_structd__hash__table__ops__t_1aa90a00c00c5c97e9724ddbaf09812c89">hop_rec_free()</link> should be defined. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 121 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1aa90a00c00c5c97e9724ddbaf09812c89"/>    <section>
    <title>hop_rec_free</title>
<indexterm><primary>hop_rec_free</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_rec_free</secondary></indexterm>
<para><computeroutput>void(* hop_rec_free(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</computeroutput></para>
<para>Optional, free the record <computeroutput>link</computeroutput> It is called if hop_decref() returns zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The record being freed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 150 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1a005d4ff55059c51cefe8175d04838b3c"/>    <section>
    <title>hop_rec_hash</title>
<indexterm><primary>hop_rec_hash</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_rec_hash</secondary></indexterm>
<para><computeroutput>uint32_t(* hop_rec_hash(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</computeroutput></para>
<para>Mandatory for per bucket locking. Get the hash of recorded key. It should return the same hash as <link linkend="_structd__hash__table__ops__t_1aa0ac76c2589bd567d5feae3af00c35fc">hop_key_hash()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>the link to record.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>hash of recorded key </para>
</formalpara>
</para>
<para>
Definition at line 91 of file hash.h.</para>
    </section><anchor xml:id="_structd__hash__table__ops__t_1a675abc269f5307f7c5b00c67ba02329d"/>    <section>
    <title>hop_rec_ndecref</title>
<indexterm><primary>hop_rec_ndecref</primary><secondary>d_hash_table_ops_t</secondary></indexterm>
<indexterm><primary>d_hash_table_ops_t</primary><secondary>hop_rec_ndecref</secondary></indexterm>
<para><computeroutput>int(* hop_rec_ndecref(struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, int count)</computeroutput></para>
<para>Optional, release multiple refcount on the record <computeroutput>link</computeroutput> </para>

<para>This function expands on <link linkend="_structd__hash__table__ops__t_1ae4ba445b2785280addc71ce16b6cc401">hop_rec_decref()</link> so the notes from that function apply here. If <link linkend="_structd__hash__table__ops__t_1ae4ba445b2785280addc71ce16b6cc401">hop_rec_decref()</link> is not provided then <link linkend="_structd__hash__table__ops__t_1a675abc269f5307f7c5b00c67ba02329d">hop_rec_ndecref()</link> shouldn&apos;t be either.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link being released. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>The number of refcounts to be dropped.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>
<para>Do nothing </para>
</entry>
                            </row>
                            <row>
                                <entry>1</entry>
                                <entry>
<para>Only if refcount is zero and the hash item can be freed. If this function can return true, then <link linkend="_structd__hash__table__ops__t_1aa90a00c00c5c97e9724ddbaf09812c89">hop_rec_free()</link> should be defined. negative value on error. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 140 of file hash.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
src/include/gurt/<link linkend="_hash_8h">hash.h</link></section>
</section>
