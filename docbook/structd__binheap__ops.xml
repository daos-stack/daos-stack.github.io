<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structd__binheap__ops">
<title>d_binheap_ops Struct Reference</title>
<indexterm><primary>d_binheap_ops</primary></indexterm>
<para>
<computeroutput>#include &lt;heap.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Data Fields    </title>
        <itemizedlist>
            <listitem><para>int(* <link linkend="_structd__binheap__ops_1ae84efa2e339d59c778a34627a5baa5cc">hop_enter</link> )(struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</para>
</listitem>
            <listitem><para>int(* <link linkend="_structd__binheap__ops_1a8fbb093904a48a5dae0bdb031d1ec5b2">hop_exit</link> )(struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</para>
</listitem>
            <listitem><para>bool(* <link linkend="_structd__binheap__ops_1ae85da870159288880dc5d0a3046a6419">hop_compare</link> )(struct <link linkend="_structd__binheap__node">d_binheap_node</link> *a, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *b)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Binary heap operations. </para>
<para>
Definition at line 92 of file heap.h.</para>
</section>
<section>
<title>Field Documentation</title>
<anchor xml:id="_structd__binheap__ops_1ae85da870159288880dc5d0a3046a6419"/>    <section>
    <title>hop_compare</title>
<indexterm><primary>hop_compare</primary><secondary>d_binheap_ops</secondary></indexterm>
<indexterm><primary>d_binheap_ops</primary><secondary>hop_compare</secondary></indexterm>
<para><computeroutput>bool(* hop_compare(struct <link linkend="_structd__binheap__node">d_binheap_node</link> *a, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *b)</computeroutput></para>
<para>A binary predicate which is called during internal heap sorting, and used in order to determine the relevant ordering of two heap nodes.</para>

<para>Implementing this operation is mandatory.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>a</entry>
                                <entry>
<para>The first heap node </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>b</entry>
                                <entry>
<para>The second heap node</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if node a &lt; node b, false if node a &gt; node b.</para>
</formalpara>
<formalpara><title>See also</title>

<para>d_binheap_bubble() and d_biheap_sink() </para>
</formalpara>
</para>
<para>
Definition at line 131 of file heap.h.</para>
    </section><anchor xml:id="_structd__binheap__ops_1ae84efa2e339d59c778a34627a5baa5cc"/>    <section>
    <title>hop_enter</title>
<indexterm><primary>hop_enter</primary><secondary>d_binheap_ops</secondary></indexterm>
<indexterm><primary>d_binheap_ops</primary><secondary>hop_enter</secondary></indexterm>
<para><computeroutput>int(* hop_enter(struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</computeroutput></para>
<para>Called right before inserting a node into the binary heap.</para>

<para>Implementing this operation is optional.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The heap </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>e</entry>
                                <entry>
<para>The node</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error </para>
</formalpara>
</para>
<para>
Definition at line 103 of file heap.h.</para>
    </section><anchor xml:id="_structd__binheap__ops_1a8fbb093904a48a5dae0bdb031d1ec5b2"/>    <section>
    <title>hop_exit</title>
<indexterm><primary>hop_exit</primary><secondary>d_binheap_ops</secondary></indexterm>
<indexterm><primary>d_binheap_ops</primary><secondary>hop_exit</secondary></indexterm>
<para><computeroutput>int(* hop_exit(struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</computeroutput></para>
<para>Called right after removing a node from the binary heap.</para>

<para>Implementing this operation is optional.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The heap </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>e</entry>
                                <entry>
<para>The node</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error </para>
</formalpara>
</para>
<para>
Definition at line 115 of file heap.h.</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
src/include/gurt/<link linkend="_heap_8h">heap.h</link></section>
</section>
