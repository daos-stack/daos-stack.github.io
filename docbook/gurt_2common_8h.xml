<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_gurt_2common_8h">
<title>src/include/gurt/common.h File Reference</title>
<indexterm><primary>src/include/gurt/common.h</primary></indexterm>
<programlisting>#include &lt;uuid/uuid.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;time.h&gt;
#include &lt;limits.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;
#include &lt;byteswap.h&gt;
#include &lt;daos_errno.h&gt;
#include &lt;gurt/types.h&gt;
#include &lt;gurt/debug.h&gt;
#include &lt;gurt/fault_inject.h&gt;
</programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structd__backoff__seq">d_backoff_seq</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <emphasis role="strong">likely</emphasis>(x)   __builtin_expect((x), 1)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">unlikely</emphasis>(x)   __builtin_expect((x), 0)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_BIT_IS_SET</emphasis>(val,  bit)   (((val) &amp; bit) ? 1 : 0)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga38e9033a8e62c5dc166632311e4e32a4">_gurt_gettime</link>(ts)   clock_gettime(CLOCK_MONOTONIC, ts)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CHECK_ALLOC</emphasis>(func,  cond,  ptr,  name,  size,  count,  cname,  on_error)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALLOC_CORE</emphasis>(ptr,  size,  count)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_STRNDUP</emphasis>(ptr,  s,  n)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ASPRINTF</emphasis>(ptr, ...)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_REALPATH</emphasis>(ptr,  path)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_REALLOC_COMMON</emphasis>(newptr,  oldptr,  size,  cnt)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_REALLOC</emphasis>(newptr,  oldptr,  size)   D_REALLOC_COMMON(newptr, oldptr, size, 1)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_REALLOC_ARRAY</emphasis>(newptr,  oldptr,  count)   D_REALLOC_COMMON(newptr, oldptr, sizeof(*(oldptr)), count)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_FREE</emphasis>(ptr)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALLOC</emphasis>(ptr,  size)   D_ALLOC_CORE(ptr, size, 1)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALLOC_PTR</emphasis>(ptr)   D_ALLOC(ptr, sizeof(*ptr))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALLOC_ARRAY</emphasis>(ptr,  count)   D_ALLOC_CORE(ptr, sizeof(*ptr), count)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_FREE_PTR</emphasis>(ptr)   D_FREE(ptr)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_GOTO</emphasis>(label,  rc)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_FPRINTF</emphasis>(...)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">__D_PTHREAD</emphasis>(fn,  x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">__D_PTHREAD_INIT</emphasis>(fn,  x,  y)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SPIN_LOCK</emphasis>(x)   __D_PTHREAD(pthread_spin_lock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SPIN_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_spin_unlock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_MUTEX_LOCK</emphasis>(x)   __D_PTHREAD(pthread_mutex_lock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_MUTEX_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_mutex_unlock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_RWLOCK_RDLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_rdlock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_RWLOCK_WRLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_wrlock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_RWLOCK_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_unlock, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_MUTEX_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_mutex_destroy, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SPIN_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_spin_destroy, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_RWLOCK_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_rwlock_destroy, x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_MUTEX_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_mutex_init, x, y)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SPIN_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_spin_init, x, y)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_RWLOCK_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_rwlock_init, x, y)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">DGOLDEN_RATIO_PRIME_64</emphasis>   0xcbf29ce484222325ULL</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">DGOLDEN_RATIO_PRIME_32</emphasis>   0x9e370001UL</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">LOWEST_BIT_SET</emphasis>(x)   ((x) &amp; ~((x) - 1))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">container_of</emphasis>(ptr,  type,  member)   ((type *)((char *)(ptr)-(char *)(&amp;((type *)0)-&gt;member)))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">offsetof</emphasis>(typ,  memb)   ((long)((char *)&amp;(((typ *)0)-&gt;memb)))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALIGNUP</emphasis>(x,  a)   (((x) + (a - 1)) &amp; ~(a - 1))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">ARRAY_SIZE</emphasis>(arr)   (sizeof(arr) / sizeof((arr)[0]))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">MIN</emphasis>(a,  b)   (((a) &lt; (b)) ? (a) : (b))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">MAX</emphasis>(a,  b)   (((a) &gt; (b)) ? (a) : (b))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">min</emphasis>(x,  y)   ((x) &lt; (y) ? (x) : (y))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">max</emphasis>(x,  y)   ((x) &gt; (y) ? (x) : (y))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">min_t</emphasis>(type,  x,  y)   ({ type __x = (x); type __y = (y); __x &lt; __y ? __x : __y; })</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">max_t</emphasis>(type,  x,  y)   ({ type __x = (x); type __y = (y); __x &gt; __y ? __x : __y; })</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP16</emphasis>(x)   bswap_16(x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP32</emphasis>(x)   bswap_32(x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP64</emphasis>(x)   bswap_64(x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP16S</emphasis>(x)   do { *(x) = D_SWAP16(*(x)); } while (0)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP32S</emphasis>(x)   do { *(x) = D_SWAP32(*(x)); } while (0)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_SWAP64S</emphasis>(x)   do { *(x) = D_SWAP64(*(x)); } while (0)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">NSEC_PER_SEC</emphasis>   1000000000</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">NSEC_PER_MSEC</emphasis>   1000000</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">NSEC_PER_USEC</emphasis>   1000</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <emphasis role="strong">d_free</emphasis> (void *)</para>
</listitem>
            <listitem><para>void * <emphasis role="strong">d_calloc</emphasis> (size_t, size_t)</para>
</listitem>
            <listitem><para>void * <emphasis role="strong">d_realloc</emphasis> (void *, size_t)</para>
</listitem>
            <listitem><para>uint64_t <emphasis role="strong">d_hash_mix64</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para>uint32_t <emphasis role="strong">d_hash_mix96</emphasis> (uint32_t a, uint32_t b, uint32_t c)</para>
</listitem>
            <listitem><para>unsigned int <link linkend="_group___g_u_r_t_1gad7d4719a0c239e232241d3b8c68142f6">d_hash_srch_u64</link> (uint64_t *hashes, unsigned int nhashes, uint64_t value)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_group___g_u_r_t_1ga62656b843dd5da76cef0519aa1f29a73">d_hash_string_u32</link> (const char *string, unsigned int len)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___g_u_r_t_1ga2c7cc6156cd16166c03c38cfa5cddc96">d_hash_murmur64</link> (const unsigned char *key, unsigned int key_len, unsigned int seed)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_dup</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> **dst, const <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_dup_sort_uniq</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> **dst, const <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_rank_list_filter</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *src_set, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *dst_set, bool exclude)</para>
</listitem>
            <listitem><para><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">d_rank_list_alloc</emphasis> (uint32_t size)</para>
</listitem>
            <listitem><para><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">d_rank_list_realloc</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *ptr, uint32_t size)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_rank_list_free</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_copy</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *dst, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_rank_list_sort</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_rank_list_find</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, int *idx)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_del</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_rank_list_identical</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list1, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list2)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_rank_in_rank_list</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_idx_in_rank_list</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, uint32_t *idx)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_append</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_rank_list_dump</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, d_string_t name, int name_len)</para>
</listitem>
            <listitem><para><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">uint32_array_to_rank_list</emphasis> (uint32_t *ints, size_t len)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">rank_list_to_uint32_array</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rl, uint32_t **ints, size_t *len)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_getenv_bool</emphasis> (const char *env, bool *bool_val)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_getenv_int</emphasis> (const char *env, unsigned int *int_val)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_write_string_buffer</emphasis> (struct <link linkend="_structd__string__buffer__t">d_string_buffer_t</link> *buf, const char *fmt,...)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_free_string</emphasis> (struct <link linkend="_structd__string__buffer__t">d_string_buffer_t</link> *buf)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_backoff_seq_init</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq, uint8_t nzeros, uint16_t factor, uint32_t next, uint32_t max)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_backoff_seq_fini</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq)</para>
</listitem>
            <listitem><para>uint32_t <emphasis role="strong">d_backoff_seq_next</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>GURT Common functions and types. </para>
</section>
</section>
