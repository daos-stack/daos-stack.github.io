<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_hash_8h">
<title>src/include/gurt/hash.h File Reference</title>
<indexterm><primary>src/include/gurt/hash.h</primary></indexterm>
<programlisting>#include &lt;inttypes.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;gurt/list.h&gt;
#include &lt;gurt/types.h&gt;
</programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link></para>
</listitem>
            <listitem><para>union <link linkend="_uniond__hash__lock">d_hash_lock</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hash__bucket">d_hash_bucket</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hash__table">d_hash_table</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlink__ops">d_hlink_ops</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__rlink">d_rlink</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlink">d_hlink</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__ulink__ops">d_ulink_ops</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__ulink">d_ulink</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_hash_8h_1aa9281d1244bcadfdf769beb8cc2d6cd2">D_HASH_DEBUG</link>   0</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_HHASH_BITS</emphasis>   16</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_HTYPE_BITS</emphasis>   4</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_HTYPE_MASK</emphasis>   ((1ULL &lt;&lt; D_HTYPE_BITS) - 1)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef int(* <emphasis role="strong">d_hash_traverse_cb_t</emphasis>) (<link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876">d_hash_feats</link> { 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a47b20cf122098c2583267127b97a295a">D_HASH_FT_NOLOCK</link> = (1 &lt;&lt; 0), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876ab86feeeb48eb6d130297990ffb355516">D_HASH_FT_MUTEX</link> = (1 &lt;&lt; 1), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a49eae38cc1036e8106c1feaf5f8b9ca3">D_HASH_FT_RWLOCK</link> = (1 &lt;&lt; 2), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a2ce48a3b10dfdf66cf1db7f056f980e2">D_HASH_FT_EPHEMERAL</link> = (1 &lt;&lt; 3), 

<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876abcc4a953dd274b6b70b6b603a2ba4a7e">D_HASH_FT_LRU</link> = (1 &lt;&lt; 4), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a7087bc2f5ca1c9f644e44fb5fb33ba3e">D_HASH_FT_GLOCK</link> = (1 &lt;&lt; 15)
 }</para>
</listitem>
            <listitem><para>enum { <link linkend="_group___g_u_r_t_1gga634f9f55e799f3052a34590f08100017ad1a711aec196affdd15f9bdaf32e6445">D_HTYPE_PTR</link> = 0
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaab6c454523831e5f035a7bb9f4fe2b79">d_hash_table_create</link> (uint32_t feats, uint32_t bits, void *priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> *hops, struct <link linkend="_structd__hash__table">d_hash_table</link> **htable_pp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa094440248a5ffcc0b0f56bc39a473b4">d_hash_table_create_inplace</link> (uint32_t feats, uint32_t bits, void *priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> *hops, struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga662ba75358be3d41a640801f5545b235">d_hash_table_traverse</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, d_hash_traverse_cb_t cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga5f7c7ef5790fb0f7db96e2d91e032282">d_hash_table_destroy</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, bool force)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga4e7e2ce7ed7a784d17893b8a1d23a4d1">d_hash_table_destroy_inplace</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, bool force)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1ga10b7638a5bc7e4b293948fa75a2a66ef">d_hash_rec_find</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1ga7abb607ec215e45af17c503c56cebbb7">d_hash_rec_find_insert</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gafc850c30b7d6a6afbd7b9f78024ae3bf">d_hash_rec_insert</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> *link, bool exclusive)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga5d57b45297cc1beb4c4f896162bbb9ec">d_hash_rec_insert_anonym</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga8915efdfb9ad0e5d84fd46a8667330d6">d_hash_rec_delete</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1gafa896651ee1a40232db21c4dd51d71a7">d_hash_rec_delete_at</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga344ab0c00627d0bad617425f470621af">d_hash_rec_evict</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga0992c37d11e83dcc566529b54b38e8f5">d_hash_rec_evict_at</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga2570879d5c475f6d712867fc4c4968ec">d_hash_rec_addref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga77c35584d9b0de656aac8577718c55a0">d_hash_rec_decref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gad0fadce9a2007688a5458aa3df935d86">d_hash_rec_ndecref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, int count, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1gab86b9734aa3124fd5827f01471af325c">d_hash_rec_unlinked</link> (<link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1gaa1681045f51ad2363a2fe385ebf0dcdc">d_hash_rec_first</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1gaf04c1d22e7af22d809a5ea4b011239d7">d_hash_table_debug</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa6586c2648a421f7a1ac3d381bdf104e">d_hhash_create</link> (uint32_t feats, uint32_t bits, struct d_hhash **hhash)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_hhash_destroy</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_hhash_hlink_init</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink, struct <link linkend="_structd__hlink__ops">d_hlink_ops</link> *hl_ops)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga42d2057df12dfdb86b184fb078f8c638">d_hhash_link_insert</link> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink, int type)</para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlink">d_hlink</link> * <emphasis role="strong">d_hhash_link_lookup</emphasis> (struct d_hhash *hhash, uint64_t key)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_hhash_link_getref</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_hhash_link_putref</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_hhash_link_delete</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_hhash_link_empty</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_hhash_link_key</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink, uint64_t *key)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_hhash_key_type</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_hhash_key_isptr</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_hhash_set_ptrtype</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_hhash_is_ptrtype</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_uhash_create</emphasis> (uint32_t feats, uint32_t bits, struct <link linkend="_structd__hash__table">d_hash_table</link> **htable)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_uhash_destroy</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_uhash_ulink_init</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink, struct <link linkend="_structd__ulink__ops">d_ulink_ops</link> *ul_ops)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_uhash_link_empty</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>bool <emphasis role="strong">d_uhash_link_last_ref</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_uhash_link_addref</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_uhash_link_putref</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>void <emphasis role="strong">d_uhash_link_delete</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>int <emphasis role="strong">d_uhash_link_insert</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__uuid">d_uuid</link> *key, void *cmp_args, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para>struct <link linkend="_structd__ulink">d_ulink</link> * <emphasis role="strong">d_uhash_link_lookup</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__uuid">d_uuid</link> *key, void *cmp_args)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Generic Hash Table APIs &amp; data structures </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_hash_8h_1aa9281d1244bcadfdf769beb8cc2d6cd2"/>    <section>
    <title>D_HASH_DEBUG</title>
<indexterm><primary>D_HASH_DEBUG</primary><secondary>hash.h</secondary></indexterm>
<indexterm><primary>hash.h</primary><secondary>D_HASH_DEBUG</secondary></indexterm>
<para><computeroutput>#define D_HASH_DEBUG   0</computeroutput></para>
<para>Hash table keeps and prints extra debugging information </para>
<para>
Definition at line 26 of file hash.h.</para>
</section>
</section>
</section>
