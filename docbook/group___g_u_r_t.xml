<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___g_u_r_t">
<title>GURT</title>
<indexterm><primary>GURT</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structd__backoff__seq">d_backoff_seq</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link></para>
</listitem>
            <listitem><para>union <link linkend="_uniond__hash__lock">d_hash_lock</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hash__bucket">d_hash_bucket</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hash__table">d_hash_table</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlink__ops">d_hlink_ops</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__rlink">d_rlink</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlink">d_hlink</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__ulink__ops">d_ulink_ops</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__ulink">d_ulink</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__binheap__node">d_binheap_node</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__binheap__ops">d_binheap_ops</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__binheap">d_binheap</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__list__head">d_list_head</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlist__node">d_hlist_node</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlist__head">d_hlist_head</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__uuid">d_uuid</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__iov__t">d_iov_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__rank__list__t">d_rank_list_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__sg__list__t">d_sg_list_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__string__buffer__t">d_string_buffer_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaa9c72a58ad27ce61fffe0511cc0787ec"/>#define <emphasis role="strong">D_FOREACH_GURT_ERR</emphasis>(ACTION)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gadac50d4f561897772d3f415279ccfe15">D_FOREACH_DAOS_ERR</link>(ACTION)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gab15ab808cd23b4ed3e602fd1deb6840e">D_FOREACH_ERR_RANGE</link>(ACTION)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gae250daede0c57da3d6f031b0ea7ab384"/>#define <emphasis role="strong">D_DEFINE_ERRNO</emphasis>(name,  value,  desc)   name = value,</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab7a69ecbcf8e6fe84ef83401c747578c"/>#define <emphasis role="strong">D_DEFINE_ERRSTR</emphasis>(name,  value,  desc)   #name,</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga040a6cd98f0157db825f0fa6d47ab5c6"/>#define <emphasis role="strong">D_DEFINE_ERRDESC</emphasis>(name,  value,  desc)   #desc,</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_DEFINE_RANGE_ERRNO</emphasis>(name,  base)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_DEFINE_RANGE_ERRSTR</emphasis>(name)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga7cf8f4650b80bb82b7665d0075e6ceea">D_REGISTER_RANGE</link>(name)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga76611e335e067a33ca0f29c44d23edb5">D_DEREGISTER_RANGE</link>(name)   <link linkend="_group___g_u_r_t_1ga964fe46c46a4e09346312bb1d1686ed2">d_errno_deregister_range</link>(DER_ERR_##name##_BASE)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaa97303543fb142b9ce6c96855d214ded"/>#define <emphasis role="strong">DER_SUCCESS</emphasis>   0</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1e8878c22df202d90ffc25bf825488a2"/>#define <emphasis role="strong">DER_UNKNOWN</emphasis>   (DER_ERR_GURT_BASE + 500000)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga217a0bd562b98ae8c2ffce44935351e1"/>#define <emphasis role="strong">likely</emphasis>(x)   __builtin_expect((x), 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac6c45889010c1bd68631771b64f18101"/>#define <emphasis role="strong">unlikely</emphasis>(x)   __builtin_expect((x), 0)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga99a2f1de913c013a61e2881d42f01b13"/>#define <emphasis role="strong">D_BIT_IS_SET</emphasis>(val,  bit)   (((val) &amp; bit) ? 1 : 0)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga38e9033a8e62c5dc166632311e4e32a4">_gurt_gettime</link>(ts)   clock_gettime(CLOCK_MONOTONIC, ts)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CHECK_ALLOC</emphasis>(func,  cond,  ptr,  name,  size,  count,  cname,  on_error)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ALLOC_CORE</emphasis>(ptr,  size,  count)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_STRNDUP</emphasis>(ptr,  s,  n)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_ASPRINTF</emphasis>(ptr, ...)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_REALPATH</emphasis>(ptr,  path)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga71818b2b84e156bc7c5e55580bd16ceb"/>#define <emphasis role="strong">D_REALLOC_COMMON</emphasis>(newptr,  oldptr,  size,  cnt)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gae662153bcce83af7ff622b8a0a47e590"/>#define <emphasis role="strong">D_REALLOC</emphasis>(newptr,  oldptr,  size)   D_REALLOC_COMMON(newptr, oldptr, size, 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga0074421f26beab9b7b4a35b13f946f24"/>#define <emphasis role="strong">D_REALLOC_ARRAY</emphasis>(newptr,  oldptr,  count)   D_REALLOC_COMMON(newptr, oldptr, sizeof(*(oldptr)), count)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_FREE</emphasis>(ptr)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaa7ddcb52797279629223e78724073308"/>#define <emphasis role="strong">D_ALLOC</emphasis>(ptr,  size)   D_ALLOC_CORE(ptr, size, 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaab145c431c59c623fa2ac56fb41616f0"/>#define <emphasis role="strong">D_ALLOC_PTR</emphasis>(ptr)   D_ALLOC(ptr, sizeof(*ptr))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1245a3cb89ffc23ab496826ca3c42d82"/>#define <emphasis role="strong">D_ALLOC_ARRAY</emphasis>(ptr,  count)   D_ALLOC_CORE(ptr, sizeof(*ptr), count)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga346a650ce0326a57afe3c28206026dcb"/>#define <emphasis role="strong">D_FREE_PTR</emphasis>(ptr)   D_FREE(ptr)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_GOTO</emphasis>(label,  rc)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_FPRINTF</emphasis>(...)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">__D_PTHREAD</emphasis>(fn,  x)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">__D_PTHREAD_INIT</emphasis>(fn,  x,  y)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga780bc929768bb0b5c41adc98f2217c4b"/>#define <emphasis role="strong">D_SPIN_LOCK</emphasis>(x)   __D_PTHREAD(pthread_spin_lock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gadfcee37bb6aaaa830db78c8ec4a9029f"/>#define <emphasis role="strong">D_SPIN_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_spin_unlock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga44643a94ef4d936159654875da6edbee"/>#define <emphasis role="strong">D_MUTEX_LOCK</emphasis>(x)   __D_PTHREAD(pthread_mutex_lock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac535674766936dd8f998e74db0c5ec82"/>#define <emphasis role="strong">D_MUTEX_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_mutex_unlock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad78fb0fc854195e41828a9e39f4cff30"/>#define <emphasis role="strong">D_RWLOCK_RDLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_rdlock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2338e7a2fadc817d9ef7df86e867da02"/>#define <emphasis role="strong">D_RWLOCK_WRLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_wrlock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gabcd76b6ff30ca7272cddc8bb43e13351"/>#define <emphasis role="strong">D_RWLOCK_UNLOCK</emphasis>(x)   __D_PTHREAD(pthread_rwlock_unlock, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1fee0ba99c1d271ab48fa159eb9804fb"/>#define <emphasis role="strong">D_MUTEX_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_mutex_destroy, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga83bc2094ddcc6347d47485d1aabfba77"/>#define <emphasis role="strong">D_SPIN_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_spin_destroy, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga053f9f566104434436b26a6d2258c829"/>#define <emphasis role="strong">D_RWLOCK_DESTROY</emphasis>(x)   __D_PTHREAD(pthread_rwlock_destroy, x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gace6176c46f56193527dcb856df15a47d"/>#define <emphasis role="strong">D_MUTEX_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_mutex_init, x, y)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga67689f8a1c1caeb584297f62d5605d0b"/>#define <emphasis role="strong">D_SPIN_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_spin_init, x, y)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga091fcff00253ddd61ae7b26bd9c21acb"/>#define <emphasis role="strong">D_RWLOCK_INIT</emphasis>(x,  y)   __D_PTHREAD_INIT(pthread_rwlock_init, x, y)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaae71f5301fa1de72930c15015edf9d01"/>#define <emphasis role="strong">DGOLDEN_RATIO_PRIME_64</emphasis>   0xcbf29ce484222325ULL</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga02c50947c9f01796f41b2f1d662168d0"/>#define <emphasis role="strong">DGOLDEN_RATIO_PRIME_32</emphasis>   0x9e370001UL</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2e6c775aaa57135ce95be1ea8ad44e76"/>#define <emphasis role="strong">LOWEST_BIT_SET</emphasis>(x)   ((x) &amp; ~((x) - 1))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaf8c317a42292b61c93aae91e59118a46"/>#define <emphasis role="strong">container_of</emphasis>(ptr,  type,  member)   ((type *)((char *)(ptr)-(char *)(&amp;((type *)0)-&gt;member)))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad4a7496cd704df3829c87864e7dbd703"/>#define <emphasis role="strong">offsetof</emphasis>(typ,  memb)   ((long)((char *)&amp;(((typ *)0)-&gt;memb)))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga19afa10dfb7e310f34d8948974e4fced"/>#define <emphasis role="strong">D_ALIGNUP</emphasis>(x,  a)   (((x) + (a - 1)) &amp; ~(a - 1))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3c7c6a69f690fc8d2abf0e385280a532"/>#define <emphasis role="strong">ARRAY_SIZE</emphasis>(arr)   (sizeof(arr) / sizeof((arr)[0]))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3acffbd305ee72dcd4593c0d8af64a4f"/>#define <emphasis role="strong">MIN</emphasis>(a,  b)   (((a) &lt; (b)) ? (a) : (b))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gafa99ec4acc4ecb2dc3c2d05da15d0e3f"/>#define <emphasis role="strong">MAX</emphasis>(a,  b)   (((a) &gt; (b)) ? (a) : (b))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gabb702d8b501669a23aa0ab3b281b9384"/>#define <emphasis role="strong">min</emphasis>(x,  y)   ((x) &lt; (y) ? (x) : (y))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac39d9cef6a5e030ba8d9e11121054268"/>#define <emphasis role="strong">max</emphasis>(x,  y)   ((x) &gt; (y) ? (x) : (y))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga571fb08c9d47c410a616edec580ff121"/>#define <emphasis role="strong">min_t</emphasis>(type,  x,  y)   ({ type __x = (x); type __y = (y); __x &lt; __y ? __x : __y; })</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga758ef3735431cd90e8160bdc3619512b"/>#define <emphasis role="strong">max_t</emphasis>(type,  x,  y)   ({ type __x = (x); type __y = (y); __x &gt; __y ? __x : __y; })</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaa2af5b808247fe83b80d43e50534a13a"/>#define <emphasis role="strong">D_SWAP16</emphasis>(x)   bswap_16(x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga290af48c3956e219665af72cf3d8bdb8"/>#define <emphasis role="strong">D_SWAP32</emphasis>(x)   bswap_32(x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2342936fa04a15586a76f3ede90cc183"/>#define <emphasis role="strong">D_SWAP64</emphasis>(x)   bswap_64(x)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gacd2eb64561e2ebb03d2c62e730174406"/>#define <emphasis role="strong">D_SWAP16S</emphasis>(x)   do { *(x) = D_SWAP16(*(x)); } while (0)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga95eb1ef503db5823e0353cab543b1ae0"/>#define <emphasis role="strong">D_SWAP32S</emphasis>(x)   do { *(x) = D_SWAP32(*(x)); } while (0)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga547768c7febf10fac925012845aca4b8"/>#define <emphasis role="strong">D_SWAP64S</emphasis>(x)   do { *(x) = D_SWAP64(*(x)); } while (0)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga0501e82515b2bdf36453c4cc80f5e0cc"/>#define <emphasis role="strong">NSEC_PER_SEC</emphasis>   1000000000</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad16e9029e202d2dfb4cfae8f09131f8f"/>#define <emphasis role="strong">NSEC_PER_MSEC</emphasis>   1000000</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2180f263d149841a7c1fde663edb84c5"/>#define <emphasis role="strong">NSEC_PER_USEC</emphasis>   1000</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gafaa13d0918b6000ee7e6e9af82f2bca4">D_FAULT_CONFIG_ENV</link>   &quot;D_FI_CONFIG&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga12db854c9b239803dd9707a95e5a6cbe">D_SHOULD_FAIL</link>(fault_attr)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga6e7c50fd6c663552b1784e66c3f67d7a"/>#define <emphasis role="strong">D_HHASH_BITS</emphasis>   16</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaa551db2d69e8ed2ff19e02be12916fec"/>#define <emphasis role="strong">D_HTYPE_BITS</emphasis>   4</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gafeb20ff0de964eca5fcfe10bde4cff29"/>#define <emphasis role="strong">D_HTYPE_MASK</emphasis>   ((1ULL &lt;&lt; D_HTYPE_BITS) - 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga841294c7a67b2460539ba8a7cd6eced6"/>#define <emphasis role="strong">DBH_SHIFT</emphasis>   (9)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga30c6898c429be7788d9af291dc95e66c"/>#define <emphasis role="strong">DBH_SIZE</emphasis>   (1U &lt;&lt; DBH_SHIFT)	/* #ptrs per level */</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga8b555ad71e43556b8f7f03afdd9f5805"/>#define <emphasis role="strong">DBH_MASK</emphasis>   (DBH_SIZE - 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaae5da036db0682af317413e5a00837ea"/>#define <emphasis role="strong">DBH_NOB</emphasis>   (DBH_SIZE * sizeof(struct <link linkend="_structd__binheap__node">d_binheap_node</link> *))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga19c3e9e43a11609f84e3337b07d4b359"/>#define <emphasis role="strong">DBH_POISON</emphasis>   (0xdeadbeef)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga11e3e9f32491ecbcb5a5babac44c2622"/>#define <emphasis role="strong">prefetch</emphasis>(a)   ((void)a)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga60969c0ba4e754d4b659a5751f4ea2ad"/>#define <emphasis role="strong">D_LIST_HEAD_INIT</emphasis>(name)   { &amp;(name), &amp;(name) }</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab58eab8cd286d411a242ad729ab74ebe"/>#define <emphasis role="strong">D_LIST_HEAD</emphasis>(name)   <link linkend="_structd__list__head">d_list_t</link> name = D_LIST_HEAD_INIT(name)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_INIT_LIST_HEAD</emphasis>(ptr)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(ptr,  type,  member)   ((type *)((char *)(ptr)-(char *)(&amp;((type *)0)-&gt;member)))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_pop_entry</emphasis>(list,  type,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga646c9addf4d7bb0b64c63c72a59fd132">d_list_for_each</link>(pos,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga45aa34109093aab64857c8025c702b67">d_list_for_each_safe</link>(pos,  n,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gae0371a8e24e668439ec83522ade5e6a6">d_list_for_each_entry_continue</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1718102bfc0a7adc7787eafdad56e61b"/>#define <emphasis role="strong">NULL_P</emphasis>   ((void *)0)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga19d605ab087235035a15799fb0c22a38"/>#define <emphasis role="strong">D_HLIST_HEAD_INIT</emphasis>   { NULL_P }</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1ee5d7a08c89ab9e7e820ee3828da21e"/>#define <emphasis role="strong">D_HLIST_HEAD</emphasis>(name)   <link linkend="_structd__hlist__head">d_hlist_head_t</link> name = { NULL_P }</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga67e0e84bcdf6014445393d5b7e953d64"/>#define <emphasis role="strong">D_INIT_HLIST_HEAD</emphasis>(ptr)   ((ptr)-&gt;first = NULL_P)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga75180e7522c225dd4e84c6281830da85"/>#define <emphasis role="strong">D_INIT_HLIST_NODE</emphasis>(ptr)   ((ptr)-&gt;next = NULL_P, (ptr)-&gt;pprev = NULL_P)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga921b457a5b1850d9a344461499d7942e"/>#define <emphasis role="strong">d_hlist_entry</emphasis>(ptr,  type,  member)   <link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(ptr, type, member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each</emphasis>(pos,  head)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_safe</emphasis>(pos,  n,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga520bec87737598f78cb2bfd8dcf40686">dhlist_for_each_entry</link>(tpos,  pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga0df41ae219f031fcc70e602017f8156c">dhlist_for_each_entry_continue</link>(tpos,  pos,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gaf340b16c98bc064b6a6e7dbee8f46317">dhlist_for_each_entry_from</link>(tpos,  pos,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga949806d66413176355fed5ad214c358e">dhlist_for_each_entry_safe</link>(tpos,  pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga09528e312a7c715ae6b9c8984fbfff64">d_list_for_each_prev</link>(pos,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34327b4006e84e4ea261a6336c3b4402">d_list_for_each_entry</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga7370d807f98b2a23047aba1caf6d375c"/>#define <emphasis role="strong">d_list_for_each_entry_rcu</emphasis>(pos,  head,  member)   list_for_each_entry(pos, head, member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga8a3aff8d49884a34787d7bef6c226ff4">d_list_for_each_entry_reverse</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gab381fc0ae62abcf4bbc8b87f50791149">d_list_for_each_entry_safe</link>(pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gaf1b0e7f3b719ad0d9eaf1cfb4f57ca9b">d_list_for_each_entry_safe_from</link>(pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_typed</emphasis>(pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_reverse_typed</emphasis>(pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_safe_typed</emphasis>(pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_safe_from_typed</emphasis>(pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_entry_typed</emphasis>(tpos,  pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_entry_safe_typed</emphasis>(tpos,  pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34aa0d92c161020b963a2033a064bc33">D_CIRCLEQ_HEAD</link>(name,  type)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga27b5b203ffb3ef9b1c76995b1c71bb97"/>#define <emphasis role="strong">D_CIRCLEQ_HEAD_INIT</emphasis>(head)   { (void *)&amp;head, (void *)&amp;head }</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_circleq_entry</emphasis>(type)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INIT</emphasis>(head)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_AFTER</emphasis>(head,  listelm,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_BEFORE</emphasis>(head,  listelm,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_HEAD</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_TAIL</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_REMOVE</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_FOREACH</emphasis>(var,  head,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_FOREACH_REVERSE</emphasis>(var,  head,  field)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3124e4ba1789a60979a077197ca97463"/>#define <emphasis role="strong">D_CIRCLEQ_EMPTY</emphasis>(head)   ((head)-&gt;cqh_first == (void *)(head))</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac72f4a123e41a90c89565b7897422860"/>#define <emphasis role="strong">D_CIRCLEQ_FIRST</emphasis>(head)   ((head)-&gt;cqh_first)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga0ac29896683b8386522462203febd8da"/>#define <emphasis role="strong">D_CIRCLEQ_LAST</emphasis>(head)   ((head)-&gt;cqh_last)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3eac90bcf6e0a107fb8e5058fa1f606f"/>#define <emphasis role="strong">D_CIRCLEQ_NEXT</emphasis>(elm,  field)   ((elm)-&gt;field.cqe_next)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab48962f54f7fd628695946921ec0db4a"/>#define <emphasis role="strong">D_CIRCLEQ_PREV</emphasis>(elm,  field)   ((elm)-&gt;field.cqe_prev)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_LOOP_NEXT</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_LOOP_PREV</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3cb42ebe31d92d3b4aaff9dfcc98d239"/>#define <emphasis role="strong">D_HAS_WARNING</emphasis>(gcc_version,  warning)   ((gcc_version) &lt;= __GNUC__)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga7e54c71f3d9c8ddc8ca7a9d35c5750b5"/>typedef int(* <emphasis role="strong">d_hash_traverse_cb_t</emphasis>) (<link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac359015e4f94acc857b52efa6772d4b0"/>typedef struct <link linkend="_structd__list__head">d_list_head</link> <emphasis role="strong">d_list_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad6fc13722e8f66ef1f8d7a06030a7c8e"/>typedef struct <link linkend="_structd__hlist__node">d_hlist_node</link> <emphasis role="strong">d_hlist_node_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga60f32f7698086198fcfe801ff0cb2bb3"/>typedef struct <link linkend="_structd__hlist__head">d_hlist_head</link> <emphasis role="strong">d_hlist_head_t</emphasis></para>
</listitem>
            <listitem><para>typedef uint32_t <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaca9faf7a34a6a81690cbab4cb3222ba7"/>typedef <link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">d_rank_list_ptr_t</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga77cde03b28be6fe22c31dc7f6011481b"/>typedef char * <emphasis role="strong">d_string_t</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876">d_hash_feats</link> { 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a47b20cf122098c2583267127b97a295a">D_HASH_FT_NOLOCK</link> = (1 &lt;&lt; 0), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876ab86feeeb48eb6d130297990ffb355516">D_HASH_FT_MUTEX</link> = (1 &lt;&lt; 1), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a49eae38cc1036e8106c1feaf5f8b9ca3">D_HASH_FT_RWLOCK</link> = (1 &lt;&lt; 2), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a2ce48a3b10dfdf66cf1db7f056f980e2">D_HASH_FT_EPHEMERAL</link> = (1 &lt;&lt; 3), 

<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876abcc4a953dd274b6b70b6b603a2ba4a7e">D_HASH_FT_LRU</link> = (1 &lt;&lt; 4), 
<link linkend="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a7087bc2f5ca1c9f644e44fb5fb33ba3e">D_HASH_FT_GLOCK</link> = (1 &lt;&lt; 15)
 }</para>
</listitem>
            <listitem><para>enum { <link linkend="_group___g_u_r_t_1gga634f9f55e799f3052a34590f08100017ad1a711aec196affdd15f9bdaf32e6445">D_HTYPE_PTR</link> = 0
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_group___g_u_r_t_1ga44dfc3e2c963c9c358005b5a27f6db41">d_bh_feats</link> { <link linkend="_group___g_u_r_t_1gga44dfc3e2c963c9c358005b5a27f6db41a37c860f2a37721a96e21c519cdd4d096">DBH_FT_NOLOCK</link> = (1 &lt;&lt; 0), 
<link linkend="_group___g_u_r_t_1gga44dfc3e2c963c9c358005b5a27f6db41a90c97176989861cc120721fae3b623f6">DBH_FT_RWLOCK</link> = (1 &lt;&lt; 1)
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>const char * <link linkend="_group___g_u_r_t_1ga24bb9b0d69b8724bc7ff9f02481ffaec">d_errstr</link> (int rc)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa85a73840aea4680b8885a65576290c3">d_errno_register_range</link> (int start, int end, const char *const *error_strings, const char *const *strerror)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga964fe46c46a4e09346312bb1d1686ed2">d_errno_deregister_range</link> (int start)</para>
</listitem>
            <listitem><para>const char * <link linkend="_group___g_u_r_t_1gacfdb5cd08a3f82d362bf5fb7ca473ae1">d_errdesc</link> (int errnum)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gafd282ea00321044cb0177671e25277ef"/>void <emphasis role="strong">d_free</emphasis> (void *)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga9c64519522f6836fd0c8801ce1faa140"/>void * <emphasis role="strong">d_calloc</emphasis> (size_t, size_t)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga56079f4bc1a6ce8b87af0b09f5d33f51"/>void * <emphasis role="strong">d_realloc</emphasis> (void *, size_t)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2e6c1288b46f9521450bbee64628572f"/>uint64_t <emphasis role="strong">d_hash_mix64</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac01817f90c1df740042e34040b8b133b"/>uint32_t <emphasis role="strong">d_hash_mix96</emphasis> (uint32_t a, uint32_t b, uint32_t c)</para>
</listitem>
            <listitem><para>unsigned int <link linkend="_group___g_u_r_t_1gad7d4719a0c239e232241d3b8c68142f6">d_hash_srch_u64</link> (uint64_t *hashes, unsigned int nhashes, uint64_t value)</para>
</listitem>
            <listitem><para>uint32_t <link linkend="_group___g_u_r_t_1ga62656b843dd5da76cef0519aa1f29a73">d_hash_string_u32</link> (const char *string, unsigned int len)</para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___g_u_r_t_1ga2c7cc6156cd16166c03c38cfa5cddc96">d_hash_murmur64</link> (const unsigned char *key, unsigned int key_len, unsigned int seed)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaad3498b9d0727aa9d480776990b0cc88"/>int <emphasis role="strong">d_rank_list_dup</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> **dst, const <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga6129253995117cab2344344c1ab177ec"/>int <emphasis role="strong">d_rank_list_dup_sort_uniq</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> **dst, const <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga3aa4922e8a0b07aa19f9caf2f889ec01"/>void <emphasis role="strong">d_rank_list_filter</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *src_set, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *dst_set, bool exclude)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaaace0407b39f96e50b7f83384e0023b5"/><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">d_rank_list_alloc</emphasis> (uint32_t size)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1dcc7343d6837cf08f90aa36935e74f0"/><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">d_rank_list_realloc</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *ptr, uint32_t size)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1ea47dec9420f46e09ed118314ef1fa0"/>void <emphasis role="strong">d_rank_list_free</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga76cb1d5942cc397012bb46381622e342"/>int <emphasis role="strong">d_rank_list_copy</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *dst, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *src)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad77d3626c8ac8dd78b30b7e92a1a0951"/>void <emphasis role="strong">d_rank_list_sort</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga544132e312691ff6180bc0e2cdf39932"/>bool <emphasis role="strong">d_rank_list_find</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, int *idx)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaeaf01df71df3b85939f1c0b0d2841b8c"/>int <emphasis role="strong">d_rank_list_del</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga4d663c39721e628331f943b7f0af6bff"/>bool <emphasis role="strong">d_rank_list_identical</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list1, <link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list2)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga9241ac98ee0d361db106d36508a9a14c"/>bool <emphasis role="strong">d_rank_in_rank_list</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga03f20c62c362c04c937d64bf2d0257e8"/>int <emphasis role="strong">d_idx_in_rank_list</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank, uint32_t *idx)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga52227f765ae8ce7c0d81a4a3147272a5"/>int <emphasis role="strong">d_rank_list_append</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link> rank)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga50525b4b2ac952b4d09d42b06a0ab542"/>int <emphasis role="strong">d_rank_list_dump</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rank_list, d_string_t name, int name_len)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga167fd77ed8e9fafdd4a926a2d32ffba4"/><link linkend="_structd__rank__list__t">d_rank_list_t</link> * <emphasis role="strong">uint32_array_to_rank_list</emphasis> (uint32_t *ints, size_t len)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gacc2643633d02f51c93d46c0d5e329e62"/>int <emphasis role="strong">rank_list_to_uint32_array</emphasis> (<link linkend="_structd__rank__list__t">d_rank_list_t</link> *rl, uint32_t **ints, size_t *len)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga9df01962522943b5958214f163aa94e7"/>void <emphasis role="strong">d_getenv_bool</emphasis> (const char *env, bool *bool_val)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gadd42808057e1f91224f17a02e1a5b30d"/>void <emphasis role="strong">d_getenv_int</emphasis> (const char *env, unsigned int *int_val)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga89b7275ef7fbc0b0f74955c26974cb99"/>int <emphasis role="strong">d_write_string_buffer</emphasis> (struct <link linkend="_structd__string__buffer__t">d_string_buffer_t</link> *buf, const char *fmt,...)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga00d7a2eaa0e06bc42ace158f05453758"/>void <emphasis role="strong">d_free_string</emphasis> (struct <link linkend="_structd__string__buffer__t">d_string_buffer_t</link> *buf)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga2a709b248ee93795057bc00567680882"/>int <emphasis role="strong">d_backoff_seq_init</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq, uint8_t nzeros, uint16_t factor, uint32_t next, uint32_t max)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaf8441bff2d43a99101e883fc78199660"/>void <emphasis role="strong">d_backoff_seq_fini</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga5b9971065f638094cb6f28be65c802d8"/>uint32_t <emphasis role="strong">d_backoff_seq_next</emphasis> (struct <link linkend="_structd__backoff__seq">d_backoff_seq</link> *seq)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga182aed02a7b0a3ce0b752e7237919e42">d_fault_inject_init</link> (void)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa65aa5bb0746de8777f2cdf605ca7330">d_fault_inject_fini</link> (void)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga5bfcd26b6523d5970e921f6676f49d81">d_fault_inject_enable</link> (void)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga4eb70d3a70f45f9207092fa1fe668f2f">d_fault_inject_disable</link> (void)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaaa2393c6b3f1ff56254a6b7ba1dbb6c9"/>bool <emphasis role="strong">d_fault_inject_is_enabled</emphasis> (void)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gaaa021081fd71eb3f04f7a4feb4bac37f"/>bool <emphasis role="strong">d_should_fail</emphasis> (struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link> *fault_attr_ptr)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga2c63ca0901524f8f8c5e515d8eee27d4">d_fault_attr_set</link> (uint32_t fault_id, struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link> fa_in)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gae6c8d695425df2cadf5c7c93f0911430">d_fault_attr_err_code</link> (uint32_t fault_id)</para>
</listitem>
            <listitem><para>struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link> * <link linkend="_group___g_u_r_t_1ga5145e98702e1fa62160d8f19ff01a06b">d_fault_attr_lookup</link> (uint32_t fault_id)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaab6c454523831e5f035a7bb9f4fe2b79">d_hash_table_create</link> (uint32_t feats, uint32_t bits, void *priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> *hops, struct <link linkend="_structd__hash__table">d_hash_table</link> **htable_pp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa094440248a5ffcc0b0f56bc39a473b4">d_hash_table_create_inplace</link> (uint32_t feats, uint32_t bits, void *priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> *hops, struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga662ba75358be3d41a640801f5545b235">d_hash_table_traverse</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, d_hash_traverse_cb_t cb, void *arg)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga5f7c7ef5790fb0f7db96e2d91e032282">d_hash_table_destroy</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, bool force)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga4e7e2ce7ed7a784d17893b8a1d23a4d1">d_hash_table_destroy_inplace</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, bool force)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1ga10b7638a5bc7e4b293948fa75a2a66ef">d_hash_rec_find</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1ga7abb607ec215e45af17c503c56cebbb7">d_hash_rec_find_insert</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gafc850c30b7d6a6afbd7b9f78024ae3bf">d_hash_rec_insert</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> *link, bool exclusive)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga5d57b45297cc1beb4c4f896162bbb9ec">d_hash_rec_insert_anonym</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link, void *arg)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga8915efdfb9ad0e5d84fd46a8667330d6">d_hash_rec_delete</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1gafa896651ee1a40232db21c4dd51d71a7">d_hash_rec_delete_at</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga344ab0c00627d0bad617425f470621af">d_hash_rec_evict</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, const void *key, unsigned int ksize)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1ga0992c37d11e83dcc566529b54b38e8f5">d_hash_rec_evict_at</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga2570879d5c475f6d712867fc4c4968ec">d_hash_rec_addref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga77c35584d9b0de656aac8577718c55a0">d_hash_rec_decref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gad0fadce9a2007688a5458aa3df935d86">d_hash_rec_ndecref</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, int count, <link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para>bool <link linkend="_group___g_u_r_t_1gab86b9734aa3124fd5827f01471af325c">d_hash_rec_unlinked</link> (<link linkend="_structd__list__head">d_list_t</link> *link)</para>
</listitem>
            <listitem><para><link linkend="_structd__list__head">d_list_t</link> * <link linkend="_group___g_u_r_t_1gaa1681045f51ad2363a2fe385ebf0dcdc">d_hash_rec_first</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1gaf04c1d22e7af22d809a5ea4b011239d7">d_hash_table_debug</link> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1gaa6586c2648a421f7a1ac3d381bdf104e">d_hhash_create</link> (uint32_t feats, uint32_t bits, struct d_hhash **hhash)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga5413689cd142a17df5de6c589a65201a"/>void <emphasis role="strong">d_hhash_destroy</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga712f5958861b7d602b7fbe9a239d8bd8"/>void <emphasis role="strong">d_hhash_hlink_init</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink, struct <link linkend="_structd__hlink__ops">d_hlink_ops</link> *hl_ops)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga42d2057df12dfdb86b184fb078f8c638">d_hhash_link_insert</link> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink, int type)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga29fe0cc50607f03421b4e20b41db34e1"/>struct <link linkend="_structd__hlink">d_hlink</link> * <emphasis role="strong">d_hhash_link_lookup</emphasis> (struct d_hhash *hhash, uint64_t key)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga8bb9563031e3bbc90bf1e890e3b91c4b"/>void <emphasis role="strong">d_hhash_link_getref</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga422c28d527567419a0d9b5a7a84b11e8"/>void <emphasis role="strong">d_hhash_link_putref</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga0ddfef5e743d19542ef8466e66357443"/>bool <emphasis role="strong">d_hhash_link_delete</emphasis> (struct d_hhash *hhash, struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga91d2b320d9e082a177cc391c50154d85"/>bool <emphasis role="strong">d_hhash_link_empty</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1351044708c401c88c2f17eb4b3e4050"/>void <emphasis role="strong">d_hhash_link_key</emphasis> (struct <link linkend="_structd__hlink">d_hlink</link> *hlink, uint64_t *key)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga93e5c1d38849b76ae95fb2dc5ec1c281"/>int <emphasis role="strong">d_hhash_key_type</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gafcb1e560d5b89cfddba719a04c39d74d"/>bool <emphasis role="strong">d_hhash_key_isptr</emphasis> (uint64_t key)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga98e5e4b470ca351619d6145fb62e4653"/>int <emphasis role="strong">d_hhash_set_ptrtype</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gac5dbebafa26a3eff9fd809cae21763e4"/>bool <emphasis role="strong">d_hhash_is_ptrtype</emphasis> (struct d_hhash *hhash)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga40b23791140816101cd386484629094d"/>int <emphasis role="strong">d_uhash_create</emphasis> (uint32_t feats, uint32_t bits, struct <link linkend="_structd__hash__table">d_hash_table</link> **htable)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga07b418526de8b6a8751afe0431fd59a7"/>void <emphasis role="strong">d_uhash_destroy</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gabbf76a4cebc811771d9eba7bb76b4a83"/>void <emphasis role="strong">d_uhash_ulink_init</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink, struct <link linkend="_structd__ulink__ops">d_ulink_ops</link> *ul_ops)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga68af207e6eaddb6c2c9df4d936f62083"/>bool <emphasis role="strong">d_uhash_link_empty</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gace3ab002fb2e36c789488ae42d8184a1"/>bool <emphasis role="strong">d_uhash_link_last_ref</emphasis> (struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gad4450a69043a08e420b576cdc881e914"/>void <emphasis role="strong">d_uhash_link_addref</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga027947d6152c1e1cc33e56a2141cd8ab"/>void <emphasis role="strong">d_uhash_link_putref</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga1d1f345e7d0d1fcc0968f24859c0c00d"/>void <emphasis role="strong">d_uhash_link_delete</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab0e4d902444da2fa2c0536a78283797d"/>int <emphasis role="strong">d_uhash_link_insert</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__uuid">d_uuid</link> *key, void *cmp_args, struct <link linkend="_structd__ulink">d_ulink</link> *ulink)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab5fdbedb9208a8123b77ffa959b51a42"/>struct <link linkend="_structd__ulink">d_ulink</link> * <emphasis role="strong">d_uhash_link_lookup</emphasis> (struct <link linkend="_structd__hash__table">d_hash_table</link> *htable, struct <link linkend="_structd__uuid">d_uuid</link> *key, void *cmp_args)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga7b9b92235b46b8786395734f11c1fdfa">d_binheap_create</link> (uint32_t feats, uint32_t count, void *priv, struct <link linkend="_structd__binheap__ops">d_binheap_ops</link> *ops, struct <link linkend="_structd__binheap">d_binheap</link> **h)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga16fb53692ceff69041038017490c365d">d_binheap_create_inplace</link> (uint32_t feats, uint32_t count, void *priv, struct <link linkend="_structd__binheap__ops">d_binheap_ops</link> *ops, struct <link linkend="_structd__binheap">d_binheap</link> *h)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga337c37f9fe87959ea0ee36a67eb11384">d_binheap_destroy</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1ga8150ca3bb2e11d36d700844fa37c1a49">d_binheap_destroy_inplace</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h)</para>
</listitem>
            <listitem><para>struct <link linkend="_structd__binheap__node">d_binheap_node</link> * <link linkend="_group___g_u_r_t_1ga7bf269d3634eac922deefca3dc475986">d_binheap_find</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h, uint32_t idx)</para>
</listitem>
            <listitem><para>int <link linkend="_group___g_u_r_t_1ga2171b8903087946d8e90145f96f239f5">d_binheap_insert</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</para>
</listitem>
            <listitem><para>void <link linkend="_group___g_u_r_t_1gab21ef7fd2768c9bede6a63979823e6a0">d_binheap_remove</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> *e)</para>
</listitem>
            <listitem><para>struct <link linkend="_structd__binheap__node">d_binheap_node</link> * <link linkend="_group___g_u_r_t_1gab16f1d3e8211bfa26fe185054ebac89f">d_binheap_remove_root</link> (struct <link linkend="_structd__binheap">d_binheap</link> *h)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1gab98ee4a5481395e4bac6210fce9c43b3"/>const typedef char * <emphasis role="strong">d_const_string_t</emphasis></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_group___g_u_r_t_1ga1943703feab4688ad9aceb23187f0d89">d_fault_inject</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga93b9b3fc73f62f78ed64c9b8dd3c630a"/>unsigned int <emphasis role="strong">d_fault_config_file</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___g_u_r_t_1ga95f60da61e37977feaca606ff097fde2"/>struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link> * <emphasis role="strong">d_fault_attr_mem</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>(C) Copyright 2016-2021 Intel Corporation.</para>

<para>SPDX-License-Identifier: BSD-2-Clause-Patent DAOS Error numbers </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___g_u_r_t_1gaeb5349bfbab61654462b83c905d1b572"/>    <section>
    <title>__D_PTHREAD</title>
<indexterm><primary>__D_PTHREAD</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>__D_PTHREAD</secondary></indexterm>
<para><computeroutput>#define __D_PTHREAD( fn,  x)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;_rc;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rc&#32;=&#32;fn(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ASSERTF(_rc&#32;==&#32;0,&#32;<emphasis role="stringliteral">&quot;%s&#32;rc=%d&#32;%s\n&quot;</emphasis>,&#32;#fn,&#32;_rc,&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strerror(_rc));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_errno2der(_rc);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;})
</programlisting><para>
Definition at line 213 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gafafa703765432bf0bfb00f06748e346d"/>    <section>
    <title>__D_PTHREAD_INIT</title>
<indexterm><primary>__D_PTHREAD_INIT</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>__D_PTHREAD_INIT</secondary></indexterm>
<para><computeroutput>#define __D_PTHREAD_INIT( fn,  x,  y)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;_rc;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rc&#32;=&#32;fn(x,&#32;y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(_rc&#32;!=&#32;0)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ASSERT(_rc&#32;!=&#32;EINVAL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ERROR(<emphasis role="stringliteral">&quot;%s&#32;failed;&#32;rc=%d\n&quot;</emphasis>,&#32;#fn,&#32;_rc);&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_errno2der(_rc);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;})
</programlisting><para>
Definition at line 222 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga38e9033a8e62c5dc166632311e4e32a4"/>    <section>
    <title>_gurt_gettime</title>
<indexterm><primary>_gurt_gettime</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>_gurt_gettime</secondary></indexterm>
<para><computeroutput>#define _gurt_gettime( ts)   clock_gettime(CLOCK_MONOTONIC, ts)</computeroutput></para>
<para>Get the current time using a monotonic timer param[out] ts A timespec structure for the result </para>
<para>
Definition at line 58 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga5bea3a84d70c02d4e6b4cad82c123690"/>    <section>
    <title>D_ALLOC_CORE</title>
<indexterm><primary>D_ALLOC_CORE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_ALLOC_CORE</secondary></indexterm>
<para><computeroutput>#define D_ALLOC_CORE( ptr,  size,  count)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;(__typeof__(ptr))d_calloc((count),&#32;(size));&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_CHECK_ALLOC(calloc,&#32;<emphasis role="keyword">true</emphasis>,&#32;ptr,&#32;#ptr,&#32;size,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count,&#32;#count,&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 96 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaea7386e3574b5e8b41885d9f41298b14"/>    <section>
    <title>D_ASPRINTF</title>
<indexterm><primary>D_ASPRINTF</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_ASPRINTF</secondary></indexterm>
<para><computeroutput>#define D_ASPRINTF( ptr,  ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;_rc;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rc&#32;=&#32;asprintf(&amp;(ptr),&#32;__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_CHECK_ALLOC(asprintf,&#32;_rc&#32;!=&#32;-1,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ptr,&#32;#ptr,&#32;_rc&#32;+&#32;1,&#32;0,&#32;#ptr,&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;NULL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 110 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga3e66c06cfb9a4931d3013b825b93172b"/>    <section>
    <title>D_CHECK_ALLOC</title>
<indexterm><primary>D_CHECK_ALLOC</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CHECK_ALLOC</secondary></indexterm>
<para><computeroutput>#define D_CHECK_ALLOC( func,  cond,  ptr,  name,  size,  count,  cname,  on_error)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(<link linkend="_group___g_u_r_t_1ga12db854c9b239803dd9707a95e5a6cbe">D_SHOULD_FAIL</link>(d_fault_attr_mem))&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_free(ptr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;NULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;((cond)&#32;&amp;&amp;&#32;(ptr)&#32;!=&#32;NULL)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;((count)&#32;&lt;=&#32;1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_DEBUG(DB_MEM,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;alloc(&quot;</emphasis>&#32;#func&#32;<emphasis role="stringliteral">&quot;)&#32;&apos;&quot;</emphasis>&#32;name&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;%i&#32;at&#32;%p.\n&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">int</emphasis>)(size),&#32;(ptr));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_DEBUG(DB_MEM,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;alloc(&quot;</emphasis>&#32;#func&#32;<emphasis role="stringliteral">&quot;)&#32;&apos;&quot;</emphasis>&#32;name&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;%i&#32;*&#32;&apos;&quot;</emphasis>&#32;cname&#32;<emphasis role="stringliteral">&quot;&apos;:%i&#32;at&#32;%p.\n&quot;</emphasis>,&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">int</emphasis>)(size),&#32;(<emphasis role="keywordtype">int</emphasis>)(count),&#32;(ptr));&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(on_error);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;((count)&#32;&gt;=&#32;1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ERROR(<emphasis role="stringliteral">&quot;out&#32;of&#32;memory&#32;(tried&#32;to&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#func&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis>&#32;name&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;%i)\n&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">int</emphasis>)((size)&#32;*&#32;(count)));&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ERROR(<emphasis role="stringliteral">&quot;out&#32;of&#32;memory&#32;(tried&#32;to&#32;&quot;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#func&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis>&#32;name&#32;<emphasis role="stringliteral">&quot;&apos;:&#32;%i)\n&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">int</emphasis>)(size));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 65 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa437c4b0c211281dc9977a1debd4c8c8"/>    <section>
    <title>d_circleq_entry</title>
<indexterm><primary>d_circleq_entry</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_circleq_entry</secondary></indexterm>
<para><computeroutput>#define d_circleq_entry( type)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting><emphasis role="keyword">struct&#32;</emphasis>{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;struct&#32;type&#32;*cqe_next;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;next&#32;element&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;struct&#32;type&#32;*cqe_prev;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;previous&#32;element&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting><para>
Definition at line 608 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaae0788d16a4a9e6058597feddbbfa7d1"/>    <section>
    <title>D_CIRCLEQ_FOREACH</title>
<indexterm><primary>D_CIRCLEQ_FOREACH</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_FOREACH</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_FOREACH( var,  head,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;((var)&#32;=&#32;((head)-&gt;cqh_first);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(var)&#32;!=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(var)&#32;=&#32;((var)-&gt;field.cqe_next))
</programlisting><para>
Definition at line 680 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga8f19002396336e362a42a0d3f549d707"/>    <section>
    <title>D_CIRCLEQ_FOREACH_REVERSE</title>
<indexterm><primary>D_CIRCLEQ_FOREACH_REVERSE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_FOREACH_REVERSE</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_FOREACH_REVERSE( var,  head,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;((var)&#32;=&#32;((head)-&gt;cqh_last);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(var)&#32;!=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(var)&#32;=&#32;((var)-&gt;field.cqe_prev))
</programlisting><para>
Definition at line 690 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga34aa0d92c161020b963a2033a064bc33"/>    <section>
    <title>D_CIRCLEQ_HEAD</title>
<indexterm><primary>D_CIRCLEQ_HEAD</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_HEAD</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_HEAD( name,  type)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting><emphasis role="keyword">struct&#32;</emphasis>name&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;struct&#32;type&#32;*cqh_first;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;first&#32;element&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;struct&#32;type&#32;*cqh_last;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;last&#32;element&#32;*/</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting>
<para>Circular queue definitions:</para>

<para>A circular queue is headed by a structure defined by the CIRCLEQ_HEAD() macro. This structure contains a pair of pointers, one to the first element in the circular queue and the other to the last element in the circular queue. The elements are doubly linked so that an arbitrary element can be removed without traversing the queue. New elements can be added to the queue after an existing element, before an existing element, at the head of the queue, or at the end of the queue.</para>

<para>A CIRCLEQ_HEAD structure is declared as follows: </para>
<para>
Definition at line 599 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7a61e9dbb805300ac53abcc2a419f221"/>    <section>
    <title>D_CIRCLEQ_INIT</title>
<indexterm><primary>D_CIRCLEQ_INIT</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_INIT</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_INIT( head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(head)-&gt;cqh_first&#32;=&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(head)-&gt;cqh_last&#32;&#32;=&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 617 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga623295aca32721ac56b66f9eb7991ea1"/>    <section>
    <title>D_CIRCLEQ_INSERT_AFTER</title>
<indexterm><primary>D_CIRCLEQ_INSERT_AFTER</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_INSERT_AFTER</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_INSERT_AFTER( head,  listelm,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next&#32;=&#32;(listelm)-&gt;field.cqe_next;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev&#32;=&#32;(listelm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((listelm)-&gt;field.cqe_next&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_last&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(listelm)-&gt;field.cqe_next-&gt;field.cqe_prev&#32;=&#32;(elm);&#32;&#32;\
&#32;&#32;&#32;&#32;(listelm)-&gt;field.cqe_next&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 622 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7f861882cc68604dcaef469cfccb016f"/>    <section>
    <title>D_CIRCLEQ_INSERT_BEFORE</title>
<indexterm><primary>D_CIRCLEQ_INSERT_BEFORE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_INSERT_BEFORE</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_INSERT_BEFORE( head,  listelm,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next&#32;=&#32;(listelm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev&#32;=&#32;(listelm)-&gt;field.cqe_prev;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((listelm)-&gt;field.cqe_prev&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_first&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(listelm)-&gt;field.cqe_prev-&gt;field.cqe_next&#32;=&#32;(elm);&#32;&#32;\
&#32;&#32;&#32;&#32;(listelm)-&gt;field.cqe_prev&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 632 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga4dc53f414e1fb5a27531a0aba4021f6a"/>    <section>
    <title>D_CIRCLEQ_INSERT_HEAD</title>
<indexterm><primary>D_CIRCLEQ_INSERT_HEAD</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_INSERT_HEAD</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_INSERT_HEAD( head,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next&#32;=&#32;(head)-&gt;cqh_first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev&#32;=&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((head)-&gt;cqh_last&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_last&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_first-&gt;field.cqe_prev&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(head)-&gt;cqh_first&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 642 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga08bf66ca6397388784b55b4002d79688"/>    <section>
    <title>D_CIRCLEQ_INSERT_TAIL</title>
<indexterm><primary>D_CIRCLEQ_INSERT_TAIL</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_INSERT_TAIL</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_INSERT_TAIL( head,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next&#32;=&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev&#32;=&#32;(head)-&gt;cqh_last;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((head)-&gt;cqh_first&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_first&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_last-&gt;field.cqe_next&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;(head)-&gt;cqh_last&#32;=&#32;(elm);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 652 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga4aab22d28c757c315e610c32bec49220"/>    <section>
    <title>D_CIRCLEQ_LOOP_NEXT</title>
<indexterm><primary>D_CIRCLEQ_LOOP_NEXT</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_LOOP_NEXT</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_LOOP_NEXT( head,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;(((elm)-&gt;field.cqe_next&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;((head)-&gt;cqh_first)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(elm-&gt;field.cqe_next))
</programlisting><para>
Definition at line 725 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gab0aa87fb0a723164f878efe371c7e9ab"/>    <section>
    <title>D_CIRCLEQ_LOOP_PREV</title>
<indexterm><primary>D_CIRCLEQ_LOOP_PREV</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_LOOP_PREV</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_LOOP_PREV( head,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;(((elm)-&gt;field.cqe_prev&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;((head)-&gt;cqh_last)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(elm-&gt;field.cqe_prev))
</programlisting><para>
Definition at line 733 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga56e64886d7bea5f00d543c5d79a875fb"/>    <section>
    <title>D_CIRCLEQ_REMOVE</title>
<indexterm><primary>D_CIRCLEQ_REMOVE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_CIRCLEQ_REMOVE</secondary></indexterm>
<para><computeroutput>#define D_CIRCLEQ_REMOVE( head,  elm,  field)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((elm)-&gt;field.cqe_next&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_last&#32;=&#32;(elm)-&gt;field.cqe_prev;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next-&gt;field.cqe_prev&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;if&#32;((elm)-&gt;field.cqe_prev&#32;==&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)(head))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(head)-&gt;cqh_first&#32;=&#32;(elm)-&gt;field.cqe_next;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_prev-&gt;field.cqe_next&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(elm)-&gt;field.cqe_next;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 662 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaeb8164d7aa7c931d723f5e1f720a1220"/>    <section>
    <title>D_DEFINE_RANGE_ERRNO</title>
<indexterm><primary>D_DEFINE_RANGE_ERRNO</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_DEFINE_RANGE_ERRNO</secondary></indexterm>
<para><computeroutput>#define D_DEFINE_RANGE_ERRNO( name,  base)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DER_ERR_##name##_BASE&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;(base),&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_FOREACH_##name##_ERR(D_DEFINE_ERRNO)&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DER_ERR_##name##_LIMIT,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;};
</programlisting><para>
Definition at line 263 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga26427764f0838c19f92bf1520f362f2a"/>    <section>
    <title>D_DEFINE_RANGE_ERRSTR</title>
<indexterm><primary>D_DEFINE_RANGE_ERRSTR</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_DEFINE_RANGE_ERRSTR</secondary></indexterm>
<para><computeroutput>#define D_DEFINE_RANGE_ERRSTR( name)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;g_##name##_error_strings[]&#32;=&#32;{\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_FOREACH_##name##_ERR(D_DEFINE_ERRSTR)&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;};&#32;\
&#32;&#32;&#32;&#32;static&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;g_##name##_strerror[]&#32;=&#32;{&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_FOREACH_##name##_ERR(D_DEFINE_ERRDESC)&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;};
</programlisting><para>
Definition at line 270 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga76611e335e067a33ca0f29c44d23edb5"/>    <section>
    <title>D_DEREGISTER_RANGE</title>
<indexterm><primary>D_DEREGISTER_RANGE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_DEREGISTER_RANGE</secondary></indexterm>
<para><computeroutput>#define D_DEREGISTER_RANGE( name)   <link linkend="_group___g_u_r_t_1ga964fe46c46a4e09346312bb1d1686ed2">d_errno_deregister_range</link>(DER_ERR_##name##_BASE)</computeroutput></para>
<para>Macro to deregister a range defined using D_DEFINE_RANGE macros </para>
<para>
Definition at line 288 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gafaa13d0918b6000ee7e6e9af82f2bca4"/>    <section>
    <title>D_FAULT_CONFIG_ENV</title>
<indexterm><primary>D_FAULT_CONFIG_ENV</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_FAULT_CONFIG_ENV</secondary></indexterm>
<para><computeroutput>#define D_FAULT_CONFIG_ENV   &quot;D_FI_CONFIG&quot;</computeroutput></para>
<para>Env to specify fault injection config file </para>
<para>
Definition at line 30 of file fault_inject.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gadac50d4f561897772d3f415279ccfe15"/>    <section>
    <title>D_FOREACH_DAOS_ERR</title>
<indexterm><primary>D_FOREACH_DAOS_ERR</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_FOREACH_DAOS_ERR</secondary></indexterm>
<para><computeroutput>#define D_FOREACH_DAOS_ERR( ACTION)</computeroutput></para>
<para>TODO: add more error numbers </para>
<para>
Definition at line 159 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gab15ab808cd23b4ed3e602fd1deb6840e"/>    <section>
    <title>D_FOREACH_ERR_RANGE</title>
<indexterm><primary>D_FOREACH_ERR_RANGE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_FOREACH_ERR_RANGE</secondary></indexterm>
<para><computeroutput>#define D_FOREACH_ERR_RANGE( ACTION)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;ACTION(GURT,&#32;&#32;&#32;&#32;1000)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;ACTION(DAOS,&#32;&#32;&#32;&#32;2000)
</programlisting>
<para>Defines the gurt error codes </para>
<para>
Definition at line 255 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7aba8855cc78a732234b8b06efa0ccc2"/>    <section>
    <title>D_FPRINTF</title>
<indexterm><primary>D_FPRINTF</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_FPRINTF</secondary></indexterm>
<para><computeroutput>#define D_FPRINTF( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;printed&#32;=&#32;fprintf(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;_rc&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(printed&#32;&lt;&#32;0)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_ERROR(<emphasis role="stringliteral">&quot;failed&#32;to&#32;print&#32;to&#32;stream\n&quot;</emphasis>);&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rc&#32;=&#32;-DER_IO;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_rc;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;})
</programlisting><para>
Definition at line 200 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaba7fe10b5283179779842744dd62d19d"/>    <section>
    <title>D_FREE</title>
<indexterm><primary>D_FREE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_FREE</secondary></indexterm>
<para><computeroutput>#define D_FREE( ptr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_DEBUG(DB_MEM,&#32;<emphasis role="stringliteral">&quot;free&#32;&apos;&quot;</emphasis>&#32;#ptr&#32;<emphasis role="stringliteral">&quot;&apos;&#32;at&#32;%p.\n&quot;</emphasis>,&#32;(ptr));&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_free(ptr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;NULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 181 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gab309b83a59ab60dfe20293708f1ebada"/>    <section>
    <title>D_GOTO</title>
<indexterm><primary>D_GOTO</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_GOTO</secondary></indexterm>
<para><computeroutput>#define D_GOTO( label,  rc)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__typeof__(rc)&#32;__rc&#32;=&#32;(rc);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)(__rc);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;label;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 193 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga01d78cb156e691190e17da704129615b"/>    <section>
    <title>D_INIT_LIST_HEAD</title>
<indexterm><primary>D_INIT_LIST_HEAD</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_INIT_LIST_HEAD</secondary></indexterm>
<para><computeroutput>#define D_INIT_LIST_HEAD( ptr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;\
&#32;&#32;&#32;&#32;(ptr)-&gt;next&#32;=&#32;(ptr);&#32;(ptr)-&gt;prev&#32;=&#32;(ptr);&#32;\
}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 41 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45"/>    <section>
    <title>d_list_entry</title>
<indexterm><primary>d_list_entry</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_entry</secondary></indexterm>
<para><computeroutput>#define d_list_entry( ptr,  type,  member)   ((type *)((char *)(ptr)-(char *)(&amp;((type *)0)-&gt;member)))</computeroutput></para>
<para>Get the container of a list 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>ptr</entry>
                                <entry>
<para>the embedded list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>type</entry>
                                <entry>
<para>the type of the struct this is embedded in. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the member name of the list within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 245 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga646c9addf4d7bb0b64c63c72a59fd132"/>    <section>
    <title>d_list_for_each</title>
<indexterm><primary>d_list_for_each</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each</secondary></indexterm>
<para><computeroutput>#define d_list_for_each( pos,  head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;next,&#32;prefetch(pos-&gt;next);&#32;pos&#32;!=&#32;(head);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next,&#32;prefetch(pos-&gt;next))
</programlisting>
<para>Iterate over a list Behavior is undefined if <computeroutput>pos</computeroutput> is removed from the list in the body of the loop.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the list to iterate over </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 267 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga34327b4006e84e4ea261a6336c3b4402"/>    <section>
    <title>d_list_for_each_entry</title>
<indexterm><primary>d_list_for_each_entry</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry( pos,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;next,&#32;__typeof__(*pos),&#32;member),&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.next);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;__typeof__(*pos),&#32;member),\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.next))
</programlisting>
<para>Iterate over a list of given type</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the list_struct within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 482 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gae0371a8e24e668439ec83522ade5e6a6"/>    <section>
    <title>d_list_for_each_entry_continue</title>
<indexterm><primary>d_list_for_each_entry_continue</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_continue</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_continue( pos,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;__typeof__(*pos),&#32;member);\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.next),&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;__typeof__(*pos),&#32;member))
</programlisting>
<para>Iterate over a list continuing after existing point</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the type * to use as a loop counter </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the list head </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the list_struct within the struct </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 292 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga8a3aff8d49884a34787d7bef6c226ff4"/>    <section>
    <title>d_list_for_each_entry_reverse</title>
<indexterm><primary>d_list_for_each_entry_reverse</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_reverse</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_reverse( pos,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;prev,&#32;__typeof__(*pos),&#32;member);&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.prev),&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.prev,&#32;__typeof__(*pos),&#32;member))
</programlisting>
<para>Iterate backwards over a list of given type.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the list_struct within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 508 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaffd6e66d7b72d830eefef98d471fc4f8"/>    <section>
    <title>d_list_for_each_entry_reverse_typed</title>
<indexterm><primary>d_list_for_each_entry_reverse_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_reverse_typed</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_reverse_typed( pos,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;prev,&#32;type,&#32;member);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.prev),&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.prev,&#32;type,&#32;member))
</programlisting><para>
Definition at line 558 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gab381fc0ae62abcf4bbc8b87f50791149"/>    <section>
    <title>d_list_for_each_entry_safe</title>
<indexterm><primary>d_list_for_each_entry_safe</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_safe</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_safe( pos,  n,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;next,&#32;__typeof__(*pos),&#32;member),&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;__typeof__(*pos),&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;member);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n,&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(n-&gt;member.next,&#32;__typeof__(*n),&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;member))
</programlisting>
<para>Iterate over a list of given type safe against removal of list entry</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>n</entry>
                                <entry>
<para>another type * to use as temporary storage </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the list_struct within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 523 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaf1b0e7f3b719ad0d9eaf1cfb4f57ca9b"/>    <section>
    <title>d_list_for_each_entry_safe_from</title>
<indexterm><primary>d_list_for_each_entry_safe_from</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_safe_from</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_safe_from( pos,  n,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;__typeof__(*pos),&#32;member);\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n,&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(n-&gt;member.next,&#32;__typeof__(*n),&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;member))
</programlisting>
<para>Iterate over a list continuing from an existing point Iterate over list of given type from current point, safe against removal of list entry.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the type * to use as a loop cursor. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>n</entry>
                                <entry>
<para>another type * to use as temporary storage </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the list_struct within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 544 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga3de4e6f518edf541bcfcb40f1275a80d"/>    <section>
    <title>d_list_for_each_entry_safe_from_typed</title>
<indexterm><primary>d_list_for_each_entry_safe_from_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_safe_from_typed</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_safe_from_typed( pos,  n,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;type,&#32;member);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n,&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(n-&gt;member.next,&#32;type,&#32;member))
</programlisting><para>
Definition at line 569 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gae51f3be4f0e534828a2e64f01eff48d3"/>    <section>
    <title>d_list_for_each_entry_safe_typed</title>
<indexterm><primary>d_list_for_each_entry_safe_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_safe_typed</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_safe_typed( pos,  n,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;next,&#32;type,&#32;member),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;type,&#32;member);&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n,&#32;n&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(n-&gt;member.next,&#32;type,&#32;member))
</programlisting><para>
Definition at line 563 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gafdaf9449097f8d7e1931a129f1ca1a3e"/>    <section>
    <title>d_list_for_each_entry_typed</title>
<indexterm><primary>d_list_for_each_entry_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_entry_typed</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_entry_typed( pos,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((head)-&gt;next,&#32;type,&#32;member),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.next);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;pos-&gt;member&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(pos-&gt;member.next,&#32;type,&#32;member),&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefetch(pos-&gt;member.next))
</programlisting><para>
Definition at line 551 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga09528e312a7c715ae6b9c8984fbfff64"/>    <section>
    <title>d_list_for_each_prev</title>
<indexterm><primary>d_list_for_each_prev</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_prev</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_prev( pos,  head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;prev,&#32;prefetch(pos-&gt;prev);&#32;pos&#32;!=&#32;(head);&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;prev,&#32;prefetch(pos-&gt;prev))
</programlisting>
<para>Iterate over a list in reverse order</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the &amp;struct list_head to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 468 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga45aa34109093aab64857c8025c702b67"/>    <section>
    <title>d_list_for_each_safe</title>
<indexterm><primary>d_list_for_each_safe</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_for_each_safe</secondary></indexterm>
<para><computeroutput>#define d_list_for_each_safe( pos,  n,  head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;next,&#32;n&#32;=&#32;pos-&gt;next;&#32;pos&#32;!=&#32;(head);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n,&#32;n&#32;=&#32;pos-&gt;next)
</programlisting>
<para>Iterate over a list safely</para>

<para>This is safe to use if <emphasis>pos</emphasis> could be removed from the list in the body of the loop.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the iterator </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>n</entry>
                                <entry>
<para>temporary storage </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the list to iterate over </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 281 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga74fad9fb3b3ea96bf831f99e5995ac2b"/>    <section>
    <title>d_list_pop_entry</title>
<indexterm><primary>d_list_pop_entry</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_list_pop_entry</secondary></indexterm>
<para><computeroutput>#define d_list_pop_entry( list,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;*__r&#32;=&#32;NULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!d_list_empty(list))&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;<link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>((list)-&gt;next,&#32;type,&#32;member);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d_list_del_init((list)-&gt;next);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;})
</programlisting><para>
Definition at line 248 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga8e751bfd25b22b5655abe9a5a4d86db9"/>    <section>
    <title>D_REALPATH</title>
<indexterm><primary>D_REALPATH</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_REALPATH</secondary></indexterm>
<para><computeroutput>#define D_REALPATH( ptr,  path)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int&#32;_size;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;realpath((path),&#32;NULL);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_size&#32;=&#32;(ptr)&#32;!=&#32;NULL&#32;?&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strnlen((ptr),&#32;PATH_MAX&#32;+&#32;1)&#32;+&#32;1&#32;:&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_CHECK_ALLOC(realpath,&#32;<emphasis role="keyword">true</emphasis>,&#32;ptr,&#32;#ptr,&#32;_size,&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;#ptr,&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 119 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7cf8f4650b80bb82b7665d0075e6ceea"/>    <section>
    <title>D_REGISTER_RANGE</title>
<indexterm><primary>D_REGISTER_RANGE</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_REGISTER_RANGE</secondary></indexterm>
<para><computeroutput>#define D_REGISTER_RANGE( name)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<link linkend="_group___g_u_r_t_1gaa85a73840aea4680b8885a65576290c3">d_errno_register_range</link>(DER_ERR_##name##_BASE,&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DER_ERR_##name##_LIMIT,&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_##name##_error_strings,\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_##name##_strerror)
</programlisting>
<para>Macro to register a range defined using D_DEFINE_RANGE macros </para>
<para>
Definition at line 281 of file daos_errno.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga12db854c9b239803dd9707a95e5a6cbe"/>    <section>
    <title>D_SHOULD_FAIL</title>
<indexterm><primary>D_SHOULD_FAIL</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_SHOULD_FAIL</secondary></indexterm>
<para><computeroutput>#define D_SHOULD_FAIL( fault_attr)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;({&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bool&#32;__rb;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rb&#32;=&#32;<link linkend="_group___g_u_r_t_1ga1943703feab4688ad9aceb23187f0d89">d_fault_inject</link>&#32;&amp;&amp;&#32;d_should_fail(fault_attr);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(__rb)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_WARN(<emphasis role="stringliteral">&quot;fault_id&#32;%d,&#32;injecting&#32;fault.\n&quot;</emphasis>,&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fault_attr-&gt;fa_id);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rb;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;})
</programlisting>
<para>use this macro to determine if a fault should be injected at a specific call site </para>
<para>
Definition at line 120 of file fault_inject.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga86ee735afe7ce35856ff7995446bb23e"/>    <section>
    <title>D_STRNDUP</title>
<indexterm><primary>D_STRNDUP</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_STRNDUP</secondary></indexterm>
<para><computeroutput>#define D_STRNDUP( ptr,  s,  n)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(ptr)&#32;=&#32;strndup(s,&#32;n);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;D_CHECK_ALLOC(strndup,&#32;<emphasis role="keyword">true</emphasis>,&#32;ptr,&#32;#ptr,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strnlen(s,&#32;n&#32;+&#32;1)&#32;+&#32;1,&#32;0,&#32;#ptr,&#32;0);&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(0)
</programlisting><para>
Definition at line 103 of file common.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga992e19362c6d09b7b987d965ee12caef"/>    <section>
    <title>dhlist_for_each</title>
<indexterm><primary>dhlist_for_each</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each( pos,  head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;pos&#32;&amp;&amp;&#32;(prefetch(pos-&gt;next),&#32;1);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next)
</programlisting><para>
Definition at line 394 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga520bec87737598f78cb2bfd8dcf40686"/>    <section>
    <title>dhlist_for_each_entry</title>
<indexterm><primary>dhlist_for_each_entry</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry( tpos,  pos,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;&amp;&amp;&#32;({&#32;prefetch(pos-&gt;next);&#32;1;&#32;})&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;({&#32;tpos&#32;=&#32;d_hlist_entry(pos,&#32;__typeof__(*tpos),&#32;member);&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next)
</programlisting>
<para>Iterate over an hlist of given type</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tpos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the &amp;struct hlist_node to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the hlist_node within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 410 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga0df41ae219f031fcc70e602017f8156c"/>    <section>
    <title>dhlist_for_each_entry_continue</title>
<indexterm><primary>dhlist_for_each_entry_continue</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry_continue</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry_continue( tpos,  pos,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(pos)-&gt;next;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;&amp;&amp;&#32;({&#32;prefetch(pos-&gt;next);&#32;1;&#32;})&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;({&#32;tpos&#32;=&#32;d_hlist_entry(pos,&#32;__typeof__(*tpos),&#32;member);&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next)
</programlisting>
<para>Iterate over an hlist continuing after existing point</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tpos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the &amp;struct hlist_node to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the hlist_node within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 424 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaf340b16c98bc064b6a6e7dbee8f46317"/>    <section>
    <title>dhlist_for_each_entry_from</title>
<indexterm><primary>dhlist_for_each_entry_from</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry_from</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry_from( tpos,  pos,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;pos&#32;&amp;&amp;&#32;({&#32;prefetch(pos-&gt;next);&#32;1;&#32;})&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;({&#32;tpos&#32;=&#32;d_hlist_entry(pos,&#32;__typeof__(*tpos),&#32;member);&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next)
</programlisting>
<para>Iterate over an hlist continuing from an existing point</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tpos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the &amp;struct hlist_node to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the hlist_node within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 438 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga949806d66413176355fed5ad214c358e"/>    <section>
    <title>dhlist_for_each_entry_safe</title>
<indexterm><primary>dhlist_for_each_entry_safe</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry_safe</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry_safe( tpos,  pos,  n,  head,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;&amp;&amp;&#32;({&#32;n&#32;=&#32;pos-&gt;next;&#32;1;&#32;})&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;({&#32;tpos&#32;=&#32;d_hlist_entry(pos,&#32;__typeof__(*tpos),&#32;member);&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n)
</programlisting>
<para>Iterate over an hlist of given type safe against removal of list entry</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>tpos</entry>
                                <entry>
<para>the type * to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>pos</entry>
                                <entry>
<para>the &amp;struct hlist_node to use as a loop counter. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>n</entry>
                                <entry>
<para>another &amp;struct hlist_node to use as temporary storage </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>head</entry>
                                <entry>
<para>the head for your list. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>member</entry>
                                <entry>
<para>the name of the hlist_node within the struct. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 453 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga998602ecf89d63dd1b5134e40e606a81"/>    <section>
    <title>dhlist_for_each_entry_safe_typed</title>
<indexterm><primary>dhlist_for_each_entry_safe_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry_safe_typed</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry_safe_typed( tpos,  pos,  n,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;&amp;&amp;&#32;(n&#32;=&#32;pos-&gt;next,&#32;1)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(tpos&#32;=&#32;d_hlist_entry(pos,&#32;type,&#32;member),&#32;1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n)
</programlisting><para>
Definition at line 580 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga02c9e26b05b9b86f820ff22856327a30"/>    <section>
    <title>dhlist_for_each_entry_typed</title>
<indexterm><primary>dhlist_for_each_entry_typed</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_entry_typed</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_entry_typed( tpos,  pos,  head,  type,  member)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;&amp;&amp;&#32;(prefetch(pos-&gt;next),&#32;1)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(tpos&#32;=&#32;d_hlist_entry(pos,&#32;type,&#32;member),&#32;1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;pos-&gt;next)
</programlisting><para>
Definition at line 574 of file list.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga837f85325a465510b7afc789c1bf3afb"/>    <section>
    <title>dhlist_for_each_safe</title>
<indexterm><primary>dhlist_for_each_safe</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>dhlist_for_each_safe</secondary></indexterm>
<para><computeroutput>#define dhlist_for_each_safe( pos,  n,  head)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(pos&#32;=&#32;(head)-&gt;first;&#32;pos&#32;&amp;&amp;&#32;(n&#32;=&#32;pos-&gt;next,&#32;1);&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;n)
</programlisting><para>
Definition at line 398 of file list.h.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc"/>    <section>
    <title>d_rank_t</title>
<indexterm><primary>d_rank_t</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_rank_t</secondary></indexterm>
<para><computeroutput>typedef uint32_t <link linkend="_group___g_u_r_t_1gae672185310db8deb2fc706c37b2e68bc">d_rank_t</link></computeroutput></para>
<para>Server identification </para>
<para>
Definition at line 62 of file types.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group___g_u_r_t_1ga634f9f55e799f3052a34590f08100017"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>The handle type, uses the least significant 4-bits in the 64-bits hhash key. The bit 0 is only used for D_HYTPE_PTR (pointer type), all other types MUST set bit 0 to 1. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>D_HTYPE_PTR</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HTYPE_PTR</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1gga634f9f55e799f3052a34590f08100017ad1a711aec196affdd15f9bdaf32e6445"/>D_HTYPE_PTR</entry><entry>
<para>pointer type handle </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 529 of file hash.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga44dfc3e2c963c9c358005b5a27f6db41"/>    <section>
    <title>d_bh_feats</title>
<indexterm><primary>d_bh_feats</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_bh_feats</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___g_u_r_t_1ga44dfc3e2c963c9c358005b5a27f6db41">d_bh_feats</link></computeroutput></para>
<para>Binary heap feature bits. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DBH_FT_NOLOCK</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>DBH_FT_NOLOCK</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1gga44dfc3e2c963c9c358005b5a27f6db41a37c860f2a37721a96e21c519cdd4d096"/>DBH_FT_NOLOCK</entry><entry>
<para>By default, the binheap is protected by pthread_mutex. The bin heap has no lock, it means the bin heap is protected by external lock, or only accessed by a single thread. </para>
</entry></row><row><entry><indexterm><primary>DBH_FT_RWLOCK</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>DBH_FT_RWLOCK</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1gga44dfc3e2c963c9c358005b5a27f6db41a90c97176989861cc120721fae3b623f6"/>DBH_FT_RWLOCK</entry><entry>
<para>It is a read-mostly bin heap, so it is protected by RW lock. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 70 of file heap.h.</para>
    </section><anchor xml:id="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876"/>    <section>
    <title>d_hash_feats</title>
<indexterm><primary>d_hash_feats</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_feats</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876">d_hash_feats</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>D_HASH_FT_NOLOCK</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_NOLOCK</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a47b20cf122098c2583267127b97a295a"/>D_HASH_FT_NOLOCK</entry><entry>
<para>By default, the hash table is protected by pthread_spinlock_t. The hash table has no lock, it means the hash table is protected by external lock, or only accessed by a single thread. </para>
</entry></row><row><entry><indexterm><primary>D_HASH_FT_MUTEX</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_MUTEX</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876ab86feeeb48eb6d130297990ffb355516"/>D_HASH_FT_MUTEX</entry><entry>
<para>The hash table is protected by pthread_mutex_t. </para>
</entry></row><row><entry><indexterm><primary>D_HASH_FT_RWLOCK</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_RWLOCK</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a49eae38cc1036e8106c1feaf5f8b9ca3"/>D_HASH_FT_RWLOCK</entry><entry>
<para>It is a read-mostly hash table, so it is protected by RW lock.</para>

<para>Note: If caller sets this flag and also provides hop_addref/decref, then he should guarantee refcount changes are atomic or protected within hop_addref/decref, because RW lock can&apos;t protect refcount. </para>
</entry></row><row><entry><indexterm><primary>D_HASH_FT_EPHEMERAL</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_EPHEMERAL</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a2ce48a3b10dfdf66cf1db7f056f980e2"/>D_HASH_FT_EPHEMERAL</entry><entry>
<para>If the EPHEMERAL bit is zero:<itemizedlist>
<listitem>
<para>The hash table will take and release references using the user-provided hop_rec_addref and hop_rec_decref functions as entries are added to and deleted from the hash table.</para>
</listitem><listitem>
<para>Decrementing the last reference on an item without previously deleting it will cause an ASSERT - it will not be free&apos;d</para>
</listitem></itemizedlist>
</para>

<para>If the EPHEMERAL bit is set:<itemizedlist>
<listitem>
<para>The hash table will not call automatically call the addref or decref functions when entries are added/removed</para>
</listitem><listitem>
<para>When decref is called and the reference count reaches zero, the record will be deleted automatically from the table and free&apos;d</para>
</listitem></itemizedlist>
</para>

<para>Note that if addref/decref are not provided this bit has no effect </para>
</entry></row><row><entry><indexterm><primary>D_HASH_FT_LRU</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_LRU</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876abcc4a953dd274b6b70b6b603a2ba4a7e"/>D_HASH_FT_LRU</entry><entry>
<para>If the LRU bit is set: The found in bucket item is moved on top of the list. So, next search for it will be much faster. </para>
</entry></row><row><entry><indexterm><primary>D_HASH_FT_GLOCK</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>D_HASH_FT_GLOCK</secondary></indexterm>
<anchor xml:id="_group___g_u_r_t_1ggacd5b06eabed93698ee5a62e674e80876a7087bc2f5ca1c9f644e44fb5fb33ba3e"/>D_HASH_FT_GLOCK</entry><entry>
<para>Use Global Table Lock instead of per bucket locking. TODO: should be removed when all will use per bucket locking. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 151 of file hash.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___g_u_r_t_1ga7b9b92235b46b8786395734f11c1fdfa"/>    <section>
    <title>d_binheap_create()</title>
<indexterm><primary>d_binheap_create</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_create</secondary></indexterm>
<para><computeroutput>int d_binheap_create (uint32_t feats, uint32_t count, void * priv, struct <link linkend="_structd__binheap__ops">d_binheap_ops</link> * ops, struct <link linkend="_structd__binheap">d_binheap</link> ** h)</computeroutput></para>
<para>Creates and initializes a binary heap instance.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>feats</entry>
                                <entry>
<para>The heap feats bits </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>The initial heap capacity in # of nodes </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>priv</entry>
                                <entry>
<para>An optional private argument </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ops</entry>
                                <entry>
<para>The operations to be used </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>h</entry>
                                <entry>
<para>The 2nd level pointer of created binheap</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga16fb53692ceff69041038017490c365d"/>    <section>
    <title>d_binheap_create_inplace()</title>
<indexterm><primary>d_binheap_create_inplace</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_create_inplace</secondary></indexterm>
<para><computeroutput>int d_binheap_create_inplace (uint32_t feats, uint32_t count, void * priv, struct <link linkend="_structd__binheap__ops">d_binheap_ops</link> * ops, struct <link linkend="_structd__binheap">d_binheap</link> * h)</computeroutput></para>
<para>Creates and initializes a binary heap instance inplace.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>feats</entry>
                                <entry>
<para>The heap feats bits </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>The initial heap capacity in # of nodes </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>priv</entry>
                                <entry>
<para>An optional private argument </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ops</entry>
                                <entry>
<para>The operations to be used </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>h</entry>
                                <entry>
<para>The pointer of binheap</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga337c37f9fe87959ea0ee36a67eb11384"/>    <section>
    <title>d_binheap_destroy()</title>
<indexterm><primary>d_binheap_destroy</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_destroy</secondary></indexterm>
<para><computeroutput>void d_binheap_destroy (struct <link linkend="_structd__binheap">d_binheap</link> * h)</computeroutput></para>
<para>Releases all resources associated with a binary heap instance.</para>

<para>Deallocates memory for all indirection levels and the binary heap object itself.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The binary heap object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga8150ca3bb2e11d36d700844fa37c1a49"/>    <section>
    <title>d_binheap_destroy_inplace()</title>
<indexterm><primary>d_binheap_destroy_inplace</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_destroy_inplace</secondary></indexterm>
<para><computeroutput>void d_binheap_destroy_inplace (struct <link linkend="_structd__binheap">d_binheap</link> * h)</computeroutput></para>
<para>Releases all resources associated with a binary heap instance inplace.</para>

<para>Deallocates memory for all indirection levels and clear data in binary heap object as zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The binary heap object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7bf269d3634eac922deefca3dc475986"/>    <section>
    <title>d_binheap_find()</title>
<indexterm><primary>d_binheap_find</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_find</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structd__binheap__node">d_binheap_node</link>* d_binheap_find (struct <link linkend="_structd__binheap">d_binheap</link> * h, uint32_t idx)</computeroutput></para>
<para>Obtains a pointer to a heap node, given its index into the binary tree.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The binary heap </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>idx</entry>
                                <entry>
<para>The requested node&apos;s index</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>valid-pointer of the requested heap node, NULL if index is out of bounds </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga2171b8903087946d8e90145f96f239f5"/>    <section>
    <title>d_binheap_insert()</title>
<indexterm><primary>d_binheap_insert</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_insert</secondary></indexterm>
<para><computeroutput>int d_binheap_insert (struct <link linkend="_structd__binheap">d_binheap</link> * h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> * e)</computeroutput></para>
<para>Sort-inserts a node into the binary heap.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The heap </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>e</entry>
                                <entry>
<para>The node</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if the node inserted successfully negative value if error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gab21ef7fd2768c9bede6a63979823e6a0"/>    <section>
    <title>d_binheap_remove()</title>
<indexterm><primary>d_binheap_remove</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_remove</secondary></indexterm>
<para><computeroutput>void d_binheap_remove (struct <link linkend="_structd__binheap">d_binheap</link> * h, struct <link linkend="_structd__binheap__node">d_binheap_node</link> * e)</computeroutput></para>
<para>Removes a node from the binary heap.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The heap </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>e</entry>
                                <entry>
<para>The node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gab16f1d3e8211bfa26fe185054ebac89f"/>    <section>
    <title>d_binheap_remove_root()</title>
<indexterm><primary>d_binheap_remove_root</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_binheap_remove_root</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structd__binheap__node">d_binheap_node</link>* d_binheap_remove_root (struct <link linkend="_structd__binheap">d_binheap</link> * h)</computeroutput></para>
<para>Removes the root node from the binary heap.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>h</entry>
                                <entry>
<para>The heap</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>valid pointer of the removed root node, or NULL when empty. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gacfdb5cd08a3f82d362bf5fb7ca473ae1"/>    <section>
    <title>d_errdesc()</title>
<indexterm><primary>d_errdesc</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_errdesc</secondary></indexterm>
<para><computeroutput>const char* d_errdesc (int errnum)</computeroutput></para>
<para>Return an error description string associated with a registered gurt errno.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>errnum</entry>
                                <entry>
<para>The error code</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The error description string, or an &quot;Unknown
        error nnn&quot; message if the error number is unknown. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga964fe46c46a4e09346312bb1d1686ed2"/>    <section>
    <title>d_errno_deregister_range()</title>
<indexterm><primary>d_errno_deregister_range</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_errno_deregister_range</secondary></indexterm>
<para><computeroutput>void d_errno_deregister_range (int start)</computeroutput></para>
<para>De-register error codes with gurt. Use D_DEREGISTER_RANGE.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>start</entry>
                                <entry>
<para>Start of error range </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa85a73840aea4680b8885a65576290c3"/>    <section>
    <title>d_errno_register_range()</title>
<indexterm><primary>d_errno_register_range</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_errno_register_range</secondary></indexterm>
<para><computeroutput>int d_errno_register_range (int start, int end, const char *const * error_strings, const char *const * strerror)</computeroutput></para>
<para>Register error codes with gurt. Use D_REGISTER_RANGE.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>start</entry>
                                <entry>
<para>Start of error range. Actual errors start at <computeroutput>start</computeroutput> + 1 </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>end</entry>
                                <entry>
<para>End of range. All error codes should be less than <computeroutput>end</computeroutput> </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>error_strings</entry>
                                <entry>
<para>Array of strings. Must be one per code in the range </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>strerror</entry>
                                <entry>
<para>Array of strings. Must be one per code in the range</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, otherwise error code </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga24bb9b0d69b8724bc7ff9f02481ffaec"/>    <section>
    <title>d_errstr()</title>
<indexterm><primary>d_errstr</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_errstr</secondary></indexterm>
<para><computeroutput>const char* d_errstr (int rc)</computeroutput></para>
<para>Return a string associated with a registered gurt errno</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>rc</entry>
                                <entry>
<para>The error code</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>String value for error code or DER_UNKNOWN </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gae6c8d695425df2cadf5c7c93f0911430"/>    <section>
    <title>d_fault_attr_err_code()</title>
<indexterm><primary>d_fault_attr_err_code</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_attr_err_code</secondary></indexterm>
<para><computeroutput>int d_fault_attr_err_code (uint32_t fault_id)</computeroutput></para>
<para>Retrieve the error code specified in the config file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>fault_id</entry>
                                <entry>
<para>id of the fault</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>error code provided in the config file. 0 if no error code was provided for fault_id. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga5145e98702e1fa62160d8f19ff01a06b"/>    <section>
    <title>d_fault_attr_lookup()</title>
<indexterm><primary>d_fault_attr_lookup</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_attr_lookup</secondary></indexterm>
<para><computeroutput>struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link>* d_fault_attr_lookup (uint32_t fault_id)</computeroutput></para>
<para>lookup the attributes struct address of a fault id.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>fault_id</entry>
                                <entry>
<para>id of the fault</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>address of the fault attributes for fault_id </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga2c63ca0901524f8f8c5e515d8eee27d4"/>    <section>
    <title>d_fault_attr_set()</title>
<indexterm><primary>d_fault_attr_set</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_attr_set</secondary></indexterm>
<para><computeroutput>int d_fault_attr_set (uint32_t fault_id, struct <link linkend="_structd__fault__attr__t">d_fault_attr_t</link> fa_in)</computeroutput></para>
<para>initialize a fault attr.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>fault_id</entry>
                                <entry>
<para>id of the fault </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>fa_in</entry>
                                <entry>
<para>input fault attributes. Only the following fields are used:</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                fa_in.fa_probability fa_in.fa_interval fa_in.fa_max_faults fa_in.fa_err_code fa_in.fa_num_faults fa_in.fa_probability_x fa_in.fa_probability_y <formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga4eb70d3a70f45f9207092fa1fe668f2f"/>    <section>
    <title>d_fault_inject_disable()</title>
<indexterm><primary>d_fault_inject_disable</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_inject_disable</secondary></indexterm>
<para><computeroutput>int d_fault_inject_disable (void )</computeroutput></para>
<para>Stop injecting faults.</para>

<para><formalpara><title>Returns</title>

<para>DER_SUCCESS on success, -DER_NOSYS if not supported </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga5bfcd26b6523d5970e921f6676f49d81"/>    <section>
    <title>d_fault_inject_enable()</title>
<indexterm><primary>d_fault_inject_enable</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_inject_enable</secondary></indexterm>
<para><computeroutput>int d_fault_inject_enable (void )</computeroutput></para>
<para>Start injecting faults.</para>

<para><formalpara><title>Returns</title>

<para>DER_SUCCESS on success, -DER_NOSYS if not supported </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa65aa5bb0746de8777f2cdf605ca7330"/>    <section>
    <title>d_fault_inject_fini()</title>
<indexterm><primary>d_fault_inject_fini</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_inject_fini</secondary></indexterm>
<para><computeroutput>int d_fault_inject_fini (void )</computeroutput></para>
<para>Finalize the fault injection framework</para>

<para><formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga182aed02a7b0a3ce0b752e7237919e42"/>    <section>
    <title>d_fault_inject_init()</title>
<indexterm><primary>d_fault_inject_init</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_inject_init</secondary></indexterm>
<para><computeroutput>int d_fault_inject_init (void )</computeroutput></para>
<para>Initialize the fault injection framework, injection attributes are read from the config file</para>

<para><formalpara><title>Returns</title>

<para>DER_SUCCESS on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga2c7cc6156cd16166c03c38cfa5cddc96"/>    <section>
    <title>d_hash_murmur64()</title>
<indexterm><primary>d_hash_murmur64</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_murmur64</secondary></indexterm>
<para><computeroutput>uint64_t d_hash_murmur64 (const unsigned char * key, unsigned int key_len, unsigned int seed)</computeroutput></para>
<para>murmur hash (64 bits) </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga2570879d5c475f6d712867fc4c4968ec"/>    <section>
    <title>d_hash_rec_addref()</title>
<indexterm><primary>d_hash_rec_addref</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_addref</secondary></indexterm>
<para><computeroutput>void d_hash_rec_addref (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Increase the refcount of the record.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga77c35584d9b0de656aac8577718c55a0"/>    <section>
    <title>d_hash_rec_decref()</title>
<indexterm><primary>d_hash_rec_decref</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_decref</secondary></indexterm>
<para><computeroutput>void d_hash_rec_decref (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Decrease the refcount of the record. The record will be freed if hop_decref() returns true and the EPHEMERAL bit is set.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>Chain link of the hash record </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga8915efdfb9ad0e5d84fd46a8667330d6"/>    <section>
    <title>d_hash_rec_delete()</title>
<indexterm><primary>d_hash_rec_delete</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_delete</secondary></indexterm>
<para><computeroutput>bool d_hash_rec_delete (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, const void * key, unsigned int ksize)</computeroutput></para>
<para>Delete the record identified by <computeroutput>key</computeroutput> from the hash table.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key of the record being deleted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Item with <computeroutput>key</computeroutput> has been deleted </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>Can&apos;t find the record by <computeroutput>key</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gafa896651ee1a40232db21c4dd51d71a7"/>    <section>
    <title>d_hash_rec_delete_at()</title>
<indexterm><primary>d_hash_rec_delete_at</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_delete_at</secondary></indexterm>
<para><computeroutput>bool d_hash_rec_delete_at (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Delete the record linked by the chain <computeroutput>link</computeroutput>. This record will be freed if hop_rec_free() is defined and the hash table holds the last refcount.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Successfully deleted the record </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>The record has already been unlinked from the hash table </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga344ab0c00627d0bad617425f470621af"/>    <section>
    <title>d_hash_rec_evict()</title>
<indexterm><primary>d_hash_rec_evict</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_evict</secondary></indexterm>
<para><computeroutput>bool d_hash_rec_evict (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, const void * key, unsigned int ksize)</computeroutput></para>
<para>Evict the record identified by <computeroutput>key</computeroutput> from the hash table.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key of the record being evicted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Item with <computeroutput>key</computeroutput> has been evicted </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>Can&apos;t find the record by <computeroutput>key</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga0992c37d11e83dcc566529b54b38e8f5"/>    <section>
    <title>d_hash_rec_evict_at()</title>
<indexterm><primary>d_hash_rec_evict_at</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_evict_at</secondary></indexterm>
<para><computeroutput>bool d_hash_rec_evict_at (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Evict the record linked by the chain <computeroutput>link</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Item has been evicted </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>Not LRU feature </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga10b7638a5bc7e4b293948fa75a2a66ef"/>    <section>
    <title>d_hash_rec_find()</title>
<indexterm><primary>d_hash_rec_find</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_find</secondary></indexterm>
<para><computeroutput><link linkend="_structd__list__head">d_list_t</link>* d_hash_rec_find (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, const void * key, unsigned int ksize)</computeroutput></para>
<para>lookup <computeroutput>key</computeroutput> in the hash table, the found chain link is returned on success.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key to search </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>found chain link </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga7abb607ec215e45af17c503c56cebbb7"/>    <section>
    <title>d_hash_rec_find_insert()</title>
<indexterm><primary>d_hash_rec_find_insert</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_find_insert</secondary></indexterm>
<para><computeroutput><link linkend="_structd__list__head">d_list_t</link>* d_hash_rec_find_insert (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, const void * key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Lookup <computeroutput>key</computeroutput> in the hash table, if there is a matched record, it should be returned, otherwise <computeroutput>link</computeroutput> will be inserted into the hash table. In the later case, the returned link chain is the input <computeroutput>link</computeroutput>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key to be inserted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record being inserted</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>matched record </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa1681045f51ad2363a2fe385ebf0dcdc"/>    <section>
    <title>d_hash_rec_first()</title>
<indexterm><primary>d_hash_rec_first</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_first</secondary></indexterm>
<para><computeroutput><link linkend="_structd__list__head">d_list_t</link>* d_hash_rec_first (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable)</computeroutput></para>
<para>Return the first entry in a hash table. Do this by traversing the table, and returning the first link value provided to the callback. Returns link on success, or NULL on error or if the hash table is empty.</para>

<para>Note this does not take a reference on the returned entry and has no ordering semantics. It&apos;s main use is for draining a hash table before calling destroy()</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>link</entry>
                                <entry>
<para>Pointer to first element in hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>NULL</entry>
                                <entry>
<para>Hash table is empty or error occurred </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gafc850c30b7d6a6afbd7b9f78024ae3bf"/>    <section>
    <title>d_hash_rec_insert()</title>
<indexterm><primary>d_hash_rec_insert</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_insert</secondary></indexterm>
<para><computeroutput>int d_hash_rec_insert (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, const void * key, unsigned int ksize, <link linkend="_structd__list__head">d_list_t</link> * link, bool exclusive)</computeroutput></para>
<para>Insert a new key and its record chain <computeroutput>link</computeroutput> into the hash table. The hash table holds a refcount on the successfully inserted record, it releases the refcount while deleting the record.</para>

<para>If <computeroutput>exclusive</computeroutput> is true, it can succeed only if the key is unique, otherwise this function returns error.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>key</entry>
                                <entry>
<para>The key to be inserted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ksize</entry>
                                <entry>
<para>Size of the key </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record being inserted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>exclusive</entry>
                                <entry>
<para>The key has to be unique if it is true.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga5d57b45297cc1beb4c4f896162bbb9ec"/>    <section>
    <title>d_hash_rec_insert_anonym()</title>
<indexterm><primary>d_hash_rec_insert_anonym</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_insert_anonym</secondary></indexterm>
<para><computeroutput>int d_hash_rec_insert_anonym (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, <link linkend="_structd__list__head">d_list_t</link> * link, void * arg)</computeroutput></para>
<para>Insert an anonymous record (w/o key) into the hash table. This function calls hop_key_init() to generate a key for the new link under the protection of the hash table lock.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the hash record </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>Arguments for key generating</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gad0fadce9a2007688a5458aa3df935d86"/>    <section>
    <title>d_hash_rec_ndecref()</title>
<indexterm><primary>d_hash_rec_ndecref</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_ndecref</secondary></indexterm>
<para><computeroutput>int d_hash_rec_ndecref (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, int count, <link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Decrease the refcount of the record by count. The record will be freed if hop_decref() returns true.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>count</entry>
                                <entry>
<para>Number of references to drop </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>Chain link of the hash record</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>
<para>Success </para>
</entry>
                            </row>
                            <row>
                                <entry>-DER_INVAL</entry>
                                <entry>
<para>Not enough references were held. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gab86b9734aa3124fd5827f01471af325c"/>    <section>
    <title>d_hash_rec_unlinked()</title>
<indexterm><primary>d_hash_rec_unlinked</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_rec_unlinked</secondary></indexterm>
<para><computeroutput>bool d_hash_rec_unlinked (<link linkend="_structd__list__head">d_list_t</link> * link)</computeroutput></para>
<para>Check if the link chain has already been unlinked from the hash table.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>link</entry>
                                <entry>
<para>The link chain of the record</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>true</entry>
                                <entry>
<para>Yes </para>
</entry>
                            </row>
                            <row>
                                <entry>false</entry>
                                <entry>
<para>No </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1gad7d4719a0c239e232241d3b8c68142f6"/>    <section>
    <title>d_hash_srch_u64()</title>
<indexterm><primary>d_hash_srch_u64</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_srch_u64</secondary></indexterm>
<para><computeroutput>unsigned int d_hash_srch_u64 (uint64_t * hashes, unsigned int nhashes, uint64_t value)</computeroutput></para>
<para>consistent hash search </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga62656b843dd5da76cef0519aa1f29a73"/>    <section>
    <title>d_hash_string_u32()</title>
<indexterm><primary>d_hash_string_u32</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_string_u32</secondary></indexterm>
<para><computeroutput>uint32_t d_hash_string_u32 (const char * string, unsigned int len)</computeroutput></para>
<para>djb2 hash a string to a uint32_t value </para>
    </section><anchor xml:id="_group___g_u_r_t_1gaab6c454523831e5f035a7bb9f4fe2b79"/>    <section>
    <title>d_hash_table_create()</title>
<indexterm><primary>d_hash_table_create</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_create</secondary></indexterm>
<para><computeroutput>int d_hash_table_create (uint32_t feats, uint32_t bits, void * priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> * hops, struct <link linkend="_structd__hash__table">d_hash_table</link> ** htable_pp)</computeroutput></para>
<para>Create a new hash table.</para>

<para><note><title>Note</title>

<para>Please be careful while using rwlock and refcount at the same time, see <link linkend="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876">d_hash_feats</link> for the details.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>feats</entry>
                                <entry>
<para>Feature bits, see D_HASH_FT_* </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>bits</entry>
                                <entry>
<para>power2(bits) is the size of hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>priv</entry>
                                <entry>
<para>Private data for the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>hops</entry>
                                <entry>
<para>Customized member functions </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>htable_pp</entry>
                                <entry>
<para>The newly created hash table</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa094440248a5ffcc0b0f56bc39a473b4"/>    <section>
    <title>d_hash_table_create_inplace()</title>
<indexterm><primary>d_hash_table_create_inplace</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_create_inplace</secondary></indexterm>
<para><computeroutput>int d_hash_table_create_inplace (uint32_t feats, uint32_t bits, void * priv, <link linkend="_structd__hash__table__ops__t">d_hash_table_ops_t</link> * hops, struct <link linkend="_structd__hash__table">d_hash_table</link> * htable)</computeroutput></para>
<para>Initialize an inplace hash table.</para>

<para>Does not allocate the htable pointer itself</para>

<para><note><title>Note</title>

<para>Please be careful while using rwlock and refcount at the same time, see <link linkend="_group___g_u_r_t_1gacd5b06eabed93698ee5a62e674e80876">d_hash_feats</link> for the details.</para>
</note>

                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>feats</entry>
                                <entry>
<para>Feature bits, see D_HASH_FT_* </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>bits</entry>
                                <entry>
<para>power2(bits) is the size of hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>priv</entry>
                                <entry>
<para>Private data for the hash table </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>hops</entry>
                                <entry>
<para>Customized member functions </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Hash table to be initialized</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on success, negative value on error </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaf04c1d22e7af22d809a5ea4b011239d7"/>    <section>
    <title>d_hash_table_debug()</title>
<indexterm><primary>d_hash_table_debug</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_debug</secondary></indexterm>
<para><computeroutput>void d_hash_table_debug (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable)</computeroutput></para>
<para>If debugging is enabled, prints stats about the hash table</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>Pointer to the hash table </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga5f7c7ef5790fb0f7db96e2d91e032282"/>    <section>
    <title>d_hash_table_destroy()</title>
<indexterm><primary>d_hash_table_destroy</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_destroy</secondary></indexterm>
<para><computeroutput>int d_hash_table_destroy (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, bool force)</computeroutput></para>
<para>Destroy a hash table.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>The hash table to be destroyed. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>force</entry>
                                <entry>
<para>true: Destroy the hash table even it is not empty, all pending items will be deleted. false: Destroy the hash table only if it is empty, otherwise returns error</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga4e7e2ce7ed7a784d17893b8a1d23a4d1"/>    <section>
    <title>d_hash_table_destroy_inplace()</title>
<indexterm><primary>d_hash_table_destroy_inplace</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_destroy_inplace</secondary></indexterm>
<para><computeroutput>int d_hash_table_destroy_inplace (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, bool force)</computeroutput></para>
<para>Finalize a hash table, reset all struct members.</para>

<para>Note this does NOT free htable itself - only the members it contains.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>The hash table to be finalized. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>force</entry>
                                <entry>
<para>true: Finalize the hash table even it is not empty, all pending items will be deleted. false: Finalize the hash table only if it is empty, otherwise returns error</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1ga662ba75358be3d41a640801f5545b235"/>    <section>
    <title>d_hash_table_traverse()</title>
<indexterm><primary>d_hash_table_traverse</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hash_table_traverse</secondary></indexterm>
<para><computeroutput>int d_hash_table_traverse (struct <link linkend="_structd__hash__table">d_hash_table</link> * htable, d_hash_traverse_cb_t cb, void * arg)</computeroutput></para>
<para>Traverse a hash table, call the traverse callback function on every item. Break once the callback returns non-zero.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>htable</entry>
                                <entry>
<para>The hash table to be finalized. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cb</entry>
                                <entry>
<para>Traverse callback, will be called on every item in the hash table. See <emphasis>d_hash_traverse_cb_t</emphasis>. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>arg</entry>
                                <entry>
<para>Arguments for the callback.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>zero on success, negative value if error. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___g_u_r_t_1gaa6586c2648a421f7a1ac3d381bdf104e"/>    <section>
    <title>d_hhash_create()</title>
<indexterm><primary>d_hhash_create</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hhash_create</secondary></indexterm>
<para><computeroutput>int d_hhash_create (uint32_t feats, uint32_t bits, struct d_hhash ** hhash)</computeroutput></para>
<para>internal definition </para>
    </section><anchor xml:id="_group___g_u_r_t_1ga42d2057df12dfdb86b184fb078f8c638"/>    <section>
    <title>d_hhash_link_insert()</title>
<indexterm><primary>d_hhash_link_insert</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_hhash_link_insert</secondary></indexterm>
<para><computeroutput>void d_hhash_link_insert (struct d_hhash * hhash, struct <link linkend="_structd__hlink">d_hlink</link> * hlink, int type)</computeroutput></para>
<para>Insert to handle hash table. If <emphasis>type</emphasis> is D_HTYPE_PTR, user MUST ensure the bit 0 of <emphasis>hlink</emphasis> pointer is zero. Assuming zero value of bit 0 of the pointer is reasonable portable. It is with undefined result if bit 0 of <emphasis>hlink</emphasis> pointer is 1 for D_HTYPE_PTR type. </para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_group___g_u_r_t_1ga1943703feab4688ad9aceb23187f0d89"/>    <section>
    <title>d_fault_inject</title>
<indexterm><primary>d_fault_inject</primary><secondary>GURT</secondary></indexterm>
<indexterm><primary>GURT</primary><secondary>d_fault_inject</secondary></indexterm>
<para><computeroutput>unsigned int d_fault_inject</computeroutput></para>
<para>global on/off switch for fault injection </para>
</section>
</section>
</section>
