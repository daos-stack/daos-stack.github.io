<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_list_8h">
<title>src/include/gurt/list.h File Reference</title>
<indexterm><primary>src/include/gurt/list.h</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structd__list__head">d_list_head</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlist__node">d_hlist_node</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structd__hlist__head">d_hlist_head</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <emphasis role="strong">prefetch</emphasis>(a)   ((void)a)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_LIST_HEAD_INIT</emphasis>(name)   { &amp;(name), &amp;(name) }</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_LIST_HEAD</emphasis>(name)   <link linkend="_structd__list__head">d_list_t</link> name = D_LIST_HEAD_INIT(name)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_INIT_LIST_HEAD</emphasis>(ptr)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(ptr,  type,  member)   ((type *)((char *)(ptr)-(char *)(&amp;((type *)0)-&gt;member)))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_pop_entry</emphasis>(list,  type,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga646c9addf4d7bb0b64c63c72a59fd132">d_list_for_each</link>(pos,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga45aa34109093aab64857c8025c702b67">d_list_for_each_safe</link>(pos,  n,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gae0371a8e24e668439ec83522ade5e6a6">d_list_for_each_entry_continue</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">NULL_P</emphasis>   ((void *)0)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_HLIST_HEAD_INIT</emphasis>   { NULL_P }</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_HLIST_HEAD</emphasis>(name)   <link linkend="_structd__hlist__head">d_hlist_head_t</link> name = { NULL_P }</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_INIT_HLIST_HEAD</emphasis>(ptr)   ((ptr)-&gt;first = NULL_P)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_INIT_HLIST_NODE</emphasis>(ptr)   ((ptr)-&gt;next = NULL_P, (ptr)-&gt;pprev = NULL_P)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_hlist_entry</emphasis>(ptr,  type,  member)   <link linkend="_group___g_u_r_t_1ga34d7d433e0b1a6aca3bd3c824e9fde45">d_list_entry</link>(ptr, type, member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each</emphasis>(pos,  head)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_safe</emphasis>(pos,  n,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga520bec87737598f78cb2bfd8dcf40686">dhlist_for_each_entry</link>(tpos,  pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga0df41ae219f031fcc70e602017f8156c">dhlist_for_each_entry_continue</link>(tpos,  pos,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gaf340b16c98bc064b6a6e7dbee8f46317">dhlist_for_each_entry_from</link>(tpos,  pos,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga949806d66413176355fed5ad214c358e">dhlist_for_each_entry_safe</link>(tpos,  pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga09528e312a7c715ae6b9c8984fbfff64">d_list_for_each_prev</link>(pos,  head)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34327b4006e84e4ea261a6336c3b4402">d_list_for_each_entry</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_rcu</emphasis>(pos,  head,  member)   list_for_each_entry(pos, head, member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga8a3aff8d49884a34787d7bef6c226ff4">d_list_for_each_entry_reverse</link>(pos,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gab381fc0ae62abcf4bbc8b87f50791149">d_list_for_each_entry_safe</link>(pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1gaf1b0e7f3b719ad0d9eaf1cfb4f57ca9b">d_list_for_each_entry_safe_from</link>(pos,  n,  head,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_typed</emphasis>(pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_reverse_typed</emphasis>(pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_safe_typed</emphasis>(pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_list_for_each_entry_safe_from_typed</emphasis>(pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_entry_typed</emphasis>(tpos,  pos,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">dhlist_for_each_entry_safe_typed</emphasis>(tpos,  pos,  n,  head,  type,  member)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___g_u_r_t_1ga34aa0d92c161020b963a2033a064bc33">D_CIRCLEQ_HEAD</link>(name,  type)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_HEAD_INIT</emphasis>(head)   { (void *)&amp;head, (void *)&amp;head }</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">d_circleq_entry</emphasis>(type)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INIT</emphasis>(head)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_AFTER</emphasis>(head,  listelm,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_BEFORE</emphasis>(head,  listelm,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_HEAD</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_INSERT_TAIL</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_REMOVE</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_FOREACH</emphasis>(var,  head,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_FOREACH_REVERSE</emphasis>(var,  head,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_EMPTY</emphasis>(head)   ((head)-&gt;cqh_first == (void *)(head))</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_FIRST</emphasis>(head)   ((head)-&gt;cqh_first)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_LAST</emphasis>(head)   ((head)-&gt;cqh_last)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_NEXT</emphasis>(elm,  field)   ((elm)-&gt;field.cqe_next)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_PREV</emphasis>(elm,  field)   ((elm)-&gt;field.cqe_prev)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_LOOP_NEXT</emphasis>(head,  elm,  field)</para>
</listitem>
            <listitem><para>#define <emphasis role="strong">D_CIRCLEQ_LOOP_PREV</emphasis>(head,  elm,  field)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef struct <link linkend="_structd__list__head">d_list_head</link> <emphasis role="strong">d_list_t</emphasis></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structd__hlist__node">d_hlist_node</link> <emphasis role="strong">d_hlist_node_t</emphasis></para>
</listitem>
            <listitem><para>typedef struct <link linkend="_structd__hlist__head">d_hlist_head</link> <emphasis role="strong">d_hlist_head_t</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Simple doubly linked list implementation.</para>

<para>Some of the internal functions (&quot;__xxx&quot;) are useful when manipulating whole lists rather than single entries, as sometimes we already know the next/prev entries and we can generate better code by using them directly rather than using the generic single-entry routines. </para>
</section>
</section>
