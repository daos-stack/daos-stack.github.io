.\" (C) Copyright 2017-2018 Intel Corporation.
.\"
.\" Licensed under the Apache License, Version 2.0 (the "License");
.\" you may not use this file except in compliance with the License.
.\" You may obtain a copy of the License at
.\"
.\"    http://www.apache.org/licenses/LICENSE-2.0
.\"
.\" Unless required by applicable law or agreed to in writing, software
.\" distributed under the License is distributed on an "AS IS" BASIS,
.\" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.\" See the License for the specific language governing permissions and
.\" limitations under the License.
.\"
.\" GOVERNMENT LICENSE RIGHTS-OPEN SOURCE SOFTWARE
.\" The Government's rights to use, modify, reproduce, release, perform, display,
.\" or disclose this software are subject to the terms of the Apache License as
.\" provided in Contract No. B609815.
.\" Any reproduction of computer software, computer software documentation, or
.\" portions thereof marked with this legend must also reproduce the markings.
.\"
.TH daos_pool_create 3 2017-07-18 "0.0.1" "DAOS Client API"
.SH NAME
daos_pool_create \- create a DAOS pool
.SH SYNOPSIS
.nf
.B #include <daos_api.h>
.sp
.BI "int daos_pool_create(unsigned int "mode ", unsigned int "uid ",
.BI "	unsigned int "gid ", const char * "grp ",
.BI "	const daos_rank_list_t * "tgts ", const char * "dev ",
.BI "	daos_size_t "scm_size ", daos_size_t "nvme_size ",
.BI "	daos_rank_list_t * "svc ", uuid_t "uuid ", daos_event_t * "ev);
.fi
.SH DESCRIPTION
The function
.BR daos_pool_create ()
creates a DAOS pool where a pool is an aggregation of storage targets.  The
.I mode
identifies traditional user/group/other ownership bits. The
.I uid
parameter specifies the pool owner's uid. The
.I gid
specifies the pool's group membership.  Process set name of the DAOS servers
managing the pool is given by
.I grp
.  Optional parameter
.I tgts
will allocate targets on this list of ranks.  If set to NULL, the pool will be created over all the ranks available in the service group.  String
.I dev
identifies the target devices to use.  While
.I scm_size
and
.I nvme_size
specifies the maximum amount of SCM and NVMe storage space the targets can consume
in bytes. Passing 0 to SCM storage size  will use the minimal supported target size.  The
.I svc
parameter indicates the servers where the pool is located.  This is both
an in and out parameter.
.I uuid
is the identifier for the pool; this is an out parameter.  The completion
event
.I ev
is optional and can be NULL.  If NULL, pool creation will by synchronous.
.SH RETURN VALUE
The function
.BR daos_init ()
returns zero on success or an error number upon error.
.SH ERRORS
.TP
TBD
.SH CONFORMING TO
TBD
.SH SEE ALSO
TBD
.SH COLOPHON
This page is part of release 0.0.1 of the Distributed Asynchronous
Object Storage (DAOS) exascale storage project. The project git reposity
can be found at:
\%https://github.com/daos-stack/daos.git
Bugs can be reported at:
\%https://jira.hpdd.intel.com/projects/DAOS/.
