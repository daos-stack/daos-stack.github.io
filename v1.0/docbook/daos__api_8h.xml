<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_daos__api_8h">
<title>src/include/daos_api.h File Reference</title>
<indexterm><primary>src/include/daos_api.h</primary></indexterm>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum { <link linkend="_daos__api_8h_1a06fc87d81c62e9abb8790b6e5713c55baeca54c80ace170328bff03179c070de7">DAOS_TF_RDONLY</link> = (1 &lt;&lt; 0), 
<link linkend="_daos__api_8h_1a06fc87d81c62e9abb8790b6e5713c55baec4d2d2d242c35e0e858fb2a5dad6e15">DAOS_TF_ZERO_COPY</link> = (1 &lt;&lt; 1)
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>d_rank_list_t * <link linkend="_daos__api_8h_1abc4655c8429eff6b7a5637027ec3dbb2">daos_rank_list_parse</link> (const char *str, const char *sep)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1a85fc0f9f93c742cfa39b65ac71c9ec07">daos_tx_open</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__handle__t">daos_handle_t</link> *th, uint64_t flags, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1a4cb7e867cfd999985945c5d5e4fedac3">daos_tx_commit</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1aeeed38f424e4808a8343899d650339b3">daos_tx_open_snap</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, daos_epoch_t epoch, <link linkend="_structdaos__handle__t">daos_handle_t</link> *th, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1a40cf0b9f0976d3173d55b2bce33a91f8">daos_tx_abort</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1acc1b2d05cbf0cb9ed6a4dc843d97fb82">daos_tx_close</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1abcc4cc9d5c82aae3be3a3076bcb7e9e1">daos_tx_restart</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_daos__api_8h_1a3a50870fb708e8044d112a8ec7af5100">daos_tx_hdl2epoch</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_epoch_t *epoch)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>DAOS API methods </para>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_daos__api_8h_1a06fc87d81c62e9abb8790b6e5713c55b"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>Flags for daos_tx_open </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_TF_RDONLY</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>DAOS_TF_RDONLY</secondary></indexterm>
<anchor xml:id="_daos__api_8h_1a06fc87d81c62e9abb8790b6e5713c55baeca54c80ace170328bff03179c070de7"/>DAOS_TF_RDONLY</entry><entry>
<para>The transaction is read only. </para>
</entry></row><row><entry><indexterm><primary>DAOS_TF_ZERO_COPY</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>DAOS_TF_ZERO_COPY</secondary></indexterm>
<anchor xml:id="_daos__api_8h_1a06fc87d81c62e9abb8790b6e5713c55baec4d2d2d242c35e0e858fb2a5dad6e15"/>DAOS_TF_ZERO_COPY</entry><entry>
<para>Do not copy caller data buffers during modifications associated with the transaction. The buffers must remain unchanged until the daos_tx_commit operation for the transaction completes.</para>

<para>Key buffers are always copied, regardless of this flag. They can be released or repurposed after corresponding operations complete. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 20 of file daos_api.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_daos__api_8h_1abc4655c8429eff6b7a5637027ec3dbb2"/>    <section>
    <title>daos_rank_list_parse()</title>
<indexterm><primary>daos_rank_list_parse</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_rank_list_parse</secondary></indexterm>
<para><computeroutput>d_rank_list_t* daos_rank_list_parse (const char * str, const char * sep)</computeroutput></para>
<para>Generate a rank list from a string with a separator argument. This is a convenience function to generate the rank list required by daos_pool_connect().</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>str</entry>
                                <entry>
<para>string with the rank list </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sep</entry>
                                <entry>
<para>separator of the ranks in <emphasis>str</emphasis>. dmg uses &quot;:&quot; as the separator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>allocated rank list that user is responsible to free with d_rank_list_free(). </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1a40cf0b9f0976d3173d55b2bce33a91f8"/>    <section>
    <title>daos_tx_abort()</title>
<indexterm><primary>daos_tx_abort</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_abort</secondary></indexterm>
<para><computeroutput>int daos_tx_abort (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Abort all modifications on the transaction. The transaction handle cannot be used for any new IO.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle to abort. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1acc1b2d05cbf0cb9ed6a4dc843d97fb82"/>    <section>
    <title>daos_tx_close()</title>
<indexterm><primary>daos_tx_close</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_close</secondary></indexterm>
<para><computeroutput>int daos_tx_close (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Close the transaction handle. This is a local operation, no RPC involved.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle to free. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1a4cb7e867cfd999985945c5d5e4fedac3"/>    <section>
    <title>daos_tx_commit()</title>
<indexterm><primary>daos_tx_commit</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_commit</secondary></indexterm>
<para><computeroutput>int daos_tx_commit (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Commit the transaction. If the operation succeeds, the transaction handle cannot be used for any new IO. If -DER_TX_RESTART is returned, the caller needs to restart the transaction with the same transaction handle, by calling daos_tx_restart, re-executing the caller code for this transaction, and calling daos_tx_commit again.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle to commit. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. Possible error values include: -DER_NO_HDL invalid transaction handle. -DER_INVAL Invalid parameter -DER_TX_RESTART transaction needs to restart (e.g., due to conflicts). </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1a3a50870fb708e8044d112a8ec7af5100"/>    <section>
    <title>daos_tx_hdl2epoch()</title>
<indexterm><primary>daos_tx_hdl2epoch</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_hdl2epoch</secondary></indexterm>
<para><computeroutput>int daos_tx_hdl2epoch (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_epoch_t * epoch)</computeroutput></para>
<para>Return the epoch associated with the transaction handle. An epoch may not be available at the beginning of the transaction, but one shall be available after the transaction successfully commits.</para>

<para>This function is specific to the current implementation. It should only be used for testing and debugging purposes.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>epoch</entry>
                                <entry>
<para>Returned epoch value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>

                <formalpara>
                    <title>
Return values                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>-DER_UNINIT</entry>
                                <entry>
<para>An epoch is not available yet. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_daos__api_8h_1a85fc0f9f93c742cfa39b65ac71c9ec07"/>    <section>
    <title>daos_tx_open()</title>
<indexterm><primary>daos_tx_open</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_open</secondary></indexterm>
<para><computeroutput>int daos_tx_open (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__handle__t">daos_handle_t</link> * th, uint64_t flags, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Open a transaction on a container handle. The resulting transaction handle can be used for IOs in this container that need to be committed transactionally.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>th</entry>
                                <entry>
<para>Returned transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Transaction flags (DAOS_TF_RDONLY, etc.). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1aeeed38f424e4808a8343899d650339b3"/>    <section>
    <title>daos_tx_open_snap()</title>
<indexterm><primary>daos_tx_open_snap</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_open_snap</secondary></indexterm>
<para><computeroutput>int daos_tx_open_snap (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, daos_epoch_t epoch, <link linkend="_structdaos__handle__t">daos_handle_t</link> * th, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Create a read-only transaction from a snapshot. This does not create the snapshot, but only a read transaction to be able to read from a snapshot created with daos_cont_create_snap. If the user passes an epoch that is not snapshoted, or the snapshot was deleted, reads using that transaction may get undefined results.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>epoch</entry>
                                <entry>
<para>Epoch of snapshot to read from. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>th</entry>
                                <entry>
<para>Returned read only transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>
</para>
    </section><anchor xml:id="_daos__api_8h_1abcc4cc9d5c82aae3be3a3076bcb7e9e1"/>    <section>
    <title>daos_tx_restart()</title>
<indexterm><primary>daos_tx_restart</primary><secondary>daos_api.h</secondary></indexterm>
<indexterm><primary>daos_api.h</primary><secondary>daos_tx_restart</secondary></indexterm>
<para><computeroutput>int daos_tx_restart (<link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__event">daos_event_t</link> * ev)</computeroutput></para>
<para>Restart the transaction after encountering a -DER_TX_RESTART error. This drops all the IOs that have been issued via the transaction handle. Whether the restarted transaction observes any conflicting modifications committed after this transaction was originally opened is undefined. If callers would like to retry transactions for their own purposes, they shall open new transactions instead. This is a local operation, no RPC involved.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle to be restarted. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if Success, negative if failed. </para>
</formalpara>
</para>
</section>
</section>
</section>
