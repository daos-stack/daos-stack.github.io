{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Distributed Asynchronous Object Storage (DAOS) is an open-source object store designed from the ground up for massively distributed Non Volatile Memory (NVM). DAOS takes advantage of next-generation NVM technology, like Storage Class Memory (SCM) and NVM express (NVMe), while presenting a key-value storage interface on top of commodity hardware that provides features, such as, transactional non-blocking I/O, advanced data protection with self-healing, end-to-end data integrity, fine-grained data control, and elastic storage, to optimize performance and cost. The included document versions are associated with DAOS v1.0, and may also describe features that are currently under development for the next DAOS release. Refer to the following documentation for architecture and description: Document Description DAOS Overview Terminology, Storage, Transaction, Fault and the Security models are presented. Administration Guide System administration topics are covered in the Administration Guide. User Guide Documentation for users including the different interfaces that are supported. Developer Guide Overview of the DAOS internal code structure and major algorithms for DAOS developers. Community Wiki This is the main community repository for DAOS information. Links to discover, use and contribute to DAOS are available from this page. Community Roadmap The DAOS development roadmap is found here. Note that the information contained on the roadmap may change at any time.","title":"Home"},{"location":"debugging/","text":"DAOS Debugging \u00b6 DAOS uses the debug system defined in CaRT but more specifically the GURT library. The default server log is /tmp/daos.log and the default client log is stdout , unless otherwise set by D_LOG_FILE . Registered Subsystems/Facilities \u00b6 The debug logging system includes a series of subsystems or facilities which define groups for related log messages (defined per source file). There are common facilities which are defined in GURT, as well as other facilities that can be defined on a per-project basis (such as those for CaRT and DAOS). DD_SUBSYS can be used to set which subsystems to enable logging for. By default all subsystems are enabled ( DD_SUBSYS=all ). - DAOS Facilities: [common, tree, vos, client, server, rdb, pool, container, object, placement, rebuild, tier, mgmt, eio, tests] - Common Facilities (GURT): [MISC, MEM] - CaRT Facilities: [RPC, BULK, CORPC, GRP, LM, HG, ST, IV] Priority Logging \u00b6 All macros which output logs have a priority level, shown in descending order below. - D_FATAL(fmt, ...) FATAL - D_CRIT(fmt, ...) CRIT - D_ERROR(fmt, ...) ERR - D_WARN(fmt, ...) WARN - D_NOTE(fmt, ...) NOTE - D_INFO(fmt, ...) INFO - D_DEBUG(mask, fmt, ...) DEBUG The priority level that outputs to stderr can be set with DD_STDERR . By default in DAOS (specific to project), this is set to CRIT ( DD_STDERR=CRIT ) meaning that all CRIT and more severe log messages will dump to stderr. This however is separate from the priority of logging to /tmp/daos.log . The priority level of logging can be set with D_LOG_MASK , which by default is set to INFO ( D_LOG_MASK=INFO ), which will result in all messages excluding DEBUG messages being logged. D_LOG_MASK can also be used to specify the level of logging on a per-subsystem basis as well ( D_LOG_MASK=\"DEBUG,MEM=ERR\" ). Debug Masks/Streams: \u00b6 DEBUG messages account for a majority of the log messages, and finer-granularity might be desired. Mask bits are set as the first argument passed in D_DEBUG(mask, ...). In order to accomplish this, DD_MASK can be set to enable different debug streams. Similar to facilities, there are common debug streams defined in GURT, as well as other streams that can defined on a per-project basis (CaRT and DAOS). All debug streams are enabled by default ( DD_MASK=all ). - DAOS Debug Masks: - md = metadata operations - pl = placement operations - mgmt = pool management - epc = epoch system - df = durable format - rebuild = rebuild process - daos_default = (group mask) io, md, pl, and rebuild operations - Common Debug Masks (GURT): - any = generic messages, no classification - trace = function trace, tree/hash/lru operations - mem = memory operations - net = network operations - io = object I/O - test = test programs Common Use Cases \u00b6 Generic setup for all messages (default settings) $ export D_LOG_MASK=DEBUG $ export DD_SUBSYS=all $ export DD_MASK=all Disable all logs for performance tuning $ export D_LOG_MASK=ERR # -> will only log error messages from all facilities $ export D_LOG_MASK=FATAL # -> will only log system fatal messages Disable a noisy debug logging subsystem $ export D_LOG_MASK=DEBUG,MEM=ERR # -> disables MEM facility by restricting all logs # from that facility to ERROR or higher priority only Enable a subset of facilities of interest $ export DD_SUBSYS=rpc,tests $ export D_LOG_MASK=DEBUG # -> required to see logs for RPC and TESTS less severe # than INFO (majority of log messages) Fine-tune the debug messages by setting a debug mask $ export D_LOG_MASK=DEBUG $ export DD_MASK=mgmt # -> only logs DEBUG messages related to pool management See the DAOS Environment Variables documentation for more info about debug system environment.","title":"DAOS Debugging"},{"location":"debugging/#daos-debugging","text":"DAOS uses the debug system defined in CaRT but more specifically the GURT library. The default server log is /tmp/daos.log and the default client log is stdout , unless otherwise set by D_LOG_FILE .","title":"DAOS Debugging"},{"location":"debugging/#registered-subsystemsfacilities","text":"The debug logging system includes a series of subsystems or facilities which define groups for related log messages (defined per source file). There are common facilities which are defined in GURT, as well as other facilities that can be defined on a per-project basis (such as those for CaRT and DAOS). DD_SUBSYS can be used to set which subsystems to enable logging for. By default all subsystems are enabled ( DD_SUBSYS=all ). - DAOS Facilities: [common, tree, vos, client, server, rdb, pool, container, object, placement, rebuild, tier, mgmt, eio, tests] - Common Facilities (GURT): [MISC, MEM] - CaRT Facilities: [RPC, BULK, CORPC, GRP, LM, HG, ST, IV]","title":"Registered Subsystems/Facilities"},{"location":"debugging/#priority-logging","text":"All macros which output logs have a priority level, shown in descending order below. - D_FATAL(fmt, ...) FATAL - D_CRIT(fmt, ...) CRIT - D_ERROR(fmt, ...) ERR - D_WARN(fmt, ...) WARN - D_NOTE(fmt, ...) NOTE - D_INFO(fmt, ...) INFO - D_DEBUG(mask, fmt, ...) DEBUG The priority level that outputs to stderr can be set with DD_STDERR . By default in DAOS (specific to project), this is set to CRIT ( DD_STDERR=CRIT ) meaning that all CRIT and more severe log messages will dump to stderr. This however is separate from the priority of logging to /tmp/daos.log . The priority level of logging can be set with D_LOG_MASK , which by default is set to INFO ( D_LOG_MASK=INFO ), which will result in all messages excluding DEBUG messages being logged. D_LOG_MASK can also be used to specify the level of logging on a per-subsystem basis as well ( D_LOG_MASK=\"DEBUG,MEM=ERR\" ).","title":"Priority Logging"},{"location":"debugging/#debug-masksstreams","text":"DEBUG messages account for a majority of the log messages, and finer-granularity might be desired. Mask bits are set as the first argument passed in D_DEBUG(mask, ...). In order to accomplish this, DD_MASK can be set to enable different debug streams. Similar to facilities, there are common debug streams defined in GURT, as well as other streams that can defined on a per-project basis (CaRT and DAOS). All debug streams are enabled by default ( DD_MASK=all ). - DAOS Debug Masks: - md = metadata operations - pl = placement operations - mgmt = pool management - epc = epoch system - df = durable format - rebuild = rebuild process - daos_default = (group mask) io, md, pl, and rebuild operations - Common Debug Masks (GURT): - any = generic messages, no classification - trace = function trace, tree/hash/lru operations - mem = memory operations - net = network operations - io = object I/O - test = test programs","title":"Debug Masks/Streams:"},{"location":"debugging/#common-use-cases","text":"Generic setup for all messages (default settings) $ export D_LOG_MASK=DEBUG $ export DD_SUBSYS=all $ export DD_MASK=all Disable all logs for performance tuning $ export D_LOG_MASK=ERR # -> will only log error messages from all facilities $ export D_LOG_MASK=FATAL # -> will only log system fatal messages Disable a noisy debug logging subsystem $ export D_LOG_MASK=DEBUG,MEM=ERR # -> disables MEM facility by restricting all logs # from that facility to ERROR or higher priority only Enable a subset of facilities of interest $ export DD_SUBSYS=rpc,tests $ export D_LOG_MASK=DEBUG # -> required to see logs for RPC and TESTS less severe # than INFO (majority of log messages) Fine-tune the debug messages by setting a debug mask $ export D_LOG_MASK=DEBUG $ export DD_MASK=mgmt # -> only logs DEBUG messages related to pool management See the DAOS Environment Variables documentation for more info about debug system environment.","title":"Common Use Cases"},{"location":"admin/","text":"DAOS Administrator Guide \u00b6","title":"DAOS Administrator Guide"},{"location":"admin/#daos-administrator-guide","text":"","title":"DAOS Administrator Guide"},{"location":"admin/administration/","text":"DAOS System Administration \u00b6 System Monitoring \u00b6 System monitoring and telemetry data will be provided as part of the control plane and will be documented in a future revision. Storage Operations \u00b6 Per-Storage-Server Space Utilization \u00b6 To query SCM and NVMe storage space usage and show how much space is available to create new DAOS pools with, run the following command: bash-4.2$ dmg storage query usage Hosts SCM-Total SCM-Free SCM-Used NVMe-Total NVMe-Free NVMe-Used ----- --------- -------- -------- ---------- --------- --------- wolf-71 6.4 TB 2.0 TB 68 % 1.5 TB 1.1 TB 27 % wolf-72 6.4 TB 2.0 TB 68 % 1.5 TB 1.1 TB 27 % The command output shows online DAOS storage utilization, only including storage statistics for devices that have been formatted by DAOS control-plane and assigned to a currently running rank of the DAOS system. This represents the storage that can host DAOS pools. Note that the table values are per-host (storage server) and SCM/NVMe capacity pool component values specified in dmg pool create are per rank. If multiple ranks (I/O processes) have been configured per host in the server configuration file daos_server.yml then the values supplied to dmg pool create should be a maximum of the SCM/NVMe free space divided by the number of ranks per host. For example if 2.0 TB SCM and 10.0 TB NVMe free space is reported by dmg storage query usage and the server configuration file used to start the system specifies 2 I/O processes (2 \"server\" sections), the maximum pool size that can be specified is approximately dmg pool create -s 1T -n 5T (may need to specify slightly below the maximum to take account of negligible metadata overhead). NVMe SSD Health Monitoring \u00b6 Useful admin dmg commands to query NVMe SSD health: Query Per-Server Metadata: dmg storage query (list-devices|list-pools) dmg storage scan --nvme-meta shows mapping of metadata to NVMe controllers Queries persistently stored device and pool metadata tables. The device table maps the internal device UUID to attached VOS target IDs. The rank number of the server where the device is located is also listed, along with the current device state. The available device states are the following: - NORMAL: a fully, functional device in-use by DAOS - EVICTED: the device is no longer in-use by DAOS - UNPLUGGED: the device is currently unplugged from the system (may or not be evicted) - NEW: the device is plugged and available, and not currently in-use by DAOS The pool table maps the DAOS pool UUID to attached VOS target IDs, and will list all of the server ranks that the pool is distributed on. With the additional --verbose flag, the mapping of SPDK blob IDs to VOS target IDs is also displayed. $ dmg -l boro-11,boro-13 storage query list-devices ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[0 2] Rank:0 State:NORMAL UUID:80c9f1be-84b9-4318-a1be-c416c96ca48b Targets:[1 3] Rank:0 State:FAULTY UUID:051b77e4-1524-4662-9f32-f8e4d2542c2d Targets:[] Rank:0 State:NEW UUID:81905b24-be44-4106-8ff9-03002e9dd86a Targets:[0 2] Rank:1 State:UNPLUGGED UUID:2ccb8afb-5d32-454e-86e3-762ec5dca7be Targets:[1 3] Rank:1 State:NORMAL UUID:3f08da48-d88d-42dc-bca5-d1ab8419a401 Targets:[] Rank:1 State:NEW $ dmg -l boro-11,boro-13 storage query list-pools ------- boro-11 ------- Pools UUID:08d6839b-c71a-4af6-901c-28e141b2b429 Rank:0 Targets:[0 1 2 3] Rank:1 Targets:[0 1 2 3] $ dmg -l boro-11,boro-13 storage query list-pools --verbose ------- boro-11 ------- Pools UUID:08d6839b-c71a-4af6-901c-28e141b2b429 Rank:0 Targets:[0 1 2 3] Blobs:[4294967404 4294967405 4294967407 4294967406] Rank:1 Targets:[0 1 2 3] Blobs:[4294967410 4294967411 4294967413 4294967412] Query Storage Device Health Data: dmg storage query (device-health|target-health) dmg storage scan --nvme-health shows NVMe controller health stats Queries device health data, including NVMe SSD health stats and in-memory I/O error and checksum error counters. The server rank and device state are also listed. The device health data can either be queried by device UUID (device-health) or by VOS target ID along with server rank (target-health). The same device health info is displayed with both command options. $ dmg -l boro-11 storage query device-health --uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 or $ dmg -l boro-11 storage query target-health --rank=0 --tgtid=0 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[0 1 2 3] Rank:0 State:NORMAL Health Stats: Temperature:289K(15C) Controller Busy Time:0s Power Cycles:0 Power On Duration:0s Unsafe Shutdowns:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK NVMe SSD Eviction and Hotplug \u00b6 Manually Evict an NVMe SSD: dmg storage set nvme-faulty To manually evict an NVMe SSD (auto eviction will be supported in a future release), the device state needs to be set to \"FAULTY\" by running the following command: $ dmg -l boro-11 storage set nvme-faulty --uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[] Rank:1 State:FAULTY The device state will transition from \"NORMAL\" to \"FAULTY\" (shown above), which will trigger the faulty device reaction (all targets on the SSD will be rebuilt and the SSD will remain evicted until device replacement occurs). Replace an Evicted SSD with a New Device: dmg storage replace nvme To replace an NVMe SSD with an evicted device and reintegrate it into use with DAOS, run the following command: $ dmg -l boro-11 storage replace nvme --old-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 --new-uuid=80c9f1be-84b9-4318-a1be-c416c96ca48b ------- boro-11 ------- Devices UUID:80c9f1be-84b9-4318-a1be-c416c96ca48b Targets:[] Rank:1 State:NORMAL The old, now replaced device will remain in an \"EVICTED\" state until it is unplugged. The new device will transition from a \"NEW\" state to a \"NORMAL\" state (shown above). Reuse a FAULTY Device: dmg storage replace nvme In order to reuse a device that was previously set as FAULTY and evicted from the DAOS system, an admin can run the following command (setting the old device UUID to be the new device UUID): $ dmg -l boro-11 storage replace nvme --old-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 --new-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[] Rank:1 State:NORMAL The FAULTY device will transition from an \"EVICTED\" state back to a \"NORMAL\" state, and will again be available for use with DAOS. The use case of this command will mainly be for testing, or for accidental device eviction. System Operations \u00b6 The DAOS Control Server acting as the access point records details of DAOS I/O Server instances that join the DAOS system. Once an I/O Server has joined the DAOS system, it is identified by a unique system \"rank\". Multiple ranks can reside on the same host machine, accessible via the same network address. A DAOS system can be shutdown and restarted to perform maintenance and/or reboot hosts. Pool data and state will be maintained providing no changes are made to the rank's metadata stored on persistent memory. Storage reformat can also be performed after system shutdown. Pools will be removed and storage wiped. System commands will be handled by the DAOS Server listening at the access point address specified as the first entry in the DMG config file \"hostlist\" parameter. See daos_control.yml for details. The \"access point\" address should be the same as that specified in the server config file daos_server.yml specified when starting daos_server instances. Warning Controlled start/stop/reformat have some known limitations. Whilst individual system instances can be stopped, if a subset is restarted, existing pools will not be automatically integrated with restarted instances. Query \u00b6 The system membership can be queried using the command: $ dmg system query [--verbose] [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] --verbose flag gives more information on each rank Output table will provide system rank mappings to host address and instance UUID, in addition to rank state. Shutdown \u00b6 When up and running, the entire system can be shutdown with the command: $ dmg system stop [--force] [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] Output table will indicate action and result. DAOS Control Servers will continue to operate and listen on the management network. Start \u00b6 To start the system after a controlled shutdown run the command: $ dmg system start [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] Output table will indicate action and result. DAOS I/O Servers will be started. Reformat \u00b6 To reformat the system after a controlled shutdown run the command: $ dmg storage format --reformat --reformat flag indicates that a reformat operation should be performed disregarding existing filesystems if no record of previously running ranks can be found, reformat is performed on hosts in dmg config file hostlist if system membership has records of previously running ranks, storage allocated to those ranks will be formatted Output table will indicate action and result. DAOS I/O Servers will be started and all DAOS pools will have been removed. Manual Fresh Start \u00b6 To reset the DAOS metadata across all hosts, the system must be reformatted. First, ensure all daos_server processes on all hosts have been stopped, then for each SCM mount specified in the config file ( scm_mount in the servers section) umount and wipe FS signatures. Example illustration with two IO instances specified in the config file: clush -w wolf-[118-121,130-133] umount /mnt/daos1 clush -w wolf-[118-121,130-133] umount /mnt/daos0 clush -w wolf-[118-121,130-133] wipefs -a /dev/pmem1 clush -w wolf-[118-121,130-133] wipefs -a /dev/pmem0 Then restart DAOS Servers and format. Fault Domain Maintenance and Reintegration \u00b6 Details on how to drain an individual storage node or fault domain (e.g. rack) in preparation for maintenance activity and how to reintegrate it will be provided in a future revision. DAOS System Extension \u00b6 Ability to add new DAOS server instances to a pre-existing DAOS system will be documented in a future revision. Fault Management \u00b6 DAOS relies on massively distributed single-ported storage. Each target is thus effectively a single point of failure. DAOS achieves availability and durability of both data and metadata by providing redundancy across targets in different fault domains. Fault Detection & Isolation \u00b6 DAOS servers are monitored within a DAOS system through a gossip-based protocol called SWIM 1 that provides accurate, efficient, and scalable server fault detection. Storage attached to each DAOS target is monitored through periodic local health assessment. Whenever a local storage I/O error is returned to the DAOS server, an internal health check procedure will be called automatically. This procedure makes an overall health assessment by analyzing the IO error code and device SMART/Health data. If the result is negative, the target will be marked as faulty, and further I/Os to this target will be rejected and re-routed. Once detected, the faulty target or servers (effectively a set of targets) must be excluded from each pool membership. This process is triggered either manually by the administrator or automatically (see the next section for more information). Upon exclusion from the pool map, each target starts the collective rebuild process automatically to restore data redundancy. The rebuild process is designed to operate online while servers continue to process incoming I/O operations from applications. Tools to monitor and manage rebuild are still under development. Rebuild Throttling \u00b6 The rebuild process may consume many resources on each server and can be throttled to reduce the impact on application performance. This current logic relies on CPU cycles on the storage nodes. By default, the rebuild process is configured to consume up to 30% of the CPU cycles, leaving the other 70% for regular I/O operations. During the rebuild process, the user can set the throttle to guarantee that the rebuild will not use more resources than the user setting. The user can only set the CPU cycle for now. For example, if the user set the throttle to 50, then the rebuild will at most use 50% of the CPU cycle to do the rebuild job. The default rebuild throttle for CPU cycle is 30. This parameter can be changed via the daos_mgmt_set_params() API call and will be eventually available through the management tools. Software Upgrade \u00b6 Interoperability in DAOS is handled via protocol and schema versioning for persistent data structures. Further instructions on how to manage DAOS software upgrades will be provided in a future revision. Protocol Interoperability \u00b6 Limited protocol interoperability is provided by the DAOS storage stack. Version compatibility checks will be performed to verify that: All targets in the same pool run the same protocol version. Client libraries linked with the application may be up to one protocol version older than the targets. If a protocol version mismatch is detected among storage targets in the same pool, the entire DAOS system will fail to start up and will report failure to the control API. Similarly, the connection from clients running a protocol version incompatible with the targets will return an error. Persistent Schema Compatibility and Update \u00b6 The schema of persistent data structures may evolve from time to time to fix bugs, add new optimizations, or support new features. To that end, the persistent data structures support schema versioning. Upgrading the schema version will not be performed automatically and must be initiated by the administrator. A dedicated upgrade tool will be provided to upgrade the schema version to the latest one. All targets in the same pool must have the same schema version. Version checks are performed at system initialization time to enforce this constraint. To limit the validation matrix, each new DAOS release will be published with a list of supported schema versions. To run with the new DAOS release, administrators will then need to upgrade the DAOS system to one of the supported schema versions. New pool shards will always be formatted with the latest version. This versioning schema only applies to a data structure stored in persistent memory and not to block storage that only stores user data with no metadata. Storage Scrubbing \u00b6 Support for end-to-end data integrity is planned for DAOS v1.2 and background checksum scrubbing for v2.2. Once available, that functionality will be documented here. https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1028914 \u21a9","title":"System Administration"},{"location":"admin/administration/#daos-system-administration","text":"","title":"DAOS System Administration"},{"location":"admin/administration/#system-monitoring","text":"System monitoring and telemetry data will be provided as part of the control plane and will be documented in a future revision.","title":"System Monitoring"},{"location":"admin/administration/#storage-operations","text":"","title":"Storage Operations"},{"location":"admin/administration/#per-storage-server-space-utilization","text":"To query SCM and NVMe storage space usage and show how much space is available to create new DAOS pools with, run the following command: bash-4.2$ dmg storage query usage Hosts SCM-Total SCM-Free SCM-Used NVMe-Total NVMe-Free NVMe-Used ----- --------- -------- -------- ---------- --------- --------- wolf-71 6.4 TB 2.0 TB 68 % 1.5 TB 1.1 TB 27 % wolf-72 6.4 TB 2.0 TB 68 % 1.5 TB 1.1 TB 27 % The command output shows online DAOS storage utilization, only including storage statistics for devices that have been formatted by DAOS control-plane and assigned to a currently running rank of the DAOS system. This represents the storage that can host DAOS pools. Note that the table values are per-host (storage server) and SCM/NVMe capacity pool component values specified in dmg pool create are per rank. If multiple ranks (I/O processes) have been configured per host in the server configuration file daos_server.yml then the values supplied to dmg pool create should be a maximum of the SCM/NVMe free space divided by the number of ranks per host. For example if 2.0 TB SCM and 10.0 TB NVMe free space is reported by dmg storage query usage and the server configuration file used to start the system specifies 2 I/O processes (2 \"server\" sections), the maximum pool size that can be specified is approximately dmg pool create -s 1T -n 5T (may need to specify slightly below the maximum to take account of negligible metadata overhead).","title":"Per-Storage-Server Space Utilization"},{"location":"admin/administration/#nvme-ssd-health-monitoring","text":"Useful admin dmg commands to query NVMe SSD health: Query Per-Server Metadata: dmg storage query (list-devices|list-pools) dmg storage scan --nvme-meta shows mapping of metadata to NVMe controllers Queries persistently stored device and pool metadata tables. The device table maps the internal device UUID to attached VOS target IDs. The rank number of the server where the device is located is also listed, along with the current device state. The available device states are the following: - NORMAL: a fully, functional device in-use by DAOS - EVICTED: the device is no longer in-use by DAOS - UNPLUGGED: the device is currently unplugged from the system (may or not be evicted) - NEW: the device is plugged and available, and not currently in-use by DAOS The pool table maps the DAOS pool UUID to attached VOS target IDs, and will list all of the server ranks that the pool is distributed on. With the additional --verbose flag, the mapping of SPDK blob IDs to VOS target IDs is also displayed. $ dmg -l boro-11,boro-13 storage query list-devices ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[0 2] Rank:0 State:NORMAL UUID:80c9f1be-84b9-4318-a1be-c416c96ca48b Targets:[1 3] Rank:0 State:FAULTY UUID:051b77e4-1524-4662-9f32-f8e4d2542c2d Targets:[] Rank:0 State:NEW UUID:81905b24-be44-4106-8ff9-03002e9dd86a Targets:[0 2] Rank:1 State:UNPLUGGED UUID:2ccb8afb-5d32-454e-86e3-762ec5dca7be Targets:[1 3] Rank:1 State:NORMAL UUID:3f08da48-d88d-42dc-bca5-d1ab8419a401 Targets:[] Rank:1 State:NEW $ dmg -l boro-11,boro-13 storage query list-pools ------- boro-11 ------- Pools UUID:08d6839b-c71a-4af6-901c-28e141b2b429 Rank:0 Targets:[0 1 2 3] Rank:1 Targets:[0 1 2 3] $ dmg -l boro-11,boro-13 storage query list-pools --verbose ------- boro-11 ------- Pools UUID:08d6839b-c71a-4af6-901c-28e141b2b429 Rank:0 Targets:[0 1 2 3] Blobs:[4294967404 4294967405 4294967407 4294967406] Rank:1 Targets:[0 1 2 3] Blobs:[4294967410 4294967411 4294967413 4294967412] Query Storage Device Health Data: dmg storage query (device-health|target-health) dmg storage scan --nvme-health shows NVMe controller health stats Queries device health data, including NVMe SSD health stats and in-memory I/O error and checksum error counters. The server rank and device state are also listed. The device health data can either be queried by device UUID (device-health) or by VOS target ID along with server rank (target-health). The same device health info is displayed with both command options. $ dmg -l boro-11 storage query device-health --uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 or $ dmg -l boro-11 storage query target-health --rank=0 --tgtid=0 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[0 1 2 3] Rank:0 State:NORMAL Health Stats: Temperature:289K(15C) Controller Busy Time:0s Power Cycles:0 Power On Duration:0s Unsafe Shutdowns:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK","title":"NVMe SSD Health Monitoring"},{"location":"admin/administration/#nvme-ssd-eviction-and-hotplug","text":"Manually Evict an NVMe SSD: dmg storage set nvme-faulty To manually evict an NVMe SSD (auto eviction will be supported in a future release), the device state needs to be set to \"FAULTY\" by running the following command: $ dmg -l boro-11 storage set nvme-faulty --uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[] Rank:1 State:FAULTY The device state will transition from \"NORMAL\" to \"FAULTY\" (shown above), which will trigger the faulty device reaction (all targets on the SSD will be rebuilt and the SSD will remain evicted until device replacement occurs). Replace an Evicted SSD with a New Device: dmg storage replace nvme To replace an NVMe SSD with an evicted device and reintegrate it into use with DAOS, run the following command: $ dmg -l boro-11 storage replace nvme --old-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 --new-uuid=80c9f1be-84b9-4318-a1be-c416c96ca48b ------- boro-11 ------- Devices UUID:80c9f1be-84b9-4318-a1be-c416c96ca48b Targets:[] Rank:1 State:NORMAL The old, now replaced device will remain in an \"EVICTED\" state until it is unplugged. The new device will transition from a \"NEW\" state to a \"NORMAL\" state (shown above). Reuse a FAULTY Device: dmg storage replace nvme In order to reuse a device that was previously set as FAULTY and evicted from the DAOS system, an admin can run the following command (setting the old device UUID to be the new device UUID): $ dmg -l boro-11 storage replace nvme --old-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 --new-uuid=5bd91603-d3c7-4fb7-9a71-76bc25690c19 ------- boro-11 ------- Devices UUID:5bd91603-d3c7-4fb7-9a71-76bc25690c19 Targets:[] Rank:1 State:NORMAL The FAULTY device will transition from an \"EVICTED\" state back to a \"NORMAL\" state, and will again be available for use with DAOS. The use case of this command will mainly be for testing, or for accidental device eviction.","title":"NVMe SSD Eviction and Hotplug"},{"location":"admin/administration/#system-operations","text":"The DAOS Control Server acting as the access point records details of DAOS I/O Server instances that join the DAOS system. Once an I/O Server has joined the DAOS system, it is identified by a unique system \"rank\". Multiple ranks can reside on the same host machine, accessible via the same network address. A DAOS system can be shutdown and restarted to perform maintenance and/or reboot hosts. Pool data and state will be maintained providing no changes are made to the rank's metadata stored on persistent memory. Storage reformat can also be performed after system shutdown. Pools will be removed and storage wiped. System commands will be handled by the DAOS Server listening at the access point address specified as the first entry in the DMG config file \"hostlist\" parameter. See daos_control.yml for details. The \"access point\" address should be the same as that specified in the server config file daos_server.yml specified when starting daos_server instances. Warning Controlled start/stop/reformat have some known limitations. Whilst individual system instances can be stopped, if a subset is restarted, existing pools will not be automatically integrated with restarted instances.","title":"System Operations"},{"location":"admin/administration/#query","text":"The system membership can be queried using the command: $ dmg system query [--verbose] [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] --verbose flag gives more information on each rank Output table will provide system rank mappings to host address and instance UUID, in addition to rank state.","title":"Query"},{"location":"admin/administration/#shutdown","text":"When up and running, the entire system can be shutdown with the command: $ dmg system stop [--force] [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] Output table will indicate action and result. DAOS Control Servers will continue to operate and listen on the management network.","title":"Shutdown"},{"location":"admin/administration/#start","text":"To start the system after a controlled shutdown run the command: $ dmg system start [--ranks <rankset>|--host-ranks <hostset>] <rankset> is a pattern describing rank ranges e.g. 0,5-10,20-100 <hostset> is a pattern describing host ranges e.g. storagehost[0,5-10],10.8.1.[20-100] Output table will indicate action and result. DAOS I/O Servers will be started.","title":"Start"},{"location":"admin/administration/#reformat","text":"To reformat the system after a controlled shutdown run the command: $ dmg storage format --reformat --reformat flag indicates that a reformat operation should be performed disregarding existing filesystems if no record of previously running ranks can be found, reformat is performed on hosts in dmg config file hostlist if system membership has records of previously running ranks, storage allocated to those ranks will be formatted Output table will indicate action and result. DAOS I/O Servers will be started and all DAOS pools will have been removed.","title":"Reformat"},{"location":"admin/administration/#manual-fresh-start","text":"To reset the DAOS metadata across all hosts, the system must be reformatted. First, ensure all daos_server processes on all hosts have been stopped, then for each SCM mount specified in the config file ( scm_mount in the servers section) umount and wipe FS signatures. Example illustration with two IO instances specified in the config file: clush -w wolf-[118-121,130-133] umount /mnt/daos1 clush -w wolf-[118-121,130-133] umount /mnt/daos0 clush -w wolf-[118-121,130-133] wipefs -a /dev/pmem1 clush -w wolf-[118-121,130-133] wipefs -a /dev/pmem0 Then restart DAOS Servers and format.","title":"Manual Fresh Start"},{"location":"admin/administration/#fault-domain-maintenance-and-reintegration","text":"Details on how to drain an individual storage node or fault domain (e.g. rack) in preparation for maintenance activity and how to reintegrate it will be provided in a future revision.","title":"Fault Domain Maintenance and Reintegration"},{"location":"admin/administration/#daos-system-extension","text":"Ability to add new DAOS server instances to a pre-existing DAOS system will be documented in a future revision.","title":"DAOS System Extension"},{"location":"admin/administration/#fault-management","text":"DAOS relies on massively distributed single-ported storage. Each target is thus effectively a single point of failure. DAOS achieves availability and durability of both data and metadata by providing redundancy across targets in different fault domains.","title":"Fault Management"},{"location":"admin/administration/#fault-detection-isolation","text":"DAOS servers are monitored within a DAOS system through a gossip-based protocol called SWIM 1 that provides accurate, efficient, and scalable server fault detection. Storage attached to each DAOS target is monitored through periodic local health assessment. Whenever a local storage I/O error is returned to the DAOS server, an internal health check procedure will be called automatically. This procedure makes an overall health assessment by analyzing the IO error code and device SMART/Health data. If the result is negative, the target will be marked as faulty, and further I/Os to this target will be rejected and re-routed. Once detected, the faulty target or servers (effectively a set of targets) must be excluded from each pool membership. This process is triggered either manually by the administrator or automatically (see the next section for more information). Upon exclusion from the pool map, each target starts the collective rebuild process automatically to restore data redundancy. The rebuild process is designed to operate online while servers continue to process incoming I/O operations from applications. Tools to monitor and manage rebuild are still under development.","title":"Fault Detection &amp; Isolation"},{"location":"admin/administration/#rebuild-throttling","text":"The rebuild process may consume many resources on each server and can be throttled to reduce the impact on application performance. This current logic relies on CPU cycles on the storage nodes. By default, the rebuild process is configured to consume up to 30% of the CPU cycles, leaving the other 70% for regular I/O operations. During the rebuild process, the user can set the throttle to guarantee that the rebuild will not use more resources than the user setting. The user can only set the CPU cycle for now. For example, if the user set the throttle to 50, then the rebuild will at most use 50% of the CPU cycle to do the rebuild job. The default rebuild throttle for CPU cycle is 30. This parameter can be changed via the daos_mgmt_set_params() API call and will be eventually available through the management tools.","title":"Rebuild Throttling"},{"location":"admin/administration/#software-upgrade","text":"Interoperability in DAOS is handled via protocol and schema versioning for persistent data structures. Further instructions on how to manage DAOS software upgrades will be provided in a future revision.","title":"Software Upgrade"},{"location":"admin/administration/#protocol-interoperability","text":"Limited protocol interoperability is provided by the DAOS storage stack. Version compatibility checks will be performed to verify that: All targets in the same pool run the same protocol version. Client libraries linked with the application may be up to one protocol version older than the targets. If a protocol version mismatch is detected among storage targets in the same pool, the entire DAOS system will fail to start up and will report failure to the control API. Similarly, the connection from clients running a protocol version incompatible with the targets will return an error.","title":"Protocol Interoperability"},{"location":"admin/administration/#persistent-schema-compatibility-and-update","text":"The schema of persistent data structures may evolve from time to time to fix bugs, add new optimizations, or support new features. To that end, the persistent data structures support schema versioning. Upgrading the schema version will not be performed automatically and must be initiated by the administrator. A dedicated upgrade tool will be provided to upgrade the schema version to the latest one. All targets in the same pool must have the same schema version. Version checks are performed at system initialization time to enforce this constraint. To limit the validation matrix, each new DAOS release will be published with a list of supported schema versions. To run with the new DAOS release, administrators will then need to upgrade the DAOS system to one of the supported schema versions. New pool shards will always be formatted with the latest version. This versioning schema only applies to a data structure stored in persistent memory and not to block storage that only stores user data with no metadata.","title":"Persistent Schema Compatibility and Update"},{"location":"admin/administration/#storage-scrubbing","text":"Support for end-to-end data integrity is planned for DAOS v1.2 and background checksum scrubbing for v2.2. Once available, that functionality will be documented here. https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1028914 \u21a9","title":"Storage Scrubbing"},{"location":"admin/deployment/","text":"System Deployment \u00b6 The DAOS deployment workflow requires to start the DAOS server instances early on to enable administrators to perform remote operations in parallel across multiple storage nodes via the dmg management utility. Security is guaranteed via the use of certificates. The first type of commands run after installation include network and storage hardware provisioning and would typically be run from a login node. After daos_server instances have been started on each storage node for the first time, dmg storage prepare will set DCPM storage into the necessary state for use with DAOS. Then dmg storage format formats persistent storage devices (specified in the server configuration file) on the storage nodes and writes necessary metadata before starting DAOS I/O processes that will operate across the fabric. To sum up, the typical workflow of a DAOS system deployment consists of the following steps: Configure and start the DAOS server . Provision Hardware on all the storage nodes via the dmg utility. Format the DAOS system Set up and start the agent on the client nodes Validate that the DAOS system is operational Note that starting the DAOS server instances can be performed automatically on boot if start-up scripts are registered with systemd. The following subsections will cover each step in more detail. DAOS Server Setup \u00b6 First of all, the DAOS server should be started to allow remote administration command to be executed via the dmg tool. This section describes the minimal DAOS server configuration and how to start it on all the storage nodes. Server Configuration File \u00b6 The daos_server configuration file is parsed when starting the daos_server process. The configuration file location can be specified on the command line ( daos_server -h for usage) or it will be read from the default location ( /etc/daos/daos_server.yml ). Parameter descriptions are specified in daos_server.yml and example configuration files in the examples directory. Any option supplied to daos_server as a command line option or flag will take precedence over equivalent configuration file parameter. For convenience, active parsed configuration values are written to a temporary file for reference, and the location will be written to the log. Configuration Options \u00b6 The example configuration file lists the default empty configuration, listing all the options (living documentation of the config file). Live examples are available at https://github.com/daos-stack/daos/tree/master/utils/config/examples The location of this configuration file is determined by first checking for the path specified through the -o option of the daos_server command line. Otherwise, /etc/daos/daos_server.yml is used. Refer to the example configuration file ( daos_server.yml ) for latest information and examples. At this point of the process, the servers: and provider: section of the yaml file can be left blank and will be populated in the subsequent sections. Auto generate configuration file \u00b6 DAOS can attempt to produce a server configuration file that makes optimal use of hardware on a given set of hosts through the 'dmg config generate' command: $ dmg config generate --help ERROR: dmg: Usage: dmg [OPTIONS] config generate [generate-OPTIONS] Application Options: ... -l, --host-list= comma separated list of addresses <ipv4addr/hostname> ... [generate command options] -p, --num-pmem= Minimum number of SCM (pmem) devices required per storage host in DAOS system -n, --num-nvme= Minimum number of NVMe devices required per storage host in DAOS system -c, --net-class=[best-available|ethernet|infiniband] Network class preferred (default: best-available) The command will output recommended config file if supplied requirements are met. Requirements will be derived based on the number of NUMA nodes present on the hosts if '--num-pmem' is not specified on the commandline. '--num-pmem' specifies the number of persistent memory (pmem) block devices that must be present on each host. This will define the number of I/O Servers that will be configured per host. If not set on the commandline, default is the number of NUMA nodes detected on the host. '--num-nvme' specifies the minimum number of NVMe SSDs present on each host per pmem device. For each pmem device selected for the generated config, this number of SSDs must be bound to the NUMA node that matches the affinity of the pmem device. If not set on the commandline, default is \"1\". '--net-class' specifies preference for network interface class, options are 'ethernet', 'infiband' or 'best-available'. 'best-available' will attempt to choose the most performant (as judged by libfabric) sets of interfaces and supported provider that match the number and NUMA affinity of pmem devices. If not set on the commandline, default is \"best-available\". The configuration file that is generated by the command and output to stdout can be copied to a file and used on the relevant hosts and used as server config to determine the starting environment for 'daos_server' instances. Config file output will not be generated in the following cases: - pmem device count, capacity or NUMA differs on any of the hosts in the host list (specified either in the 'dmg' config file or on the commandline). - NVMe SSD count, PCI address distribution or NUMA affinity differs on any of the hosts in the host list. - NUMA node count can't be detected on the hosts or differs on any host in the host list. - pmem device count or NUMA affinity doesn't match 'num-pmem' threshold. - NVMe device count or NUMA affinity doesn't match 'num-nvme' threshold. - network device count or NUMA affinity doesn't match the configured pmem devices, taking into account any specified network device class preference (ethernet or infiniband). Certificate Configuration \u00b6 The DAOS security framework relies on certificates to authenticate components and administrators in addition to encrypting DAOS control plane communications. A set of certificates for a given DAOS system may be generated by running the gen_certificates.sh script provided with the DAOS software if there is not an existing TLS certificate infrastructure. The gen_certificates.sh script uses the openssl tool to generate all of the necessary files. We highly recommend using OpenSSL Version 1.1.1h or higher as keys and certificates generated with earlier versions are vulnerable to attack. When DAOS is installed from RPMs, this script is provided in the base daos RPM, and may be invoked in the directory to which the certificates will be written. As part of the generation process, a new local Certificate Authority is created to handle certificate signing, and three role certificates are created: # /usr/lib64/daos/certgen/gen_certificates.sh Generating Private CA Root Certificate Private CA Root Certificate created in ./daosCA ... Generating Server Certificate Required Server Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/server.key ./daosCA/certs/server.crt ... Generating Agent Certificate Required Agent Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/agent.key ./daosCA/certs/agent.crt ... Generating Admin Certificate Required Admin Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/admin.key ./daosCA/certs/admin.crt The files generated under ./daosCA should be protected from unauthorized access and preserved for future use. The generated keys and certificates must then be securely distributed to all nodes participating in the DAOS system (servers, clients, and admin nodes). Permissions for these files should be set to prevent unauthorized access to the keys and certificates. Client nodes require: - CA root cert - Agent cert - Agent key Administrative nodes require: - CA root cert - Admin cert - Admin key Server nodes require: - CA root cert - Server cert - Server key - All valid agent certs in the DAOS system (in the client cert directory, see config file below) After the certificates have been securely distributed, the DAOS configuration files must be updated in order to enable authentication and secure communications. These examples assume that the configuration and certificate files have been installed under /etc/daos : # /etc/daos/daos_server.yml (servers) transport_config: # Location where daos_server will look for Client certificates client_cert_dir: /etc/daos/certs/clients # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Server certificate for use in TLS handshakes cert: /etc/daos/certs/server.crt # Key portion of Server Certificate key: /etc/daos/certs/server.key # /etc/daos/daos_agent.yml (clients) transport_config: # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Agent certificate for use in TLS handshakes cert: /etc/daos/certs/agent.crt # Key portion of Agent Certificate key: /etc/daos/certs/agent.key # /etc/daos/daos_control.yml (dmg/admin) transport_config: # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Admin certificate for use in TLS handshakes cert: /etc/daos/certs/admin.crt # Key portion of Admin Certificate key: /etc/daos/certs/admin.key Server Startup \u00b6 One instance of the daos_server process is to be started per storage node. The server can be started either individually (e.g. independently on each storage node via systemd) or collectively (e.g. pdsh, mpirun or as a Kubernetes Pod). Parallel Launcher \u00b6 Practically any parallel launcher can be used to start the DAOS server collectively on a set of storage nodes. pdsh, clush and orterun are most commonly used. $ clush -w <server_list> -o \"-t -t\" daos_server start -o <config_file>` will launch daos_server on the specified hosts connecting to the port parameter value specified in the server config file. If the number of storage node exceed the default fanout value, then \"-f\" followed by the number of storage nodes should be used. Similarly, pdsh can be used: $ pdsh -w <server_list> daos_server start -o <config_file>` As for orterun, the list of storage nodes can be specified on the command line via the -H option. To start the DAOS server, run: $ orterun --map-by node --mca btl tcp,self --mca oob tcp -np <num_servers> -H <server_list> --enable-recovery daos_server start -o <config_file> The --enable-recovery is required for fault tolerance to guarantee that the fault of one server does not cause the others to be stopped. The --allow-run-as-root option can be added to the command line to allow the daos_server to run with root privileges on each storage nodes (for example when needing to perform privileged tasks relating to storage format). See the orterun(1) man page for additional options. Systemd Integration \u00b6 DAOS Server can be started as a systemd service. The DAOS Server unit file is installed in the correct location when installing from RPMs. The DAOS Server will be run as daos-server user which will be created during RPM install. If you wish to use systemd with a development build, you must copy the service file from utils/systemd to /usr/lib/systemd/system . Once the file is copied modify the ExecStart line to point to your in tree daos_server binary. Once the service file is installed you can start daos_server with the following commands: $ systemctl enable daos_server.service $ systemctl start daos_server.service To check the component status use: $ systemctl status daos_server.service If DAOS Server failed to start, check the logs with: $ journalctl --unit daos_server.service After RPM install, daos_server service starts automatically running as user \"daos\". The server config is read from /etc/daos/daos_server.yml and certificates are read from /etc/daos/certs . With no other admin intervention other than the loading of certificates, daos_server will enter a listening state enabling discovery of storage and network hardware through the dmg tool without any I/O Servers specified in the configuration file. After device discovery and provisioning, an updated configuration file with a populated per-server section can be stored in /etc/daos/daos_server.yml , and after reestarting the daos_server service it is then ready for the storage to be formatted. Kubernetes Pod \u00b6 DAOS service integration with Kubernetes is planned and will be supported in a future DAOS version. DAOS Server Remote Access \u00b6 Remote tasking of the DAOS system and individual DAOS Server processes can be performed via the dmg utility. To set the addresses of which DAOS Servers to task, provide either: - -l <hostlist> on the commandline when invoking, or - hostlist: <hostlist> in the control configuration file daos_control.yml Where <hostlist> represents a slurm-style hostlist string e.g. foo-1[28-63],bar[256-511] . The first entry in the hostlist (after alphabetic then numeric sorting) will be assumed to be the access point as set in the server configuration file. Local configuration files stored in the user directory will be used in preference to the default location e.g. ~/.daos_control.yml . Hardware Provisioning \u00b6 Once the DAOS server started, the storage and network can be configured on the storage nodes via the dmg utility. SCM Preparation \u00b6 This section addresses how to verify that Optane DC Persistent Memory Module (DCPMM) is correctly installed on the storage nodes, and how to configure it in Appdirect interleaved mode to be used by DAOS. Instructions for other types of SCM may be covered in the future. Provisioning the SCM occurs by configuring DCPM modules in AppDirect memory regions (interleaved mode) in groups of modules local to a specific socket (NUMA), and resultant nvdimm namespaces are defined by a device identifier (e.g., /dev/pmem0). DCPM preparation is required once per DAOS installation and requires the DAOS Control Servers to be running as root. This step requires a reboot to enable DCPM resource allocation changes to be read by BIOS. DCPM preparation can be performed from the management tool dmg storage prepare --scm-only or using the Control Server directly sudo daos_server storage prepare --scm-only . The first time the command is run, the SCM AppDirect regions will be created as resource allocations on any available DCPM modules (one region per NUMA node/socket). The regions are activated after BIOS reads the new resource allocations, and after initial completion the command prints a message to ask for a reboot (the command will not initiate reboot itself). After running the command a reboot will be required, then the Control Servers will then need to be started again and the command run for a second time to expose the namespace device to be used by DAOS. Example usage: dmg -l wolf-[118-121,130-133] -i storage prepare --scm-only after running, the user should be prompted for a reboot. clush -w wolf-[118-121,130-133] reboot clush -w wolf-[118-121,130-133] daos_server start -o utils/config/examples/daos_server_sockets.yml dmg -l wolf-[118-121,130-133] -i storage prepare --scm-only after running, /dev/pmemX devices should be available on each of the hosts. 'sudo daos_server storage prepare --scm-only' should be run for a second time after system reboot to create the pmem kernel devices (/dev/pmemX namespaces created on the new SCM regions). On the second run, one namespace per region is created, and each namespace may take up to a few minutes to create. Details of the pmem devices will be displayed in JSON format on command completion. Example output from the initial call (with the SCM modules set to default MemoryMode): Memory allocation goals for SCM will be changed and namespaces modified, this will be a destructive operation. ensure namespaces are unmounted and SCM is otherwise unused. A reboot is required to process new memory allocation goals. Example output from the subsequent call (SCM modules configured to AppDirect mode, and host rebooted): Memory allocation goals for SCM will be changed and namespaces modified. This will be a destructive operation. Ensure namespaces are unmounted and the SCM is otherwise unused. creating SCM namespace, may take a few minutes... creating SCM namespace, may take a few minutes... Persistent memory kernel devices: [{UUID:5d2f2517-9217-4d7d-9c32-70731c9ac11e Blockdev:pmem1 Dev:namespace1.0 NumaNode:1} {UUID:2bfe6c40-f79a-4b8e-bddf-ba81d4427b9b Blockdev:pmem0 Dev:namespace0.0 NumaNode:0}] Upon successful creation of the pmem devices, DCPMM is properly configured and one can move on to the next step. If required, the pmem devices can be destroyed via the --reset option: sudo daos_server [<app_opts>] storage prepare [--scm-only|-s] --reset [<cmd_opts>] All namespaces are disabled and destroyed. The SCM regions are removed by resetting modules into \"MemoryMode\" through resource allocations. Note that undefined behavior may result if the namespaces/pmem kernel devices are mounted before running reset (as per the printed warning). A subsequent reboot is required for BIOS to read the new resource allocations. Example output when resetting the SCM modules: Memory allocation goals for SCM will be changed and namespaces modified, this will be a destructive operation. ensure namespaces are unmounted and SCM is otherwise unused. removing SCM namespace, may take a few minutes... removing SCM namespace, may take a few minutes... resetting SCM memory allocations A reboot is required to process new memory allocation goals. Storage Selection \u00b6 While the DAOS server auto-detects all the usable storage, the administrator will still be provided with the ability through the configuration file (see next section) to whitelist or blacklist the storage devices to be (or not) used. This section covers how to manually detect the storage devices potentially usable by DAOS to populate the configuration file when the administrator wants to have finer control over the storage selection. dmg storage scan can be run to query remote running daos_server processes over the management network. sudo daos_server storage scan can be used to query daos_server directly (scans locally-attached SSDs and Intel Persistent Memory Modules usable by DAOS). Output will be equivalent running dmg storage scan --verbose remotely. bash-4.2$ dmg storage scan Hosts SCM Total NVMe Total ----- --------- ---------- wolf-[71-72] 6.4 TB (2 namespaces) 3.1 TB (3 controllers) bash-4.2$ dmg storage scan --verbose ------------ wolf-[71-72] ------------ SCM Namespace Socket ID Capacity ------------- --------- -------- pmem0 0 3.2 TB pmem1 1 3.2 TB NVMe PCI Model FW Revision Socket ID Capacity -------- ----- ----------- --------- -------- 0000:81:00.0 INTEL SSDPED1K750GA E2010325 1 750 GB 0000:87:00.0 INTEL SSDPEDMD016T4 8DV10171 1 1.6 TB 0000:da:00.0 INTEL SSDPED1K750GA E2010325 1 750 GB The NVMe PCI field above is what should be used in the server configuration file to identified NVMe SSDs. Devices with the same NUMA node/socket should be used in the same per-server section of the server configuration file for best performance. For further info on command usage run dmg storage --help . SSD health state can be verified via dmg storage scan --nvme-health : bash-4.2$ dmg storage scan --nvme-health ------- wolf-71 ------- PCI:0000:81:00.0 Model:INTEL SSDPED1K750GA FW:E2010325 Socket:1 Capacity:750 GB Health Stats: Temperature:318K(44.85C) Controller Busy Time:0s Power Cycles:15 Power On Duration:10402h0m0s Unsafe Shutdowns:13 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK PCI:0000:da:00.0 Model:INTEL SSDPED1K750GA FW:E2010325 Socket:1 Capacity:750 GB Health Stats: Temperature:320K(46.85C) Controller Busy Time:0s Power Cycles:15 Power On Duration:10402h0m0s Unsafe Shutdowns:13 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK ------- wolf-72 ------- PCI:0000:81:00.0 Model:INTEL SSDPED1K750GA FW:E2010435 Socket:1 Capacity:750 GB Health Stats: Temperature:316K(42.85C) Controller Busy Time:8m0s Power Cycles:23 Power On Duration:10399h0m0s Unsafe Shutdowns:18 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK PCI:0000:da:00.0 Model:INTEL SSDPED1K750GA FW:E2010435 Socket:1 Capacity:750 GB Health Stats: Temperature:320K(46.85C) Controller Busy Time:1m0s Power Cycles:23 Power On Duration:10399h0m0s Unsafe Shutdowns:19 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK The next step consists of adjusting in the server configuration the storage devices that should be used by DAOS. The servers section of the yaml is a list specifying details for each DAOS I/O instance to be started on the host (currently a maximum of 2 per host is imposed). Devices with the same NUMA rating/node/socket should be colocated on a single DAOS I/O instance where possible. more details bdev_list should be populated with NVMe PCI addresses scm_list should be populated with DCPM interleaved set namespaces (e.g. /dev/pmem1 ) DAOS Control Servers will need to be restarted on all hosts after updates to the server configuration file. Pick one host in the system and set access_points to list of that host's hostname or IP address (don't need to specify port). This will be the host which bootstraps the DAOS management service (MS). To illustrate, assume a cluster with homogeneous hardware configurations that returns the following from scan for each host: [daos@wolf-72 daos_m]$ dmg -l wolf-7[1-2] -i storage scan --verbose ------- wolf-7[1-2] ------- SCM Namespace Socket ID Capacity ------------- --------- -------- pmem0 0 2.90TB pmem1 1 2.90TB NVMe PCI Model FW Revision Socket ID Capacity -------- ----- ----------- --------- -------- 0000:81:00.0 INTEL SSDPED1K750GA E2010325 0 750.00GB 0000:87:00.0 INTEL SSDPEDMD016T4 8DV10171 0 1.56TB 0000:da:00.0 INTEL SSDPED1K750GA E2010325 1 750.00GB In this situation, the configuration file servers section could be populated as follows: <snip> port: 10001 access_points: [\"wolf-71\"] # <----- updated <snip> servers: - targets: 8 # count of storage targets per each server first_core: 0 # offset of the first core for service xstreams nr_xs_helpers: 2 # count of offload/helper xstreams per target fabric_iface: eth0 # map to OFI_INTERFACE=eth0 fabric_iface_port: 31416 # map to OFI_PORT=31416 log_mask: ERR # map to D_LOG_MASK=ERR log_file: /tmp/server.log # map to D_LOG_FILE=/tmp/server.log env_vars: # influence DAOS IO Server behavior by setting env variables - DAOS_MD_CAP=1024 - CRT_CTX_SHARE_ADDR=0 - CRT_TIMEOUT=30 - FI_SOCKETS_MAX_CONN_RETRY=1 - FI_SOCKETS_CONN_TIMEOUT=2000 scm_mount: /mnt/daos # map to -s /mnt/daos scm_class: dcpm scm_list: [/dev/pmem0] # <----- updated bdev_class: nvme bdev_list: [\"0000:87:00.0\", \"0000:81:00.0\"] # <----- updated - targets: 8 # count of storage targets per each server first_core: 0 # offset of the first core for service xstreams nr_xs_helpers: 2 # count of offload/helper xstreams per target fabric_iface: eth0 # map to OFI_INTERFACE=eth0 fabric_iface_port: 31416 # map to OFI_PORT=31416 log_mask: ERR # map to D_LOG_MASK=ERR log_file: /tmp/server.log # map to D_LOG_FILE=/tmp/server.log env_vars: # influence DAOS IO Server behavior by setting env variables - DAOS_MD_CAP=1024 - CRT_CTX_SHARE_ADDR=0 - CRT_TIMEOUT=30 - FI_SOCKETS_MAX_CONN_RETRY=1 - FI_SOCKETS_CONN_TIMEOUT=2000 scm_mount: /mnt/daos # map to -s /mnt/daos scm_class: dcpm scm_list: [/dev/pmem1] # <----- updated bdev_class: nvme bdev_list: [\"0000:da:00.0\"] # <----- updated <end> Network Scan and Configuration \u00b6 The daos_server supports the network scan function to display the network interfaces, related OFI fabric providers and associated NUMA node for each device. This information is used to configure the global fabric provider and the unique local network interface for each I/O Server instance on this node. This section will help you determine what to provide for the provider , fabric_iface and pinned_numa_node entries in the daos_server.yml file. The following commands are typical examples: daos_server network scan daos_server network scan -p all daos_server network scan -p ofi+sockets daos_server network scan --provider 'ofi+verbs;ofi_rxm' In the early stages when a daos_server has not yet been fully configured and lacks a declaration of the system's fabric provider, it may be helpful to view an unfiltered list of scan results. Use either of these daos_server commands in the early stages to accomplish this goal: daos_server network scan daos_server network scan -p all Typical network scan results look as follows: $ daos_server network scan -p all --------- localhost --------- ------------- NUMA Socket 0 ------------- Provider Interfaces -------- ---------- ofi+verbs;ofi_rxm ib0 ofi+tcp;ofi_rxm ib0, eth0 ofi+verbs ib0 ofi+tcp ib0, eth0 ofi+sockets ib0, eth0 ofi+psm2 ib0 ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+verbs;ofi_rxm ib1 ofi+tcp;ofi_rxm ib1 ofi+verbs ib1 ofi+tcp ib1 ofi+sockets ib1 ofi+psm2 ib1 Use one of these providers to configure the provider in the daos_server.yml. Only one provider may be specified for the entire DAOS installation. Client nodes must be capable of communicating to the daos_server nodes via the same provider. Therefore, it is helpful to choose network settings for the daos_server that are compatible with the expected client node configuration. After the daos_server.yml file has been edited and contains a provider, subsequent daos_server network scan commands will filter the results based on that provider. If it is desired to view an unfiltered list again, issue daos_server network scan -p all . Regardless of the provider in the daos_server.yml file, the results may be filtered to the specified provider with the command daos_server network scan -p ofi_provider where ofi_provider is one of the available providers from the list. The results of the network scan may be used to help configure the I/O Server instances for this daos_server node. Each I/O Server instance is configured with a unique fabric_iface and optional pinned_numa_node . The interfaces and NUMA Sockets listed in the scan results map to the daos_server.yml fabric_iface and pinned_numa_node respectively. The use of pinned_numa_node is optional, but recommended for best performance. When specified with the value that matches the network interface, the I/O Server will bind itself to that NUMA node and to cores purely within that NUMA node. This configuration yields the fastest access to that network device. Changing Network Providers \u00b6 Information about the network configuration is stored as metadata on the DAOS storage. If, after initial deployment, the provider must be changed, it is necessary to reformat the storage devices using dmg storage format after the configuration file has been updated with the new provider. Network Scanning All DAOS Server Nodes \u00b6 While the daos_server network scan is useful for scanning the localhost, it does not provide results for any other daos_server instance on the network. The DAOS Management tool, dmg , is used for that purpose. The network scan operates the same way as the daos_server network scan, however, to use the dmg tool, at least one known daos_server instance must be running. The command dmg network scan performs a query over all daos_servers in the daos_control.yml hostlist . By default, the scan will return results that are filtered by the provider that is specified in the daos_server.yml. Like the daos_server network scan , the dmg network scan supports the optional -p/--provider where a different provider may be specified, or all for an unfiltered list that is unrelated to what was already configured on the daos_server installation. dmg network scan ------- wolf-29 ------- ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+sockets ib1 --------- localhost --------- ------------- NUMA Socket 0 ------------- Provider Interfaces -------- ---------- ofi+sockets ib0, eth0 ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+sockets ib1 Provider Configuration and Debug \u00b6 To aid in provider configuration and debug, it may be helpful to run the fi_pingpong test (delivered as part of OFI/libfabric). To run that test, determine the name of the provider to test usually by removing the \"ofi+\" prefix from the network scan provider data. Do use the \"ofi+\" prefix in the daos_server.yml. Do not use the \"ofi+\" prefix with fi_pingpong. Then, the fi_pingpong test can be used to verify that the targeted OFI provider works fine: node1$ fi_pingpong -p psm2 node2$ fi_pingpong -p psm2 ${IP_ADDRESS_NODE1} bytes #sent #ack total time MB/sec usec/xfer Mxfers/sec 64 10 =10 1.2k 0.00s 21.69 2.95 0.34 256 10 =10 5k 0.00s 116.36 2.20 0.45 1k 10 =10 20k 0.00s 379.26 2.70 0.37 4k 10 =10 80k 0.00s 1077.89 3.80 0.26 64k 10 =10 1.2m 0.00s 2145.20 30.55 0.03 1m 10 =10 20m 0.00s 8867.45 118.25 0.01 Storage Formatting \u00b6 Once the daos_server has been restarted with the correct storage devices and network interface to use, one can move to the format phase. When daos_server is started for the first time, it enters \"maintenance mode\" and waits for a dmg storage format call to be issued from the management tool. This remote call will trigger the formatting of the locally attached storage on the host for use with DAOS using the parameters defined in the server config file. dmg -i -l <host>[,...] storage format will normally be run on a login node specifying a hostlist ( -l <host>[,...] ) of storage nodes with SCM/DCPM modules and NVMe SSDs installed and prepared. Upon successful format, DAOS Control Servers will start DAOS IO instances that have been specified in the server config file. Successful start-up is indicated by the following on stdout: DAOS I/O server (v0.8.0) process 433456 started on rank 1 with 8 target, 2 helper XS per target, firstcore 0, host wolf-72.wolf.hpdd.intel.com. SCM Format \u00b6 When the command is run, the pmem kernel devices created on SCM/DCPM regions are formatted and mounted based on the parameters provided in the server config file. scm_mount specifies the location of the mountpoint to create. scm_class can be set to ram to use a tmpfs in the situation that no SCM/DCPM is available ( scm_size dictates the size of tmpfs in GB), when set to dcpm the device specified under scm_list will be mounted at scm_mount path. NVMe Format \u00b6 When the command is run, NVMe SSDs are formatted and set up to be used by DAOS based on the parameters provided in the server config file. bdev_class can be set to nvme to use actual NVMe devices with SPDK for DAOS storage. Other bdev_class values can be used for emulation of NVMe storage as specified in the server config file. bdev_list identifies devices to use with a list of PCI addresses (this can be populated after viewing results from storage scan command). After the format command is run, the path specified by the server configuration file scm_mount parameter should be mounted and should contain a file named daos_nvme.conf . The file should describe the devices with PCI addresses as listed in the bdev_list parameter of the server config file. The presence and contents of the file indicate that the specified NVMe SSDs have been configured correctly for use with DAOS. The contents of the NVMe SSDs listed in the server configuration file bdev_list parameter will be reset on format. Server Format \u00b6 Before the format command is run, no DAOS metadata should exist under the path specified by scm_mount parameter in the server configuration file. After the storage format command is run, the path specified by the server configuration file scm_mount parameter should be mounted and should contain the necessary DAOS metadata indicating that the server has been formatted. When starting, daos_server will skip maintenance mode and attempt to start I/O Servers if valid DAOS metadata is found in scm_mount . Agent Setup \u00b6 This section addresses how to configure the DAOS agents on the storage nodes before starting it. Agent Certificate Generation \u00b6 The DAOS security framework relies on certificates to authenticate administrators. The security infrastructure is currently under development and will be delivered in DAOS v1.0. Initial support for certificates has been added to DAOS and can be disabled either via the command line or in the DAOS Agent configuration file. Currently, the easiest way to disable certificate support is to pass the -i flag to daos_agent . Agent Configuration File \u00b6 The daos_agent configuration file is parsed when starting the daos_agent process. The configuration file location can be specified on the command line ( daos_agent -h for usage) or default location ( install/etc/daos_agent.yml ). If installed from rpms the default location is ( /etc/daos/daos_agent.yml ). Parameter descriptions are specified in daos_agent.yml . Any option supplied to daos_agent as a command line option or flag will take precedence over equivalent configuration file parameter. For convenience, active parsed config values are written to a temporary file for reference, and the location will be written to the log. The following section lists the format, options, defaults, and descriptions available in the configuration file. The example configuration file lists the default empty configuration listing all the options (living documentation of the config file). Live examples are available at https://github.com/daos-stack/daos/tree/master/utils/config The location of this configuration file is determined by first checking for the path specified through the -o option of the daos_agent command line. Otherwise, /etc/daos/daos_agent.yml is used. Refer to the example configuration file ( daos_agent.yml ) for latest information and examples. Agent Startup \u00b6 DAOS Agent is a standalone application to be run on each compute node. It can be configured to use secure communications (default) or can be allowed to communicate with the control plane over unencrypted channels. The following example shows daos_agent being configured to operate in insecure mode due to incomplete integration of certificate support as of the 0.6 release and configured to use a non-default agent configuration file. To start the DAOS Agent from the command line, run: $ daos_agent -i -o <'path to agent configuration file/daos_agent.yml'> & Alternatively, the DAOS Agent can be started as a systemd service. The DAOS Agent unit file is installed in the correct location when installing from RPMs. If you want to run the DAOS Agent without certificates (not recommended in production deployments), you need to add the -i option to the systemd ExecStart invocation (see below). If you wish to use systemd with a development build, you must copy the service file from utils/systemd to /usr/lib/systemd/system . Once the file is copied modify the ExecStart line to point to your in tree daos_agent binary. ExecStart=/usr/bin/daos_agent -i -o <'path to agent configuration file/daos_agent.yml'> Once the service file is installed, you can start daos_agent with the following commands: $ sudo systemctl daemon-reload $ sudo systemctl enable daos_agent.service $ sudo systemctl start daos_agent.service To check the component status use: $ sudo systemctl status daos_agent.service If DAOS Agent failed to start check the logs with: $ sudo journalctl --unit daos_agent.service System Validation \u00b6 To validate that the DAOS system is properly installed, the daos_test suite can be executed. Ensure the DAOS Agent is configured before running daos_test . If the agent is using a non-default path for the socket, then configure DAOS_AGENT_DRPC_DIR in the client environment to point to this new location. DAOS automatically configures a client with a compatible fabric provider, network interface, network domain, CaRT timeout, and CaRT context share address, that will allow it to connect to the DAOS system. The client may not override the fabric provider or the CaRT context share address. A client application may override the three remaining settings by configuring environment variables in the client's shell prior to launch. To manually configure the CaRT timeout, set CRT_TIMEOUT such as: export CRT_TIMEOUT=5 To manually configure the network interface, set OFI_INTERFACE such as: export OFI_INTERFACE=lo When manually configuring an Infiniband device with a verbs provider, the network device domain is required. To manually configure the domain, set OFI_DOMAIN such as: export OFI_DOMAIN=hfi1_0 Launch the client application \u00b6 mpirun -np <num_clients> --hostfile <hostfile> ./daos_test daos_test requires at least 8GB of SCM (or DRAM with tmpfs) storage on each storage node. https://github.com/intel/ipmctl \u21a9 https://github.com/daos-stack/daos/tree/master/utils/config \u21a9 https://www.open-mpi.org/faq/?category=running#mpirun-hostfile \u21a9 https://github.com/daos-stack/daos/tree/master/src/control/README.md \u21a9","title":"System Deployment"},{"location":"admin/deployment/#system-deployment","text":"The DAOS deployment workflow requires to start the DAOS server instances early on to enable administrators to perform remote operations in parallel across multiple storage nodes via the dmg management utility. Security is guaranteed via the use of certificates. The first type of commands run after installation include network and storage hardware provisioning and would typically be run from a login node. After daos_server instances have been started on each storage node for the first time, dmg storage prepare will set DCPM storage into the necessary state for use with DAOS. Then dmg storage format formats persistent storage devices (specified in the server configuration file) on the storage nodes and writes necessary metadata before starting DAOS I/O processes that will operate across the fabric. To sum up, the typical workflow of a DAOS system deployment consists of the following steps: Configure and start the DAOS server . Provision Hardware on all the storage nodes via the dmg utility. Format the DAOS system Set up and start the agent on the client nodes Validate that the DAOS system is operational Note that starting the DAOS server instances can be performed automatically on boot if start-up scripts are registered with systemd. The following subsections will cover each step in more detail.","title":"System Deployment"},{"location":"admin/deployment/#daos-server-setup","text":"First of all, the DAOS server should be started to allow remote administration command to be executed via the dmg tool. This section describes the minimal DAOS server configuration and how to start it on all the storage nodes.","title":"DAOS Server Setup"},{"location":"admin/deployment/#server-configuration-file","text":"The daos_server configuration file is parsed when starting the daos_server process. The configuration file location can be specified on the command line ( daos_server -h for usage) or it will be read from the default location ( /etc/daos/daos_server.yml ). Parameter descriptions are specified in daos_server.yml and example configuration files in the examples directory. Any option supplied to daos_server as a command line option or flag will take precedence over equivalent configuration file parameter. For convenience, active parsed configuration values are written to a temporary file for reference, and the location will be written to the log.","title":"Server Configuration File"},{"location":"admin/deployment/#configuration-options","text":"The example configuration file lists the default empty configuration, listing all the options (living documentation of the config file). Live examples are available at https://github.com/daos-stack/daos/tree/master/utils/config/examples The location of this configuration file is determined by first checking for the path specified through the -o option of the daos_server command line. Otherwise, /etc/daos/daos_server.yml is used. Refer to the example configuration file ( daos_server.yml ) for latest information and examples. At this point of the process, the servers: and provider: section of the yaml file can be left blank and will be populated in the subsequent sections.","title":"Configuration Options"},{"location":"admin/deployment/#auto-generate-configuration-file","text":"DAOS can attempt to produce a server configuration file that makes optimal use of hardware on a given set of hosts through the 'dmg config generate' command: $ dmg config generate --help ERROR: dmg: Usage: dmg [OPTIONS] config generate [generate-OPTIONS] Application Options: ... -l, --host-list= comma separated list of addresses <ipv4addr/hostname> ... [generate command options] -p, --num-pmem= Minimum number of SCM (pmem) devices required per storage host in DAOS system -n, --num-nvme= Minimum number of NVMe devices required per storage host in DAOS system -c, --net-class=[best-available|ethernet|infiniband] Network class preferred (default: best-available) The command will output recommended config file if supplied requirements are met. Requirements will be derived based on the number of NUMA nodes present on the hosts if '--num-pmem' is not specified on the commandline. '--num-pmem' specifies the number of persistent memory (pmem) block devices that must be present on each host. This will define the number of I/O Servers that will be configured per host. If not set on the commandline, default is the number of NUMA nodes detected on the host. '--num-nvme' specifies the minimum number of NVMe SSDs present on each host per pmem device. For each pmem device selected for the generated config, this number of SSDs must be bound to the NUMA node that matches the affinity of the pmem device. If not set on the commandline, default is \"1\". '--net-class' specifies preference for network interface class, options are 'ethernet', 'infiband' or 'best-available'. 'best-available' will attempt to choose the most performant (as judged by libfabric) sets of interfaces and supported provider that match the number and NUMA affinity of pmem devices. If not set on the commandline, default is \"best-available\". The configuration file that is generated by the command and output to stdout can be copied to a file and used on the relevant hosts and used as server config to determine the starting environment for 'daos_server' instances. Config file output will not be generated in the following cases: - pmem device count, capacity or NUMA differs on any of the hosts in the host list (specified either in the 'dmg' config file or on the commandline). - NVMe SSD count, PCI address distribution or NUMA affinity differs on any of the hosts in the host list. - NUMA node count can't be detected on the hosts or differs on any host in the host list. - pmem device count or NUMA affinity doesn't match 'num-pmem' threshold. - NVMe device count or NUMA affinity doesn't match 'num-nvme' threshold. - network device count or NUMA affinity doesn't match the configured pmem devices, taking into account any specified network device class preference (ethernet or infiniband).","title":"Auto generate configuration file"},{"location":"admin/deployment/#certificate-configuration","text":"The DAOS security framework relies on certificates to authenticate components and administrators in addition to encrypting DAOS control plane communications. A set of certificates for a given DAOS system may be generated by running the gen_certificates.sh script provided with the DAOS software if there is not an existing TLS certificate infrastructure. The gen_certificates.sh script uses the openssl tool to generate all of the necessary files. We highly recommend using OpenSSL Version 1.1.1h or higher as keys and certificates generated with earlier versions are vulnerable to attack. When DAOS is installed from RPMs, this script is provided in the base daos RPM, and may be invoked in the directory to which the certificates will be written. As part of the generation process, a new local Certificate Authority is created to handle certificate signing, and three role certificates are created: # /usr/lib64/daos/certgen/gen_certificates.sh Generating Private CA Root Certificate Private CA Root Certificate created in ./daosCA ... Generating Server Certificate Required Server Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/server.key ./daosCA/certs/server.crt ... Generating Agent Certificate Required Agent Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/agent.key ./daosCA/certs/agent.crt ... Generating Admin Certificate Required Admin Certificate Files: ./daosCA/certs/daosCA.crt ./daosCA/certs/admin.key ./daosCA/certs/admin.crt The files generated under ./daosCA should be protected from unauthorized access and preserved for future use. The generated keys and certificates must then be securely distributed to all nodes participating in the DAOS system (servers, clients, and admin nodes). Permissions for these files should be set to prevent unauthorized access to the keys and certificates. Client nodes require: - CA root cert - Agent cert - Agent key Administrative nodes require: - CA root cert - Admin cert - Admin key Server nodes require: - CA root cert - Server cert - Server key - All valid agent certs in the DAOS system (in the client cert directory, see config file below) After the certificates have been securely distributed, the DAOS configuration files must be updated in order to enable authentication and secure communications. These examples assume that the configuration and certificate files have been installed under /etc/daos : # /etc/daos/daos_server.yml (servers) transport_config: # Location where daos_server will look for Client certificates client_cert_dir: /etc/daos/certs/clients # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Server certificate for use in TLS handshakes cert: /etc/daos/certs/server.crt # Key portion of Server Certificate key: /etc/daos/certs/server.key # /etc/daos/daos_agent.yml (clients) transport_config: # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Agent certificate for use in TLS handshakes cert: /etc/daos/certs/agent.crt # Key portion of Agent Certificate key: /etc/daos/certs/agent.key # /etc/daos/daos_control.yml (dmg/admin) transport_config: # Custom CA Root certificate for generated certs ca_cert: /etc/daos/certs/daosCA.crt # Admin certificate for use in TLS handshakes cert: /etc/daos/certs/admin.crt # Key portion of Admin Certificate key: /etc/daos/certs/admin.key","title":"Certificate Configuration"},{"location":"admin/deployment/#server-startup","text":"One instance of the daos_server process is to be started per storage node. The server can be started either individually (e.g. independently on each storage node via systemd) or collectively (e.g. pdsh, mpirun or as a Kubernetes Pod).","title":"Server Startup"},{"location":"admin/deployment/#parallel-launcher","text":"Practically any parallel launcher can be used to start the DAOS server collectively on a set of storage nodes. pdsh, clush and orterun are most commonly used. $ clush -w <server_list> -o \"-t -t\" daos_server start -o <config_file>` will launch daos_server on the specified hosts connecting to the port parameter value specified in the server config file. If the number of storage node exceed the default fanout value, then \"-f\" followed by the number of storage nodes should be used. Similarly, pdsh can be used: $ pdsh -w <server_list> daos_server start -o <config_file>` As for orterun, the list of storage nodes can be specified on the command line via the -H option. To start the DAOS server, run: $ orterun --map-by node --mca btl tcp,self --mca oob tcp -np <num_servers> -H <server_list> --enable-recovery daos_server start -o <config_file> The --enable-recovery is required for fault tolerance to guarantee that the fault of one server does not cause the others to be stopped. The --allow-run-as-root option can be added to the command line to allow the daos_server to run with root privileges on each storage nodes (for example when needing to perform privileged tasks relating to storage format). See the orterun(1) man page for additional options.","title":"Parallel Launcher"},{"location":"admin/deployment/#systemd-integration","text":"DAOS Server can be started as a systemd service. The DAOS Server unit file is installed in the correct location when installing from RPMs. The DAOS Server will be run as daos-server user which will be created during RPM install. If you wish to use systemd with a development build, you must copy the service file from utils/systemd to /usr/lib/systemd/system . Once the file is copied modify the ExecStart line to point to your in tree daos_server binary. Once the service file is installed you can start daos_server with the following commands: $ systemctl enable daos_server.service $ systemctl start daos_server.service To check the component status use: $ systemctl status daos_server.service If DAOS Server failed to start, check the logs with: $ journalctl --unit daos_server.service After RPM install, daos_server service starts automatically running as user \"daos\". The server config is read from /etc/daos/daos_server.yml and certificates are read from /etc/daos/certs . With no other admin intervention other than the loading of certificates, daos_server will enter a listening state enabling discovery of storage and network hardware through the dmg tool without any I/O Servers specified in the configuration file. After device discovery and provisioning, an updated configuration file with a populated per-server section can be stored in /etc/daos/daos_server.yml , and after reestarting the daos_server service it is then ready for the storage to be formatted.","title":"Systemd Integration"},{"location":"admin/deployment/#kubernetes-pod","text":"DAOS service integration with Kubernetes is planned and will be supported in a future DAOS version.","title":"Kubernetes Pod"},{"location":"admin/deployment/#daos-server-remote-access","text":"Remote tasking of the DAOS system and individual DAOS Server processes can be performed via the dmg utility. To set the addresses of which DAOS Servers to task, provide either: - -l <hostlist> on the commandline when invoking, or - hostlist: <hostlist> in the control configuration file daos_control.yml Where <hostlist> represents a slurm-style hostlist string e.g. foo-1[28-63],bar[256-511] . The first entry in the hostlist (after alphabetic then numeric sorting) will be assumed to be the access point as set in the server configuration file. Local configuration files stored in the user directory will be used in preference to the default location e.g. ~/.daos_control.yml .","title":"DAOS Server Remote Access"},{"location":"admin/deployment/#hardware-provisioning","text":"Once the DAOS server started, the storage and network can be configured on the storage nodes via the dmg utility.","title":"Hardware Provisioning"},{"location":"admin/deployment/#scm-preparation","text":"This section addresses how to verify that Optane DC Persistent Memory Module (DCPMM) is correctly installed on the storage nodes, and how to configure it in Appdirect interleaved mode to be used by DAOS. Instructions for other types of SCM may be covered in the future. Provisioning the SCM occurs by configuring DCPM modules in AppDirect memory regions (interleaved mode) in groups of modules local to a specific socket (NUMA), and resultant nvdimm namespaces are defined by a device identifier (e.g., /dev/pmem0). DCPM preparation is required once per DAOS installation and requires the DAOS Control Servers to be running as root. This step requires a reboot to enable DCPM resource allocation changes to be read by BIOS. DCPM preparation can be performed from the management tool dmg storage prepare --scm-only or using the Control Server directly sudo daos_server storage prepare --scm-only . The first time the command is run, the SCM AppDirect regions will be created as resource allocations on any available DCPM modules (one region per NUMA node/socket). The regions are activated after BIOS reads the new resource allocations, and after initial completion the command prints a message to ask for a reboot (the command will not initiate reboot itself). After running the command a reboot will be required, then the Control Servers will then need to be started again and the command run for a second time to expose the namespace device to be used by DAOS. Example usage: dmg -l wolf-[118-121,130-133] -i storage prepare --scm-only after running, the user should be prompted for a reboot. clush -w wolf-[118-121,130-133] reboot clush -w wolf-[118-121,130-133] daos_server start -o utils/config/examples/daos_server_sockets.yml dmg -l wolf-[118-121,130-133] -i storage prepare --scm-only after running, /dev/pmemX devices should be available on each of the hosts. 'sudo daos_server storage prepare --scm-only' should be run for a second time after system reboot to create the pmem kernel devices (/dev/pmemX namespaces created on the new SCM regions). On the second run, one namespace per region is created, and each namespace may take up to a few minutes to create. Details of the pmem devices will be displayed in JSON format on command completion. Example output from the initial call (with the SCM modules set to default MemoryMode): Memory allocation goals for SCM will be changed and namespaces modified, this will be a destructive operation. ensure namespaces are unmounted and SCM is otherwise unused. A reboot is required to process new memory allocation goals. Example output from the subsequent call (SCM modules configured to AppDirect mode, and host rebooted): Memory allocation goals for SCM will be changed and namespaces modified. This will be a destructive operation. Ensure namespaces are unmounted and the SCM is otherwise unused. creating SCM namespace, may take a few minutes... creating SCM namespace, may take a few minutes... Persistent memory kernel devices: [{UUID:5d2f2517-9217-4d7d-9c32-70731c9ac11e Blockdev:pmem1 Dev:namespace1.0 NumaNode:1} {UUID:2bfe6c40-f79a-4b8e-bddf-ba81d4427b9b Blockdev:pmem0 Dev:namespace0.0 NumaNode:0}] Upon successful creation of the pmem devices, DCPMM is properly configured and one can move on to the next step. If required, the pmem devices can be destroyed via the --reset option: sudo daos_server [<app_opts>] storage prepare [--scm-only|-s] --reset [<cmd_opts>] All namespaces are disabled and destroyed. The SCM regions are removed by resetting modules into \"MemoryMode\" through resource allocations. Note that undefined behavior may result if the namespaces/pmem kernel devices are mounted before running reset (as per the printed warning). A subsequent reboot is required for BIOS to read the new resource allocations. Example output when resetting the SCM modules: Memory allocation goals for SCM will be changed and namespaces modified, this will be a destructive operation. ensure namespaces are unmounted and SCM is otherwise unused. removing SCM namespace, may take a few minutes... removing SCM namespace, may take a few minutes... resetting SCM memory allocations A reboot is required to process new memory allocation goals.","title":"SCM Preparation"},{"location":"admin/deployment/#storage-selection","text":"While the DAOS server auto-detects all the usable storage, the administrator will still be provided with the ability through the configuration file (see next section) to whitelist or blacklist the storage devices to be (or not) used. This section covers how to manually detect the storage devices potentially usable by DAOS to populate the configuration file when the administrator wants to have finer control over the storage selection. dmg storage scan can be run to query remote running daos_server processes over the management network. sudo daos_server storage scan can be used to query daos_server directly (scans locally-attached SSDs and Intel Persistent Memory Modules usable by DAOS). Output will be equivalent running dmg storage scan --verbose remotely. bash-4.2$ dmg storage scan Hosts SCM Total NVMe Total ----- --------- ---------- wolf-[71-72] 6.4 TB (2 namespaces) 3.1 TB (3 controllers) bash-4.2$ dmg storage scan --verbose ------------ wolf-[71-72] ------------ SCM Namespace Socket ID Capacity ------------- --------- -------- pmem0 0 3.2 TB pmem1 1 3.2 TB NVMe PCI Model FW Revision Socket ID Capacity -------- ----- ----------- --------- -------- 0000:81:00.0 INTEL SSDPED1K750GA E2010325 1 750 GB 0000:87:00.0 INTEL SSDPEDMD016T4 8DV10171 1 1.6 TB 0000:da:00.0 INTEL SSDPED1K750GA E2010325 1 750 GB The NVMe PCI field above is what should be used in the server configuration file to identified NVMe SSDs. Devices with the same NUMA node/socket should be used in the same per-server section of the server configuration file for best performance. For further info on command usage run dmg storage --help . SSD health state can be verified via dmg storage scan --nvme-health : bash-4.2$ dmg storage scan --nvme-health ------- wolf-71 ------- PCI:0000:81:00.0 Model:INTEL SSDPED1K750GA FW:E2010325 Socket:1 Capacity:750 GB Health Stats: Temperature:318K(44.85C) Controller Busy Time:0s Power Cycles:15 Power On Duration:10402h0m0s Unsafe Shutdowns:13 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK PCI:0000:da:00.0 Model:INTEL SSDPED1K750GA FW:E2010325 Socket:1 Capacity:750 GB Health Stats: Temperature:320K(46.85C) Controller Busy Time:0s Power Cycles:15 Power On Duration:10402h0m0s Unsafe Shutdowns:13 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK ------- wolf-72 ------- PCI:0000:81:00.0 Model:INTEL SSDPED1K750GA FW:E2010435 Socket:1 Capacity:750 GB Health Stats: Temperature:316K(42.85C) Controller Busy Time:8m0s Power Cycles:23 Power On Duration:10399h0m0s Unsafe Shutdowns:18 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK PCI:0000:da:00.0 Model:INTEL SSDPED1K750GA FW:E2010435 Socket:1 Capacity:750 GB Health Stats: Temperature:320K(46.85C) Controller Busy Time:1m0s Power Cycles:23 Power On Duration:10399h0m0s Unsafe Shutdowns:19 Error Count:0 Media Errors:0 Read Errors:0 Write Errors:0 Unmap Errors:0 Checksum Errors:0 Error Log Entries:0 Critical Warnings: Temperature: OK Available Spare: OK Device Reliability: OK Read Only: OK Volatile Memory Backup: OK The next step consists of adjusting in the server configuration the storage devices that should be used by DAOS. The servers section of the yaml is a list specifying details for each DAOS I/O instance to be started on the host (currently a maximum of 2 per host is imposed). Devices with the same NUMA rating/node/socket should be colocated on a single DAOS I/O instance where possible. more details bdev_list should be populated with NVMe PCI addresses scm_list should be populated with DCPM interleaved set namespaces (e.g. /dev/pmem1 ) DAOS Control Servers will need to be restarted on all hosts after updates to the server configuration file. Pick one host in the system and set access_points to list of that host's hostname or IP address (don't need to specify port). This will be the host which bootstraps the DAOS management service (MS). To illustrate, assume a cluster with homogeneous hardware configurations that returns the following from scan for each host: [daos@wolf-72 daos_m]$ dmg -l wolf-7[1-2] -i storage scan --verbose ------- wolf-7[1-2] ------- SCM Namespace Socket ID Capacity ------------- --------- -------- pmem0 0 2.90TB pmem1 1 2.90TB NVMe PCI Model FW Revision Socket ID Capacity -------- ----- ----------- --------- -------- 0000:81:00.0 INTEL SSDPED1K750GA E2010325 0 750.00GB 0000:87:00.0 INTEL SSDPEDMD016T4 8DV10171 0 1.56TB 0000:da:00.0 INTEL SSDPED1K750GA E2010325 1 750.00GB In this situation, the configuration file servers section could be populated as follows: <snip> port: 10001 access_points: [\"wolf-71\"] # <----- updated <snip> servers: - targets: 8 # count of storage targets per each server first_core: 0 # offset of the first core for service xstreams nr_xs_helpers: 2 # count of offload/helper xstreams per target fabric_iface: eth0 # map to OFI_INTERFACE=eth0 fabric_iface_port: 31416 # map to OFI_PORT=31416 log_mask: ERR # map to D_LOG_MASK=ERR log_file: /tmp/server.log # map to D_LOG_FILE=/tmp/server.log env_vars: # influence DAOS IO Server behavior by setting env variables - DAOS_MD_CAP=1024 - CRT_CTX_SHARE_ADDR=0 - CRT_TIMEOUT=30 - FI_SOCKETS_MAX_CONN_RETRY=1 - FI_SOCKETS_CONN_TIMEOUT=2000 scm_mount: /mnt/daos # map to -s /mnt/daos scm_class: dcpm scm_list: [/dev/pmem0] # <----- updated bdev_class: nvme bdev_list: [\"0000:87:00.0\", \"0000:81:00.0\"] # <----- updated - targets: 8 # count of storage targets per each server first_core: 0 # offset of the first core for service xstreams nr_xs_helpers: 2 # count of offload/helper xstreams per target fabric_iface: eth0 # map to OFI_INTERFACE=eth0 fabric_iface_port: 31416 # map to OFI_PORT=31416 log_mask: ERR # map to D_LOG_MASK=ERR log_file: /tmp/server.log # map to D_LOG_FILE=/tmp/server.log env_vars: # influence DAOS IO Server behavior by setting env variables - DAOS_MD_CAP=1024 - CRT_CTX_SHARE_ADDR=0 - CRT_TIMEOUT=30 - FI_SOCKETS_MAX_CONN_RETRY=1 - FI_SOCKETS_CONN_TIMEOUT=2000 scm_mount: /mnt/daos # map to -s /mnt/daos scm_class: dcpm scm_list: [/dev/pmem1] # <----- updated bdev_class: nvme bdev_list: [\"0000:da:00.0\"] # <----- updated <end>","title":"Storage Selection"},{"location":"admin/deployment/#network-scan-and-configuration","text":"The daos_server supports the network scan function to display the network interfaces, related OFI fabric providers and associated NUMA node for each device. This information is used to configure the global fabric provider and the unique local network interface for each I/O Server instance on this node. This section will help you determine what to provide for the provider , fabric_iface and pinned_numa_node entries in the daos_server.yml file. The following commands are typical examples: daos_server network scan daos_server network scan -p all daos_server network scan -p ofi+sockets daos_server network scan --provider 'ofi+verbs;ofi_rxm' In the early stages when a daos_server has not yet been fully configured and lacks a declaration of the system's fabric provider, it may be helpful to view an unfiltered list of scan results. Use either of these daos_server commands in the early stages to accomplish this goal: daos_server network scan daos_server network scan -p all Typical network scan results look as follows: $ daos_server network scan -p all --------- localhost --------- ------------- NUMA Socket 0 ------------- Provider Interfaces -------- ---------- ofi+verbs;ofi_rxm ib0 ofi+tcp;ofi_rxm ib0, eth0 ofi+verbs ib0 ofi+tcp ib0, eth0 ofi+sockets ib0, eth0 ofi+psm2 ib0 ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+verbs;ofi_rxm ib1 ofi+tcp;ofi_rxm ib1 ofi+verbs ib1 ofi+tcp ib1 ofi+sockets ib1 ofi+psm2 ib1 Use one of these providers to configure the provider in the daos_server.yml. Only one provider may be specified for the entire DAOS installation. Client nodes must be capable of communicating to the daos_server nodes via the same provider. Therefore, it is helpful to choose network settings for the daos_server that are compatible with the expected client node configuration. After the daos_server.yml file has been edited and contains a provider, subsequent daos_server network scan commands will filter the results based on that provider. If it is desired to view an unfiltered list again, issue daos_server network scan -p all . Regardless of the provider in the daos_server.yml file, the results may be filtered to the specified provider with the command daos_server network scan -p ofi_provider where ofi_provider is one of the available providers from the list. The results of the network scan may be used to help configure the I/O Server instances for this daos_server node. Each I/O Server instance is configured with a unique fabric_iface and optional pinned_numa_node . The interfaces and NUMA Sockets listed in the scan results map to the daos_server.yml fabric_iface and pinned_numa_node respectively. The use of pinned_numa_node is optional, but recommended for best performance. When specified with the value that matches the network interface, the I/O Server will bind itself to that NUMA node and to cores purely within that NUMA node. This configuration yields the fastest access to that network device.","title":"Network Scan and Configuration"},{"location":"admin/deployment/#changing-network-providers","text":"Information about the network configuration is stored as metadata on the DAOS storage. If, after initial deployment, the provider must be changed, it is necessary to reformat the storage devices using dmg storage format after the configuration file has been updated with the new provider.","title":"Changing Network Providers"},{"location":"admin/deployment/#network-scanning-all-daos-server-nodes","text":"While the daos_server network scan is useful for scanning the localhost, it does not provide results for any other daos_server instance on the network. The DAOS Management tool, dmg , is used for that purpose. The network scan operates the same way as the daos_server network scan, however, to use the dmg tool, at least one known daos_server instance must be running. The command dmg network scan performs a query over all daos_servers in the daos_control.yml hostlist . By default, the scan will return results that are filtered by the provider that is specified in the daos_server.yml. Like the daos_server network scan , the dmg network scan supports the optional -p/--provider where a different provider may be specified, or all for an unfiltered list that is unrelated to what was already configured on the daos_server installation. dmg network scan ------- wolf-29 ------- ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+sockets ib1 --------- localhost --------- ------------- NUMA Socket 0 ------------- Provider Interfaces -------- ---------- ofi+sockets ib0, eth0 ------------- NUMA Socket 1 ------------- Provider Interfaces -------- ---------- ofi+sockets ib1","title":"Network Scanning All DAOS Server Nodes"},{"location":"admin/deployment/#provider-configuration-and-debug","text":"To aid in provider configuration and debug, it may be helpful to run the fi_pingpong test (delivered as part of OFI/libfabric). To run that test, determine the name of the provider to test usually by removing the \"ofi+\" prefix from the network scan provider data. Do use the \"ofi+\" prefix in the daos_server.yml. Do not use the \"ofi+\" prefix with fi_pingpong. Then, the fi_pingpong test can be used to verify that the targeted OFI provider works fine: node1$ fi_pingpong -p psm2 node2$ fi_pingpong -p psm2 ${IP_ADDRESS_NODE1} bytes #sent #ack total time MB/sec usec/xfer Mxfers/sec 64 10 =10 1.2k 0.00s 21.69 2.95 0.34 256 10 =10 5k 0.00s 116.36 2.20 0.45 1k 10 =10 20k 0.00s 379.26 2.70 0.37 4k 10 =10 80k 0.00s 1077.89 3.80 0.26 64k 10 =10 1.2m 0.00s 2145.20 30.55 0.03 1m 10 =10 20m 0.00s 8867.45 118.25 0.01","title":"Provider Configuration and Debug"},{"location":"admin/deployment/#storage-formatting","text":"Once the daos_server has been restarted with the correct storage devices and network interface to use, one can move to the format phase. When daos_server is started for the first time, it enters \"maintenance mode\" and waits for a dmg storage format call to be issued from the management tool. This remote call will trigger the formatting of the locally attached storage on the host for use with DAOS using the parameters defined in the server config file. dmg -i -l <host>[,...] storage format will normally be run on a login node specifying a hostlist ( -l <host>[,...] ) of storage nodes with SCM/DCPM modules and NVMe SSDs installed and prepared. Upon successful format, DAOS Control Servers will start DAOS IO instances that have been specified in the server config file. Successful start-up is indicated by the following on stdout: DAOS I/O server (v0.8.0) process 433456 started on rank 1 with 8 target, 2 helper XS per target, firstcore 0, host wolf-72.wolf.hpdd.intel.com.","title":"Storage Formatting"},{"location":"admin/deployment/#scm-format","text":"When the command is run, the pmem kernel devices created on SCM/DCPM regions are formatted and mounted based on the parameters provided in the server config file. scm_mount specifies the location of the mountpoint to create. scm_class can be set to ram to use a tmpfs in the situation that no SCM/DCPM is available ( scm_size dictates the size of tmpfs in GB), when set to dcpm the device specified under scm_list will be mounted at scm_mount path.","title":"SCM Format"},{"location":"admin/deployment/#nvme-format","text":"When the command is run, NVMe SSDs are formatted and set up to be used by DAOS based on the parameters provided in the server config file. bdev_class can be set to nvme to use actual NVMe devices with SPDK for DAOS storage. Other bdev_class values can be used for emulation of NVMe storage as specified in the server config file. bdev_list identifies devices to use with a list of PCI addresses (this can be populated after viewing results from storage scan command). After the format command is run, the path specified by the server configuration file scm_mount parameter should be mounted and should contain a file named daos_nvme.conf . The file should describe the devices with PCI addresses as listed in the bdev_list parameter of the server config file. The presence and contents of the file indicate that the specified NVMe SSDs have been configured correctly for use with DAOS. The contents of the NVMe SSDs listed in the server configuration file bdev_list parameter will be reset on format.","title":"NVMe Format"},{"location":"admin/deployment/#server-format","text":"Before the format command is run, no DAOS metadata should exist under the path specified by scm_mount parameter in the server configuration file. After the storage format command is run, the path specified by the server configuration file scm_mount parameter should be mounted and should contain the necessary DAOS metadata indicating that the server has been formatted. When starting, daos_server will skip maintenance mode and attempt to start I/O Servers if valid DAOS metadata is found in scm_mount .","title":"Server Format"},{"location":"admin/deployment/#agent-setup","text":"This section addresses how to configure the DAOS agents on the storage nodes before starting it.","title":"Agent Setup"},{"location":"admin/deployment/#agent-certificate-generation","text":"The DAOS security framework relies on certificates to authenticate administrators. The security infrastructure is currently under development and will be delivered in DAOS v1.0. Initial support for certificates has been added to DAOS and can be disabled either via the command line or in the DAOS Agent configuration file. Currently, the easiest way to disable certificate support is to pass the -i flag to daos_agent .","title":"Agent Certificate Generation"},{"location":"admin/deployment/#agent-configuration-file","text":"The daos_agent configuration file is parsed when starting the daos_agent process. The configuration file location can be specified on the command line ( daos_agent -h for usage) or default location ( install/etc/daos_agent.yml ). If installed from rpms the default location is ( /etc/daos/daos_agent.yml ). Parameter descriptions are specified in daos_agent.yml . Any option supplied to daos_agent as a command line option or flag will take precedence over equivalent configuration file parameter. For convenience, active parsed config values are written to a temporary file for reference, and the location will be written to the log. The following section lists the format, options, defaults, and descriptions available in the configuration file. The example configuration file lists the default empty configuration listing all the options (living documentation of the config file). Live examples are available at https://github.com/daos-stack/daos/tree/master/utils/config The location of this configuration file is determined by first checking for the path specified through the -o option of the daos_agent command line. Otherwise, /etc/daos/daos_agent.yml is used. Refer to the example configuration file ( daos_agent.yml ) for latest information and examples.","title":"Agent Configuration File"},{"location":"admin/deployment/#agent-startup","text":"DAOS Agent is a standalone application to be run on each compute node. It can be configured to use secure communications (default) or can be allowed to communicate with the control plane over unencrypted channels. The following example shows daos_agent being configured to operate in insecure mode due to incomplete integration of certificate support as of the 0.6 release and configured to use a non-default agent configuration file. To start the DAOS Agent from the command line, run: $ daos_agent -i -o <'path to agent configuration file/daos_agent.yml'> & Alternatively, the DAOS Agent can be started as a systemd service. The DAOS Agent unit file is installed in the correct location when installing from RPMs. If you want to run the DAOS Agent without certificates (not recommended in production deployments), you need to add the -i option to the systemd ExecStart invocation (see below). If you wish to use systemd with a development build, you must copy the service file from utils/systemd to /usr/lib/systemd/system . Once the file is copied modify the ExecStart line to point to your in tree daos_agent binary. ExecStart=/usr/bin/daos_agent -i -o <'path to agent configuration file/daos_agent.yml'> Once the service file is installed, you can start daos_agent with the following commands: $ sudo systemctl daemon-reload $ sudo systemctl enable daos_agent.service $ sudo systemctl start daos_agent.service To check the component status use: $ sudo systemctl status daos_agent.service If DAOS Agent failed to start check the logs with: $ sudo journalctl --unit daos_agent.service","title":"Agent Startup"},{"location":"admin/deployment/#system-validation","text":"To validate that the DAOS system is properly installed, the daos_test suite can be executed. Ensure the DAOS Agent is configured before running daos_test . If the agent is using a non-default path for the socket, then configure DAOS_AGENT_DRPC_DIR in the client environment to point to this new location. DAOS automatically configures a client with a compatible fabric provider, network interface, network domain, CaRT timeout, and CaRT context share address, that will allow it to connect to the DAOS system. The client may not override the fabric provider or the CaRT context share address. A client application may override the three remaining settings by configuring environment variables in the client's shell prior to launch. To manually configure the CaRT timeout, set CRT_TIMEOUT such as: export CRT_TIMEOUT=5 To manually configure the network interface, set OFI_INTERFACE such as: export OFI_INTERFACE=lo When manually configuring an Infiniband device with a verbs provider, the network device domain is required. To manually configure the domain, set OFI_DOMAIN such as: export OFI_DOMAIN=hfi1_0","title":"System Validation"},{"location":"admin/deployment/#launch-the-client-application","text":"mpirun -np <num_clients> --hostfile <hostfile> ./daos_test daos_test requires at least 8GB of SCM (or DRAM with tmpfs) storage on each storage node. https://github.com/intel/ipmctl \u21a9 https://github.com/daos-stack/daos/tree/master/utils/config \u21a9 https://www.open-mpi.org/faq/?category=running#mpirun-hostfile \u21a9 https://github.com/daos-stack/daos/tree/master/src/control/README.md \u21a9","title":"Launch the client application"},{"location":"admin/env_variables/","text":"DAOS Environment Variables \u00b6 This section lists the environment variables used by DAOS. !!!warning Many of these variables are used for development purposes only, and may be removed or changed in the future. The description of each variable follows the following format: Short description Type The default behavior if not set. A longer description if necessary Type is defined by this table: Type Values BOOL 0 means false; any other value means true BOOL2 no means false; any other value means true BOOL3 set to empty, or any value means true; unset means false INTEGER Non-negative decimal integer STRING String Server environment variables \u00b6 Environment variables in this section only apply to the server side. Variable Description VOS_CHECKSUM Checksum algorithm used by VOS. STRING. Default to disabling checksums. The following checksum algorithms are supported: crc64 and crc32. VOS_MEM_CLASS Memory class used by VOS. STRING. Default to persistent memory. If the value is set to DRAM, all data is stored in volatile memory. Otherwise, all data is stored in persistent memory. RDB_ELECTION_TIMEOUT Raft election timeout used by RDBs in milliseconds. INTEGER. Default to 7000 ms. RDB_REQUEST_TIMEOUT Raft request timeout used by RDBs in milliseconds. INTEGER. Default to 3000 ms. DAOS_REBUILD Determines whether to start rebuilds when excluding targets. BOOL2. Default to true. DAOS_MD_CAP Size of a metadata pmem pool/file in MBs. INTEGER. Default to 128 MB. DAOS_START_POOL_SVC Determines whether to start existing pool services when starting a daos_server. BOOL. Default to true. DAOS_IMPLICIT_PURGE Whether to aggregate unreferenced epochs. BOOL. Default to false. DAOS_PURGE_CREDITS The number of credits for probing object trees when aggregating unreferenced epochs. INTEGER. Default to 1000. CRT_DISABLE_MEM_PIN Disable memory pinning workaround on a server side. BOOL. Default to 0. Server and Client environment variables \u00b6 Environment variables in this section apply to both the server side and the client side. Variable Description FI_OFI_RXM_USE_SRX Enable shared receive buffers for RXM-based providers (verbs, tcp). BOOL. Auto-defaults to 1. FI_UNIVERSE_SIZE Sets expected universe size in OFI layer to be more than expected number of clients. INTEGER. Auto-defaults to 2048. Client environment variables \u00b6 Environment variables in this section only apply to the client side. Variable Description FI_MR_CACHE_MAX_COUNT Enable MR caching in OFI layer. Recommended to be set to 0 (disable) when CRT_DISABLE_MEM_PIN is NOT set to 1. INTEGER. Default to unset. Debug System (Client & Server) \u00b6 Variable Description D_LOG_FILE DAOS debug logs (both server and client) are written to /tmp/daos.log by default. The debug location can be modified by setting this environment variable (\"D_LOG_FILE=/tmp/daos_debug.log\"). D_LOG_SIZE DAOS debug logs (both server and client) have a 1GB file size limit by default. When this limit is reached, the current log file is closed and renamed with a .old suffix, and a new one is opened. This mechanism will repeat each time the limit is reached, meaning that available saved log records could be found in both ${D_LOG_FILE} and last generation of ${D_LOG_FILE}.old files, to a maximum of the most recent 2*D_LOG_SIZE records. This can be modified by setting this environment variable (\"D_LOG_SIZE=536870912\"). Sizes can also be specified in human-readable form using k , m , g , K , M , and G . The lower-case specifiers are base-10 multipliers and the upper case specifiers are base-2 multipliers. DD_SUBSYS Used to specify which subsystems to enable. DD_SUBSYS can be set to individual subsystems for finer-grained debugging (\"DD_SUBSYS=vos\"), multiple facilities (\"DD_SUBSYS=eio,mgmt,misc,mem\"), or all facilities (\"DD_SUBSYS=all\") which is also the default setting. If a facility is not enabled, then only ERR messages or more severe messages will print. DD_STDERR Used to specify the priority level to output to stderr. Options in decreasing priority level order: FATAL, CRIT, ERR, WARN, NOTE, INFO, DEBUG. By default, all CRIT and more severe DAOS messages will log to stderr (\"DD_STDERR=CRIT\"), and the default for CaRT/GURT is FATAL. D_LOG_MASK Used to specify what type/level of logging will be present for either all of the registered subsystems or a select few. Options in decreasing priority level order: FATAL, CRIT, ERR, WARN, NOTE, INFO, DEBUG. DEBUG option is used to enable all logging (debug messages as well as all higher priority level messages). Note that if D_LOG_MASK is not set, it will default to logging all messages excluding debug (\"D_LOG_MASK=INFO\"). Example: \"D_LOG_MASK=DEBUG\". This will set the logging level for all facilities to DEBUG, meaning that all debug messages, as well as higher priority messages will be logged (INFO, NOTE, WARN, ERR, CRIT, FATAL). Example 2: \"D_LOG_MASK=DEBUG,MEM=ERR,RPC=ERR\". This will set the logging level to DEBUG for all facilities except MEM & RPC (which will now only log ERR and higher priority level messages, skipping all DEBUG, INFO, NOTE & WARN messages) DD_MASK Used to enable different debug streams for finer-grained debug messages, essentially allowing the user to specify an area of interest to debug (possibly involving many different subsystems) as opposed to parsing through many lines of generic DEBUG messages. All debug streams will be enabled by default (\"DD_MASK=all\"). Single debug masks can be set (\"DD_MASK=trace\") or multiple masks (\"DD_MASK=trace,test,mgmt\"). Note that since these debug streams are strictly related to the debug log messages, DD_LOG_MASK must be set to DEBUG. Priority messages higher than DEBUG will still be logged for all facilities unless otherwise specified by D_LOG_MASK (not affected by enabling debug masks).","title":"Environment Variables"},{"location":"admin/env_variables/#daos-environment-variables","text":"This section lists the environment variables used by DAOS. !!!warning Many of these variables are used for development purposes only, and may be removed or changed in the future. The description of each variable follows the following format: Short description Type The default behavior if not set. A longer description if necessary Type is defined by this table: Type Values BOOL 0 means false; any other value means true BOOL2 no means false; any other value means true BOOL3 set to empty, or any value means true; unset means false INTEGER Non-negative decimal integer STRING String","title":"DAOS Environment Variables"},{"location":"admin/env_variables/#server-environment-variables","text":"Environment variables in this section only apply to the server side. Variable Description VOS_CHECKSUM Checksum algorithm used by VOS. STRING. Default to disabling checksums. The following checksum algorithms are supported: crc64 and crc32. VOS_MEM_CLASS Memory class used by VOS. STRING. Default to persistent memory. If the value is set to DRAM, all data is stored in volatile memory. Otherwise, all data is stored in persistent memory. RDB_ELECTION_TIMEOUT Raft election timeout used by RDBs in milliseconds. INTEGER. Default to 7000 ms. RDB_REQUEST_TIMEOUT Raft request timeout used by RDBs in milliseconds. INTEGER. Default to 3000 ms. DAOS_REBUILD Determines whether to start rebuilds when excluding targets. BOOL2. Default to true. DAOS_MD_CAP Size of a metadata pmem pool/file in MBs. INTEGER. Default to 128 MB. DAOS_START_POOL_SVC Determines whether to start existing pool services when starting a daos_server. BOOL. Default to true. DAOS_IMPLICIT_PURGE Whether to aggregate unreferenced epochs. BOOL. Default to false. DAOS_PURGE_CREDITS The number of credits for probing object trees when aggregating unreferenced epochs. INTEGER. Default to 1000. CRT_DISABLE_MEM_PIN Disable memory pinning workaround on a server side. BOOL. Default to 0.","title":"Server environment variables"},{"location":"admin/env_variables/#server-and-client-environment-variables","text":"Environment variables in this section apply to both the server side and the client side. Variable Description FI_OFI_RXM_USE_SRX Enable shared receive buffers for RXM-based providers (verbs, tcp). BOOL. Auto-defaults to 1. FI_UNIVERSE_SIZE Sets expected universe size in OFI layer to be more than expected number of clients. INTEGER. Auto-defaults to 2048.","title":"Server and Client environment variables"},{"location":"admin/env_variables/#client-environment-variables","text":"Environment variables in this section only apply to the client side. Variable Description FI_MR_CACHE_MAX_COUNT Enable MR caching in OFI layer. Recommended to be set to 0 (disable) when CRT_DISABLE_MEM_PIN is NOT set to 1. INTEGER. Default to unset.","title":"Client environment variables"},{"location":"admin/env_variables/#debug-system-client-server","text":"Variable Description D_LOG_FILE DAOS debug logs (both server and client) are written to /tmp/daos.log by default. The debug location can be modified by setting this environment variable (\"D_LOG_FILE=/tmp/daos_debug.log\"). D_LOG_SIZE DAOS debug logs (both server and client) have a 1GB file size limit by default. When this limit is reached, the current log file is closed and renamed with a .old suffix, and a new one is opened. This mechanism will repeat each time the limit is reached, meaning that available saved log records could be found in both ${D_LOG_FILE} and last generation of ${D_LOG_FILE}.old files, to a maximum of the most recent 2*D_LOG_SIZE records. This can be modified by setting this environment variable (\"D_LOG_SIZE=536870912\"). Sizes can also be specified in human-readable form using k , m , g , K , M , and G . The lower-case specifiers are base-10 multipliers and the upper case specifiers are base-2 multipliers. DD_SUBSYS Used to specify which subsystems to enable. DD_SUBSYS can be set to individual subsystems for finer-grained debugging (\"DD_SUBSYS=vos\"), multiple facilities (\"DD_SUBSYS=eio,mgmt,misc,mem\"), or all facilities (\"DD_SUBSYS=all\") which is also the default setting. If a facility is not enabled, then only ERR messages or more severe messages will print. DD_STDERR Used to specify the priority level to output to stderr. Options in decreasing priority level order: FATAL, CRIT, ERR, WARN, NOTE, INFO, DEBUG. By default, all CRIT and more severe DAOS messages will log to stderr (\"DD_STDERR=CRIT\"), and the default for CaRT/GURT is FATAL. D_LOG_MASK Used to specify what type/level of logging will be present for either all of the registered subsystems or a select few. Options in decreasing priority level order: FATAL, CRIT, ERR, WARN, NOTE, INFO, DEBUG. DEBUG option is used to enable all logging (debug messages as well as all higher priority level messages). Note that if D_LOG_MASK is not set, it will default to logging all messages excluding debug (\"D_LOG_MASK=INFO\"). Example: \"D_LOG_MASK=DEBUG\". This will set the logging level for all facilities to DEBUG, meaning that all debug messages, as well as higher priority messages will be logged (INFO, NOTE, WARN, ERR, CRIT, FATAL). Example 2: \"D_LOG_MASK=DEBUG,MEM=ERR,RPC=ERR\". This will set the logging level to DEBUG for all facilities except MEM & RPC (which will now only log ERR and higher priority level messages, skipping all DEBUG, INFO, NOTE & WARN messages) DD_MASK Used to enable different debug streams for finer-grained debug messages, essentially allowing the user to specify an area of interest to debug (possibly involving many different subsystems) as opposed to parsing through many lines of generic DEBUG messages. All debug streams will be enabled by default (\"DD_MASK=all\"). Single debug masks can be set (\"DD_MASK=trace\") or multiple masks (\"DD_MASK=trace,test,mgmt\"). Note that since these debug streams are strictly related to the debug log messages, DD_LOG_MASK must be set to DEBUG. Priority messages higher than DEBUG will still be logged for all facilities unless otherwise specified by D_LOG_MASK (not affected by enabling debug masks).","title":"Debug System (Client &amp; Server)"},{"location":"admin/hardware/","text":"Hardware Requirements \u00b6 The purpose of this section is to describe processor, storage, and network requirements to deploy a DAOS system. Deployment Options \u00b6 As illustrated in the figure below, a DAOS storage system can be deployed in two different ways: Pooled Storage Model : The DAOS servers can run on dedicated storage nodes in separate racks. This is a traditional pool model where storage is uniformly accessed by all compute nodes. In order to minimize the number of I/O racks and to optimize floor space, this approach usually requires high-density storage servers. Hyper-converged Storage Model : In this model, the storage nodes are integrated into compute racks and can be either dedicated or shared nodes. The DAOS servers are thus massively distributed, and storage access is non-uniform and must take locality into account. This model is common in hyper-converged infrastructure. While DAOS is mostly deployed following the pooled model, active research is conducted to efficiently support the hyper-converged model as well. Processor Requirements \u00b6 DAOS requires a 64-bit processor architecture and is primarily developed on Intel x86_64 architecture. The DAOS software and the libraries it depends on (e.g., ISA-L, SPDK, PMDK, and DPDK) can take advantage of Intel SSE and AVX extensions. DAOS is also regularly tested on 64-bit ARM processors configured in Little Endian mode. The same build instructions that are used for x86_64 are applicable for ARM builds as well. DAOS and its dependencies will make the necessary adjustments automatically in their respective build systems for ARM platforms. Network Requirements \u00b6 The DAOS network layer relies on libfabrics and supports OFI providers for Ethernet/sockets, InfiniBand/verbs, RoCE, Cray GNI, and Intel Omni-Path Architecture (OPA). An RDMA-capable fabric is preferred for better performance. DAOS can support multiple rails by binding different instances of the DAOS server to individual network cards. The DAOS control plane provides methods for administering and managing the DAOS servers using a secure socket layer interface. An additional out-of-band network connecting the nodes in the DAOS service cluster is required for DAOS administration. Management traffic between clients and servers uses IP over Fabric. Storage Requirements \u00b6 DAOS requires each storage node to have direct access to storage-class memory (SCM). While DAOS is primarily tested and tuned for Optane DC Persistent Memory, the DAOS software stack is built over the Persistent Memory Development Kit (PMDK) and the DAX feature of the Linux and Windows operating systems as described in the SNIA NVM Programming Model 1 . As a result, the open-source DAOS software stack should be able to run transparently over any storage-class memory supported by the PMDK. The storage node can optionally be equipped with NVMe (non-volatile memory express) SSDs to provide capacity. HDDs, as well as SATA and SAS SSDs, are not supported by DAOS. Both NVMe 3D-NAND and Optane SSDs are supported. Optane SSDs are preferred for DAOS installation that targets a very high IOPS rate. NVMe-oF devices are also supported by the userspace storage stack but have never been tested. A minimum 6% ratio of SCM to SSD capacity will guarantee that DAOS has enough space in SCM to store its internal metadata (e.g., pool metadata, SSD block allocation tracking). For testing purposes, SCM can be emulated with DRAM by mounting a tmpfs filesystem, and NVMe SSDs can be also emulated with DRAM or a loopback file. Storage Server Design \u00b6 The hardware design of a DAOS storage server balances the network bandwidth of the fabric with the aggregate storage bandwidth of the NVMe storage devices. This relationship sets the number of NVMe drives. For example, 8 PCIe gen4 x4 NVMe SSDs balance two 200Gbps PCIe gen4 x16 network adapters. The capacity of the SSDs will determine the minimum capacity of the Optane PMem DIMMs needed to provide the 6% ratio for DAOS metadata. CPU Affinity \u00b6 Recent Intel Xeon data center platforms use two processor CPUs connected together with the Ultra Path Interconnect (UPI). PCIe lanes in these servers have a natural affinity to one CPU. Although globally accessible from any of the system cores, NVMe SSDs and network interface cards connected through the PCIe bus may provide different performance characteristics (e.g., higher latency, lower bandwidth) to each CPU. Accessing non-local PCIe devices may involve traffic over the UPI link that might become a point of congestion. Similarly, persistent memory is non-uniformly accessible (NUMA), and CPU affinity must be respected for maximal performance. Therefore, when running in a multi-socket and multi-rail environment, the DAOS service must be able to detect the CPU to PCIe device and persistent memory affinity and minimize as much as possible non-local access. This can be achieved by spawning one instance of the I/O server per CPU, then accessing only the persistent memory and PCI devices local to that CPU from that server instance. The DAOS control plane is responsible for detecting the storage and network affinity and starting the I/O servers accordingly. Fault Domains \u00b6 DAOS relies on single-ported storage massively distributed across different storage nodes. Each storage node is thus a single point of failure. DAOS achieves fault tolerance by providing data redundancy across storage nodes in different fault domains. DAOS assumes that fault domains are hierarchical and do not overlap. For instance, the first level of a fault domain could be the racks and the second one, the storage nodes. For efficient placement and optimal data resilience, more fault domains are better. As a result, it is preferable to distribute storage nodes across as many racks as possible. https://www.snia.org/sites/default/files/ technical_work/final/NVMProgrammingModel_v1.2.pdf \u21a9","title":"Hardware Requirements"},{"location":"admin/hardware/#hardware-requirements","text":"The purpose of this section is to describe processor, storage, and network requirements to deploy a DAOS system.","title":"Hardware Requirements"},{"location":"admin/hardware/#deployment-options","text":"As illustrated in the figure below, a DAOS storage system can be deployed in two different ways: Pooled Storage Model : The DAOS servers can run on dedicated storage nodes in separate racks. This is a traditional pool model where storage is uniformly accessed by all compute nodes. In order to minimize the number of I/O racks and to optimize floor space, this approach usually requires high-density storage servers. Hyper-converged Storage Model : In this model, the storage nodes are integrated into compute racks and can be either dedicated or shared nodes. The DAOS servers are thus massively distributed, and storage access is non-uniform and must take locality into account. This model is common in hyper-converged infrastructure. While DAOS is mostly deployed following the pooled model, active research is conducted to efficiently support the hyper-converged model as well.","title":"Deployment Options"},{"location":"admin/hardware/#processor-requirements","text":"DAOS requires a 64-bit processor architecture and is primarily developed on Intel x86_64 architecture. The DAOS software and the libraries it depends on (e.g., ISA-L, SPDK, PMDK, and DPDK) can take advantage of Intel SSE and AVX extensions. DAOS is also regularly tested on 64-bit ARM processors configured in Little Endian mode. The same build instructions that are used for x86_64 are applicable for ARM builds as well. DAOS and its dependencies will make the necessary adjustments automatically in their respective build systems for ARM platforms.","title":"Processor Requirements"},{"location":"admin/hardware/#network-requirements","text":"The DAOS network layer relies on libfabrics and supports OFI providers for Ethernet/sockets, InfiniBand/verbs, RoCE, Cray GNI, and Intel Omni-Path Architecture (OPA). An RDMA-capable fabric is preferred for better performance. DAOS can support multiple rails by binding different instances of the DAOS server to individual network cards. The DAOS control plane provides methods for administering and managing the DAOS servers using a secure socket layer interface. An additional out-of-band network connecting the nodes in the DAOS service cluster is required for DAOS administration. Management traffic between clients and servers uses IP over Fabric.","title":"Network Requirements"},{"location":"admin/hardware/#storage-requirements","text":"DAOS requires each storage node to have direct access to storage-class memory (SCM). While DAOS is primarily tested and tuned for Optane DC Persistent Memory, the DAOS software stack is built over the Persistent Memory Development Kit (PMDK) and the DAX feature of the Linux and Windows operating systems as described in the SNIA NVM Programming Model 1 . As a result, the open-source DAOS software stack should be able to run transparently over any storage-class memory supported by the PMDK. The storage node can optionally be equipped with NVMe (non-volatile memory express) SSDs to provide capacity. HDDs, as well as SATA and SAS SSDs, are not supported by DAOS. Both NVMe 3D-NAND and Optane SSDs are supported. Optane SSDs are preferred for DAOS installation that targets a very high IOPS rate. NVMe-oF devices are also supported by the userspace storage stack but have never been tested. A minimum 6% ratio of SCM to SSD capacity will guarantee that DAOS has enough space in SCM to store its internal metadata (e.g., pool metadata, SSD block allocation tracking). For testing purposes, SCM can be emulated with DRAM by mounting a tmpfs filesystem, and NVMe SSDs can be also emulated with DRAM or a loopback file.","title":"Storage Requirements"},{"location":"admin/hardware/#storage-server-design","text":"The hardware design of a DAOS storage server balances the network bandwidth of the fabric with the aggregate storage bandwidth of the NVMe storage devices. This relationship sets the number of NVMe drives. For example, 8 PCIe gen4 x4 NVMe SSDs balance two 200Gbps PCIe gen4 x16 network adapters. The capacity of the SSDs will determine the minimum capacity of the Optane PMem DIMMs needed to provide the 6% ratio for DAOS metadata.","title":"Storage Server Design"},{"location":"admin/hardware/#cpu-affinity","text":"Recent Intel Xeon data center platforms use two processor CPUs connected together with the Ultra Path Interconnect (UPI). PCIe lanes in these servers have a natural affinity to one CPU. Although globally accessible from any of the system cores, NVMe SSDs and network interface cards connected through the PCIe bus may provide different performance characteristics (e.g., higher latency, lower bandwidth) to each CPU. Accessing non-local PCIe devices may involve traffic over the UPI link that might become a point of congestion. Similarly, persistent memory is non-uniformly accessible (NUMA), and CPU affinity must be respected for maximal performance. Therefore, when running in a multi-socket and multi-rail environment, the DAOS service must be able to detect the CPU to PCIe device and persistent memory affinity and minimize as much as possible non-local access. This can be achieved by spawning one instance of the I/O server per CPU, then accessing only the persistent memory and PCI devices local to that CPU from that server instance. The DAOS control plane is responsible for detecting the storage and network affinity and starting the I/O servers accordingly.","title":"CPU Affinity"},{"location":"admin/hardware/#fault-domains","text":"DAOS relies on single-ported storage massively distributed across different storage nodes. Each storage node is thus a single point of failure. DAOS achieves fault tolerance by providing data redundancy across storage nodes in different fault domains. DAOS assumes that fault domains are hierarchical and do not overlap. For instance, the first level of a fault domain could be the racks and the second one, the storage nodes. For efficient placement and optimal data resilience, more fault domains are better. As a result, it is preferable to distribute storage nodes across as many racks as possible. https://www.snia.org/sites/default/files/ technical_work/final/NVMProgrammingModel_v1.2.pdf \u21a9","title":"Fault Domains"},{"location":"admin/installation/","text":"Software Installation \u00b6 DAOS runs on both Intel x86_64 and ARM64 platforms, and has been successfully tested on CentOS 7, OpenSUSE Leap 15.1, and Ubuntu 20.04 distributions. The majority of testing has been performed on Centos 7.7 and SLES 15, with Centos being used in the majority of the test cycles. Software Dependencies \u00b6 DAOS requires a C99-capable compiler, a Go compiler, and the scons build tool. Moreover, the DAOS stack leverages the following open source projects: CaRT for high-performance communication leveraging advanced network capabilities. gRPC provides a secured out-of-band channel for DAOS administration. PMDK for persistent memory programming. SPDK for userspace NVMe device access and management. FIO for flexible testing of Linux I/O subsystems, specifically enabling validation of userspace NVMe device performance through fio-spdk plugin. ISA-L for checksum and erasure code ISA-L_Crypto for checksum computation. Argobots for thread management. hwloc for discovering system devices, detecting their NUMA node affinity and for CPU binding libfabric for detecting fabric interfaces, providers, and connection management. The DAOS build system can be configured to download and build any missing dependencies automatically. Distribution Packages \u00b6 DAOS RPM packaging is currently available, and DEB packaging is under development and will be available in a future DAOS release. Integration with the Spack package manager is also under consideration. Installing DAOS from RPMs \u00b6 DAOS RPMs are available from the Intel\u00a9 Registration Center. Clicking the Intel\u00a9 Registration Center link will take you to the registration center, where you will create an account. After creating an account, the following files can be downloaded: daos_debug.tar - debuginfo packages daos_packages.tar - client and server main packages daos_source.tar - source RPMs Recommended steps after download: sudo tar -C / -xf daos_packages.tar sudo cp /opt/intel/daos_rpms/packages/daos_packages.repo /etc/yum.repos.d rm /opt/intel/daos_rpms/packages/libabt* (cd /opt/intel/daos_rpms/packages/ && createrepo .) sudo yum install epel-release sudo yum install daos-server sudo yum install daos-client Note: Only daos-client OR daos-server needs to be specified on the yum command line. DAOS from Scratch \u00b6 The following instructions have been verified with CentOS. Installations on other Linux distributions might be similar with some variations. Developers of DAOS may want to review the additional sections below before beginning, for suggestions related specifically to development. Contact us in our forum for further help with any issues. Build Prerequisites \u00b6 To build DAOS and its dependencies, several software packages must be installed on the system. This includes scons, libuuid, cmocka, ipmctl, and several other packages usually available on all the Linux distributions. Moreover, a Go version of at least 1.10 is required. An exhaustive list of packages for each supported Linux distribution is maintained in the Docker files: CentOS OpenSUSE Ubuntu The command lines to install the required packages can be extracted from the Docker files by removing the \"RUN\" command, which is specific to Docker. Check the utils/docker directory for different Linux distribution versions. Some DAOS tests use MPI. The DAOS build process uses the environment modules package to detect the presence of MPI. If none is found, the build will skip building those tests. DAOS Source Code \u00b6 To check out the DAOS source code, run the following command: $ git clone https://github.com/daos-stack/daos.git This command clones the DAOS git repository (path referred as ${daospath} below). Then initialize the submodules with: $ cd ${daospath} $ git submodule init $ git submodule update Building DAOS & Dependencies \u00b6 If all the software dependencies listed previously are already satisfied, then type the following command in the top source directory to build the DAOS stack: $ scons --config=force install If you are a developer of DAOS, we recommend following the instructions in the DAOS for Development section. Otherwise, the missing dependencies can be built automatically by invoking scons with the following parameters: $ scons --config=force --build-deps=yes install By default, DAOS and its dependencies are installed under ${daospath}/install. The installation path can be modified by adding the PREFIX= option to the above command line (e.g., PREFIX=/usr/local). Note Several parameters can be set (e.g., COMPILER=clang or COMPILER=icc) on the scons command line. Please see scons --help for all the possible options. Those options are also saved for future compilations. Environment setup \u00b6 Once built, the environment must be modified to search for binaries and header files in the installation path. This step is not required if standard locations (e.g. /bin, /sbin, /usr/lib, ...) are used. CPATH=${daospath}/install/include/:$CPATH PATH=${daospath}/install/bin/:${daospath}/install/sbin:$PATH export CPATH PATH If using bash, PATH can be set up for you after a build by sourcing the script utils/sl/utils/setup_local.sh from the daos root. This script utilizes a file generated by the build to determine the location of daos and its dependencies. If required, ${daospath}/install must be replaced with the alternative path specified through PREFIX. DAOS in Docker \u00b6 This section describes how to build and run the DAOS service in a Docker container. A minimum of 5GB of DRAM and 16GB of disk space will be required. On Mac, please make sure that the Docker settings under \"Preferences/{Disk, Memory}\" are configured accordingly. Building from GitHub \u00b6 To build the Docker image directly from GitHub, run the following command: $ curl -L https://raw.githubusercontent.com/daos-stack/daos/master/utils/docker/Dockerfile.centos.7 | \\ docker build --no-cache -t daos - This creates a CentOS 7 image, fetches the latest DAOS version from GitHub, builds it, and installs it in the image. For Ubuntu and other Linux distributions, replace Dockerfile.centos.7 with Dockerfile.ubuntu.20.04 and the appropriate version of interest. Once the image created, one can start a container that will eventually run the DAOS service: $ docker run -it -d --privileged --name server \\ -v /dev/hugepages:/dev/hugepages \\ daos If Docker is being run on a non-Linux system (e.g., OSX), the export of /dev/hugepages should be removed since it is not supported. Building from a Local Tree \u00b6 To build from a local tree stored on the host, a volume must be created to share the source tree with the Docker container. To do so, execute the following command to create a docker image without checking out the DAOS source tree: $ docker build -t daos -f utils/docker/Dockerfile.centos.7 --build-arg NOBUILD=1 . Then create a container that can access the local DAOS source tree: $ docker run -it -d --privileged --name server \\ -v ${daospath}:/home/daos/daos:Z \\ -v /dev/hugepages:/dev/hugepages \\ daos ${daospath} should be replaced with the full path to your DAOS source tree. As mentioned above, the export of /dev/hugepages should be removed if the host is not a Linux system. Then execute the following command to build and install DAOS in the container: $ docker exec server scons --build-deps=yes install PREFIX=/usr Simple Docker Setup \u00b6 The daos_server_local.yml configuration file sets up a simple local DAOS system with a single server instance running in the container. By default, it uses 4GB of DRAM to emulate persistent memory and 16GB of bulk storage under /tmp. The storage size can be changed in the yaml file if necessary. The DAOS service can be started in the docker container as follows: $ docker exec server mkdir /var/run/daos_server $ docker exec server daos_server start \\ -o /home/daos/daos/utils/config/examples/daos_server_local.yml Once started, the DAOS server waits for the administrator to format the system. This can be triggered in a different shell, using the following command: $ docker exec server dmg -i storage format Upon successful completion of the format, the storage engine is started, and pools can be created using the daos admin tool (see next section). Note Please make sure that the uio_pci_generic module is loaded. For more advanced configurations involving SCM, SSD or a real fabric, please refer to the next section.","title":"Software Installation"},{"location":"admin/installation/#software-installation","text":"DAOS runs on both Intel x86_64 and ARM64 platforms, and has been successfully tested on CentOS 7, OpenSUSE Leap 15.1, and Ubuntu 20.04 distributions. The majority of testing has been performed on Centos 7.7 and SLES 15, with Centos being used in the majority of the test cycles.","title":"Software Installation"},{"location":"admin/installation/#software-dependencies","text":"DAOS requires a C99-capable compiler, a Go compiler, and the scons build tool. Moreover, the DAOS stack leverages the following open source projects: CaRT for high-performance communication leveraging advanced network capabilities. gRPC provides a secured out-of-band channel for DAOS administration. PMDK for persistent memory programming. SPDK for userspace NVMe device access and management. FIO for flexible testing of Linux I/O subsystems, specifically enabling validation of userspace NVMe device performance through fio-spdk plugin. ISA-L for checksum and erasure code ISA-L_Crypto for checksum computation. Argobots for thread management. hwloc for discovering system devices, detecting their NUMA node affinity and for CPU binding libfabric for detecting fabric interfaces, providers, and connection management. The DAOS build system can be configured to download and build any missing dependencies automatically.","title":"Software Dependencies"},{"location":"admin/installation/#distribution-packages","text":"DAOS RPM packaging is currently available, and DEB packaging is under development and will be available in a future DAOS release. Integration with the Spack package manager is also under consideration.","title":"Distribution Packages"},{"location":"admin/installation/#installing-daos-from-rpms","text":"DAOS RPMs are available from the Intel\u00a9 Registration Center. Clicking the Intel\u00a9 Registration Center link will take you to the registration center, where you will create an account. After creating an account, the following files can be downloaded: daos_debug.tar - debuginfo packages daos_packages.tar - client and server main packages daos_source.tar - source RPMs Recommended steps after download: sudo tar -C / -xf daos_packages.tar sudo cp /opt/intel/daos_rpms/packages/daos_packages.repo /etc/yum.repos.d rm /opt/intel/daos_rpms/packages/libabt* (cd /opt/intel/daos_rpms/packages/ && createrepo .) sudo yum install epel-release sudo yum install daos-server sudo yum install daos-client Note: Only daos-client OR daos-server needs to be specified on the yum command line.","title":"Installing DAOS from RPMs"},{"location":"admin/installation/#daos-from-scratch","text":"The following instructions have been verified with CentOS. Installations on other Linux distributions might be similar with some variations. Developers of DAOS may want to review the additional sections below before beginning, for suggestions related specifically to development. Contact us in our forum for further help with any issues.","title":"DAOS from Scratch"},{"location":"admin/installation/#build-prerequisites","text":"To build DAOS and its dependencies, several software packages must be installed on the system. This includes scons, libuuid, cmocka, ipmctl, and several other packages usually available on all the Linux distributions. Moreover, a Go version of at least 1.10 is required. An exhaustive list of packages for each supported Linux distribution is maintained in the Docker files: CentOS OpenSUSE Ubuntu The command lines to install the required packages can be extracted from the Docker files by removing the \"RUN\" command, which is specific to Docker. Check the utils/docker directory for different Linux distribution versions. Some DAOS tests use MPI. The DAOS build process uses the environment modules package to detect the presence of MPI. If none is found, the build will skip building those tests.","title":"Build Prerequisites"},{"location":"admin/installation/#daos-source-code","text":"To check out the DAOS source code, run the following command: $ git clone https://github.com/daos-stack/daos.git This command clones the DAOS git repository (path referred as ${daospath} below). Then initialize the submodules with: $ cd ${daospath} $ git submodule init $ git submodule update","title":"DAOS Source Code"},{"location":"admin/installation/#building-daos-dependencies","text":"If all the software dependencies listed previously are already satisfied, then type the following command in the top source directory to build the DAOS stack: $ scons --config=force install If you are a developer of DAOS, we recommend following the instructions in the DAOS for Development section. Otherwise, the missing dependencies can be built automatically by invoking scons with the following parameters: $ scons --config=force --build-deps=yes install By default, DAOS and its dependencies are installed under ${daospath}/install. The installation path can be modified by adding the PREFIX= option to the above command line (e.g., PREFIX=/usr/local). Note Several parameters can be set (e.g., COMPILER=clang or COMPILER=icc) on the scons command line. Please see scons --help for all the possible options. Those options are also saved for future compilations.","title":"Building DAOS &amp; Dependencies"},{"location":"admin/installation/#environment-setup","text":"Once built, the environment must be modified to search for binaries and header files in the installation path. This step is not required if standard locations (e.g. /bin, /sbin, /usr/lib, ...) are used. CPATH=${daospath}/install/include/:$CPATH PATH=${daospath}/install/bin/:${daospath}/install/sbin:$PATH export CPATH PATH If using bash, PATH can be set up for you after a build by sourcing the script utils/sl/utils/setup_local.sh from the daos root. This script utilizes a file generated by the build to determine the location of daos and its dependencies. If required, ${daospath}/install must be replaced with the alternative path specified through PREFIX.","title":"Environment setup"},{"location":"admin/installation/#daos-in-docker","text":"This section describes how to build and run the DAOS service in a Docker container. A minimum of 5GB of DRAM and 16GB of disk space will be required. On Mac, please make sure that the Docker settings under \"Preferences/{Disk, Memory}\" are configured accordingly.","title":"DAOS in Docker"},{"location":"admin/installation/#building-from-github","text":"To build the Docker image directly from GitHub, run the following command: $ curl -L https://raw.githubusercontent.com/daos-stack/daos/master/utils/docker/Dockerfile.centos.7 | \\ docker build --no-cache -t daos - This creates a CentOS 7 image, fetches the latest DAOS version from GitHub, builds it, and installs it in the image. For Ubuntu and other Linux distributions, replace Dockerfile.centos.7 with Dockerfile.ubuntu.20.04 and the appropriate version of interest. Once the image created, one can start a container that will eventually run the DAOS service: $ docker run -it -d --privileged --name server \\ -v /dev/hugepages:/dev/hugepages \\ daos If Docker is being run on a non-Linux system (e.g., OSX), the export of /dev/hugepages should be removed since it is not supported.","title":"Building from GitHub"},{"location":"admin/installation/#building-from-a-local-tree","text":"To build from a local tree stored on the host, a volume must be created to share the source tree with the Docker container. To do so, execute the following command to create a docker image without checking out the DAOS source tree: $ docker build -t daos -f utils/docker/Dockerfile.centos.7 --build-arg NOBUILD=1 . Then create a container that can access the local DAOS source tree: $ docker run -it -d --privileged --name server \\ -v ${daospath}:/home/daos/daos:Z \\ -v /dev/hugepages:/dev/hugepages \\ daos ${daospath} should be replaced with the full path to your DAOS source tree. As mentioned above, the export of /dev/hugepages should be removed if the host is not a Linux system. Then execute the following command to build and install DAOS in the container: $ docker exec server scons --build-deps=yes install PREFIX=/usr","title":"Building from a Local Tree"},{"location":"admin/installation/#simple-docker-setup","text":"The daos_server_local.yml configuration file sets up a simple local DAOS system with a single server instance running in the container. By default, it uses 4GB of DRAM to emulate persistent memory and 16GB of bulk storage under /tmp. The storage size can be changed in the yaml file if necessary. The DAOS service can be started in the docker container as follows: $ docker exec server mkdir /var/run/daos_server $ docker exec server daos_server start \\ -o /home/daos/daos/utils/config/examples/daos_server_local.yml Once started, the DAOS server waits for the administrator to format the system. This can be triggered in a different shell, using the following command: $ docker exec server dmg -i storage format Upon successful completion of the format, the storage engine is started, and pools can be created using the daos admin tool (see next section). Note Please make sure that the uio_pci_generic module is loaded. For more advanced configurations involving SCM, SSD or a real fabric, please refer to the next section.","title":"Simple Docker Setup"},{"location":"admin/performance_tuning/","text":"DAOS Performance Tuning \u00b6 This section will be expanded in a future revision. Network Performance \u00b6 The DAOS CART layer can validate and benchmark network communications in the same context as an application and using the same networks/tuning options as regular DAOS. The CART self_test can run against the DAOS servers in a production environment in a non-destructive manner. CART self_test supports different message sizes, bulk transfers, multiple targets, and the following test scenarios: Selftest client to servers - where self_test issues RPCs directly to a list of servers Cross-servers - where self_test sends instructions to the different servers that will issue cross-server RPCs. This model supports a many to many communication model. Instructions to run CaRT self_test with test_group as the target server are as follows. $ git clone https://github.com/daos-stack/daos.git $ cd daos $ git submodule init $ git submodule update $ scons --build-deps=yes install $ cd install/TESTING Prepare srvhostfile and clihostfile srvhostfile contains a list of nodes from which servers will launch clihostfile contains node from which self_test will launch The example below uses an Ethernet interface and Sockets provider. In the self_test commands: (client-to-servers) Replace the argument for --endpoint accordingly. (cross-servers) Replace the argument for --endpoint and --master-endpoint accordingly. For example, if you have 8 servers, you would specify --endpoint 0-7:0 (and --master-endpoint 0-7:0 ) The commands below will run self_test benchmark using the following message sizes: b1048576 1Mb bulk transfer Get and Put b1048576 0 1Mb bulk transfer Get only 0 b1048576 1Mb bulk transfer Put only I2048 2Kb iovec Input and Output i2048 0 2Kb iovec Input only 0 i2048 2Kb iovec Output only For a full description of self_test usage, run: $ ../bin/self_test --help To start test_group server: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile srvhostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/test_group_srv.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/crt_launch -e tests/test_group_np_srv --name self_test_srv_grp --cfg_path=. & To run self_test in client-to-servers mode: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/self_test.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/self_test --group-name self_test_srv_grp --endpoint 0-<MAX_SERVER-1>:0 \\ --message-sizes \"b1048576,b1048576 0,0 b1048576,i2048,i2048 0,0 i2048\" \\ --max-inflight-rpcs 16 --repetitions 100 -t -n -p . To run self_test in cross-servers mode: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/self_test.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/self_test --group-name self_test_srv_grp --endpoint 0-<MAX_SERVER-1>:0 --master-endpoint 0-<MAX_SERVER-1>:0 \\ --message-sizes \"b1048576,b1048576 0,0 b1048576,i2048,i2048 0,0 i2048\" \\ --max-inflight-rpcs 16 --repetitions 100 -t -n -p . To shutdown test_group server: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/test_group_cli.log \\ -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 \\ tests/test_group_np_cli --name client-group --attach_to self_test_srv_grp --shut_only --cfg_path=. Benchmarking DAOS \u00b6 DAOS can be benchmarked using several widely used IO benchmarks like IOR, mdtest, and FIO. There are several backends that can be used with those benchmarks. IOR (https://github.com/hpc/ior) with the following backends: POSIX, MPIIO & HDF5 drivers over dfuse and the interception library. MPI-IO plugin with the ROMIO DAOS ADIO driver to bypass POSIX and dfuse. The MPIIO driver is available in the upstream MPICH repository. HDF5 plugin with the HDF5 DAOS connector (under development). This maps the HDF5 data model directly to the DAOS model bypassing POSIX. A custom DFS (DAOS File System) plugin, integrating IOR directly with libfs without requiring FUSE or an interception library A custom DAOS plugin, integrating IOR directly with the native DAOS array API. mdtest is released in the same repository as IOR. The corresponding backends that are listed above support mdtest, except for the MPI-IO and HDF5 backends that were only designed to support IOR. FIO can also be used to benchmark DAOS performance using dfuse and the interception library with all the POSIX based engines like sync and libaio. We do, however, provide a native DFS engine for FIO similar to what we do for IOR. That engine is available on GitHub: https://github.com/daos-stack/dfio Finally, DAOS provides a tool called daos_perf which allows benchmarking to the DAOS object API directly or to the internal VOS API, which bypasses the client and network stack and reports performance accessing the storage directly using VOS. Client Performance Tuning \u00b6 For best performance, a DAOS client should specifically bind itself to a NUMA node instead of leaving core allocation and memory binding to chance. This allows the DAOS Agent to detect the client's NUMA affinity from its PID and automatically assign a network interface with a matching NUMA node. The network interface provided in the GetAttachInfo response is used to initialize CaRT. To override the automatically assigned interface, the client should set the environment variable OFI_INTERFACE to match the desired network interface. The DAOS Agent scans the client machine on the first GetAttachInfo request to determine the set of network interfaces available that support the DAOS Server's OFI provider. This request occurs as part of the initialization sequence in the libdaos daos_init() performed by each client. Upon receipt, the Agent populates a cache of responses indexed by NUMA affinity. Provided a client application has bound itself to a specific NUMA node and that NUMA node has a network device associated with it, the DAOS Agent will provide a GetAttachInfo response with a network interface corresponding to the client's NUMA node. When more than one appropriate network interface exists per NUMA node, the agent uses a round-robin resource allocation scheme to load balance the responses for that NUMA node. If a client is bound to a NUMA node that has no matching network interface, then a default NUMA node is used for the purpose of selecting a response. Provided that the DAOS Agent can detect any valid network device on any NUMA node, the default response will contain a valid network interface for the client. When a default response is provided, a message in the Agent's log is emitted: No network devices bound to client NUMA node X. Using response from NUMA Y To improve performance, it is worth figuring out if the client bound itself to the wrong NUMA node, or if expected network devices for that NUMA node are missing from the Agent's fabric scan. In some situations, the Agent may detect no network devices and the response cache will be empty. In such a situation, the GetAttachInfo response will contain no interface assignment and the following info message will be found in the Agent's log: No network devices detected in fabric scan; default AttachInfo response may be incorrect In either situation, the admin may execute the command daos_agent net-scan with appropriate debug flags to gain more insight into the configuration problem. Disabling the GetAttachInfo cache: The default configuration enables the Agent GetAttachInfo cache. If it is desired, the cache may be disabled prior to DAOS Agent startup by setting the Agent's environment variable DAOS_AGENT_DISABLE_CACHE=true . The cache is loaded only at Agent startup. If the network configuration changes while the Agent is running, it must be restarted to gain visibility to these changes.","title":"Performance Tuning"},{"location":"admin/performance_tuning/#daos-performance-tuning","text":"This section will be expanded in a future revision.","title":"DAOS Performance Tuning"},{"location":"admin/performance_tuning/#network-performance","text":"The DAOS CART layer can validate and benchmark network communications in the same context as an application and using the same networks/tuning options as regular DAOS. The CART self_test can run against the DAOS servers in a production environment in a non-destructive manner. CART self_test supports different message sizes, bulk transfers, multiple targets, and the following test scenarios: Selftest client to servers - where self_test issues RPCs directly to a list of servers Cross-servers - where self_test sends instructions to the different servers that will issue cross-server RPCs. This model supports a many to many communication model. Instructions to run CaRT self_test with test_group as the target server are as follows. $ git clone https://github.com/daos-stack/daos.git $ cd daos $ git submodule init $ git submodule update $ scons --build-deps=yes install $ cd install/TESTING Prepare srvhostfile and clihostfile srvhostfile contains a list of nodes from which servers will launch clihostfile contains node from which self_test will launch The example below uses an Ethernet interface and Sockets provider. In the self_test commands: (client-to-servers) Replace the argument for --endpoint accordingly. (cross-servers) Replace the argument for --endpoint and --master-endpoint accordingly. For example, if you have 8 servers, you would specify --endpoint 0-7:0 (and --master-endpoint 0-7:0 ) The commands below will run self_test benchmark using the following message sizes: b1048576 1Mb bulk transfer Get and Put b1048576 0 1Mb bulk transfer Get only 0 b1048576 1Mb bulk transfer Put only I2048 2Kb iovec Input and Output i2048 0 2Kb iovec Input only 0 i2048 2Kb iovec Output only For a full description of self_test usage, run: $ ../bin/self_test --help To start test_group server: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile srvhostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/test_group_srv.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/crt_launch -e tests/test_group_np_srv --name self_test_srv_grp --cfg_path=. & To run self_test in client-to-servers mode: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/self_test.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/self_test --group-name self_test_srv_grp --endpoint 0-<MAX_SERVER-1>:0 \\ --message-sizes \"b1048576,b1048576 0,0 b1048576,i2048,i2048 0,0 i2048\" \\ --max-inflight-rpcs 16 --repetitions 100 -t -n -p . To run self_test in cross-servers mode: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/self_test.log -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 -x CRT_CTX_NUM=16 \\ ../bin/self_test --group-name self_test_srv_grp --endpoint 0-<MAX_SERVER-1>:0 --master-endpoint 0-<MAX_SERVER-1>:0 \\ --message-sizes \"b1048576,b1048576 0,0 b1048576,i2048,i2048 0,0 i2048\" \\ --max-inflight-rpcs 16 --repetitions 100 -t -n -p . To shutdown test_group server: $ /usr/lib64/openmpi3/bin/orterun --mca btl self,tcp -N 1 \\ --hostfile clihostfile --output-filename testLogs/ \\ -x D_LOG_FILE=testLogs/test_group_cli.log \\ -x D_LOG_FILE_APPEND_PID=1 -x D_LOG_MASK=WARN \\ -x CRT_PHY_ADDR_STR=ofi+sockets -x OFI_INTERFACE=eth0 \\ -x CRT_CTX_SHARE_ADDR=0 \\ tests/test_group_np_cli --name client-group --attach_to self_test_srv_grp --shut_only --cfg_path=.","title":"Network Performance"},{"location":"admin/performance_tuning/#benchmarking-daos","text":"DAOS can be benchmarked using several widely used IO benchmarks like IOR, mdtest, and FIO. There are several backends that can be used with those benchmarks. IOR (https://github.com/hpc/ior) with the following backends: POSIX, MPIIO & HDF5 drivers over dfuse and the interception library. MPI-IO plugin with the ROMIO DAOS ADIO driver to bypass POSIX and dfuse. The MPIIO driver is available in the upstream MPICH repository. HDF5 plugin with the HDF5 DAOS connector (under development). This maps the HDF5 data model directly to the DAOS model bypassing POSIX. A custom DFS (DAOS File System) plugin, integrating IOR directly with libfs without requiring FUSE or an interception library A custom DAOS plugin, integrating IOR directly with the native DAOS array API. mdtest is released in the same repository as IOR. The corresponding backends that are listed above support mdtest, except for the MPI-IO and HDF5 backends that were only designed to support IOR. FIO can also be used to benchmark DAOS performance using dfuse and the interception library with all the POSIX based engines like sync and libaio. We do, however, provide a native DFS engine for FIO similar to what we do for IOR. That engine is available on GitHub: https://github.com/daos-stack/dfio Finally, DAOS provides a tool called daos_perf which allows benchmarking to the DAOS object API directly or to the internal VOS API, which bypasses the client and network stack and reports performance accessing the storage directly using VOS.","title":"Benchmarking DAOS"},{"location":"admin/performance_tuning/#client-performance-tuning","text":"For best performance, a DAOS client should specifically bind itself to a NUMA node instead of leaving core allocation and memory binding to chance. This allows the DAOS Agent to detect the client's NUMA affinity from its PID and automatically assign a network interface with a matching NUMA node. The network interface provided in the GetAttachInfo response is used to initialize CaRT. To override the automatically assigned interface, the client should set the environment variable OFI_INTERFACE to match the desired network interface. The DAOS Agent scans the client machine on the first GetAttachInfo request to determine the set of network interfaces available that support the DAOS Server's OFI provider. This request occurs as part of the initialization sequence in the libdaos daos_init() performed by each client. Upon receipt, the Agent populates a cache of responses indexed by NUMA affinity. Provided a client application has bound itself to a specific NUMA node and that NUMA node has a network device associated with it, the DAOS Agent will provide a GetAttachInfo response with a network interface corresponding to the client's NUMA node. When more than one appropriate network interface exists per NUMA node, the agent uses a round-robin resource allocation scheme to load balance the responses for that NUMA node. If a client is bound to a NUMA node that has no matching network interface, then a default NUMA node is used for the purpose of selecting a response. Provided that the DAOS Agent can detect any valid network device on any NUMA node, the default response will contain a valid network interface for the client. When a default response is provided, a message in the Agent's log is emitted: No network devices bound to client NUMA node X. Using response from NUMA Y To improve performance, it is worth figuring out if the client bound itself to the wrong NUMA node, or if expected network devices for that NUMA node are missing from the Agent's fabric scan. In some situations, the Agent may detect no network devices and the response cache will be empty. In such a situation, the GetAttachInfo response will contain no interface assignment and the following info message will be found in the Agent's log: No network devices detected in fabric scan; default AttachInfo response may be incorrect In either situation, the admin may execute the command daos_agent net-scan with appropriate debug flags to gain more insight into the configuration problem. Disabling the GetAttachInfo cache: The default configuration enables the Agent GetAttachInfo cache. If it is desired, the cache may be disabled prior to DAOS Agent startup by setting the Agent's environment variable DAOS_AGENT_DISABLE_CACHE=true . The cache is loaded only at Agent startup. If the network configuration changes while the Agent is running, it must be restarted to gain visibility to these changes.","title":"Client Performance Tuning"},{"location":"admin/pool_operations/","text":"Pool Operations \u00b6 A DAOS pool is a storage reservation that can span any storage nodes and is managed by the administrator. The amount of space allocated to a pool is decided at creation time and can eventually be expanded through the management interface. Pool Creation/Destroy \u00b6 A DAOS pool can be created and destroyed through the DAOS management API (see daos_mgmt.h). DAOS also provides a utility called dmg to manage storage pools from the command line. To create a pool: $ dmg pool create --scm-size=xxG --nvme-size=yyT This command creates a pool distributed across the DAOS servers with a target size on each server with xxGB of SCM and yyTB of NVMe storage. The actual space allocated will be a base-2 representation for SCM (i.e., 20GB will be interpreted as 20GiB == 20*2^30 bytes) and base-10 representation for NVMe (i.e. 20GB will be interpreted as 20*10^9 bytes) following the convention of units for memory and storage capacity. The UUID allocated to the newly created pool is printed to stdout (referred to as ${puuid}) as well as the rank where the pool service is located (referred to as ${svcl}). $ dmg pool create --help ... [create command options] -g, --group= DAOS pool to be owned by given group, format name@domain -u, --user= DAOS pool to be owned by given user, format name@domain -a, --acl-file= Access Control List file path for DAOS pool -s, --scm-size= Size of SCM component of DAOS pool -n, --nvme-size= Size of NVMe component of DAOS pool -r, --ranks= Storage server unique identifiers (ranks) for DAOS pool -v, --nsvc= Number of pool service replicas (default: 1) -S, --sys= DAOS system that pool is to be a part of (default: daos_server) The typical output of this command is as follows: $ dmg -i pool create -s 1G -n 10G -g root -u root -S daos Active connections: [localhost:10001] Creating DAOS pool with 1GB SCM and 10GB NvMe storage (0.100 ratio) Pool-create command SUCCEEDED: UUID: 5d6fa7bf-637f-4dba-bcd2-480ad251cdc7, Service replicas: 0,1 This created a pool with UUID 5d6fa7bf-637f-4dba-bcd2-480ad251cdc7, two pool service replica on rank 0 and 1. To destroy a pool: $ dmg pool destroy --pool=${puuid} To evict handles/connections to a pool: $ dmg pool evict --pool=${puuid} ` **To see a list of the pools in your DAOS system:** ```bash $ dmg system list-pools This will return a table of pool UUIDs and the ranks of their pool service replicas. For example: $ dmg system list-pools localhost:10001: connected Pool UUID Svc Replicas --------- ------------ 2a8ec3b2-729b-4617-bf51-77f37f764194 0,1 a106d667-5c5d-4d6f-ac3a-89099196c41a 0 85141a07-e3ba-42a6-81c2-3f18253c5e47 0 Pool Properties \u00b6 At creation time, a list of pool properties can be specified through the API (not supported by the tool yet): Pool Property Description DAOS_PROP_PO_LABEL A string that the administrator can associate with a pool. e.g., project A, project B, IO500 test pool DAOS_PROP_PO_ACL Access control list (ACL) associated with the pool DAOS_PROP_PO_SPACE_RB Space reserved on each target for rebuild purpose DAOS_PROP_PO_SELF_HEAL Define whether the pool wants automatically-trigger or manually-triggered self-healing DAOS_PROP_PO_RECLAIM Tune space reclaim strategy based on time interval, batched commits or snapshot creation While those pool properties are currently stored persistently with pool metadata, many of them are still under development. Moreover, the ability to modify some of those properties on an existing pool will be provided in a future release. Access Control Lists \u00b6 Client user and group access for pools are controlled by Access Control Lists (ACLs) . Most pool-related tasks are performed using the DMG administrative tool, which is authenticated by the administrative certificate rather than user-specific credentials. Access-controlled client pool accesses include: Connecting to the pool. Querying the pool. Creating containers in the pool. Deleting containers in the pool. This is reflected in the set of supported pool permissions . A user must be able to connect to the pool in order to access any containers inside, regardless of their permissions on those containers. Ownership \u00b6 Pool ownership conveys no special privileges for access control decisions. All desired privileges of the owner-user ( OWNER@ ) and owner-group ( GROUP@ ) must be explicitly defined by an administrator in the pool ACL. Creating a pool with a custom ACL \u00b6 To create a pool with a custom ACL: $ dmg pool create --scm-size <size> --acl-file <path> The ACL file format is detailed in the here . Displaying a Pool's ACL \u00b6 To view a pool's ACL: $ dmg pool get-acl --pool <UUID> The output is in the same string format used in the ACL file during creation, with one Access Control Entry (i.e., ACE) per line. Modifying a Pool's ACL \u00b6 For all of these commands using an ACL file, the ACL file must be in the format noted above for pool creation. Overwriting the ACL \u00b6 To replace a pool's ACL with a new ACL: $ dmg pool overwrite-acl --pool <UUID> --acl-file <path> Adding and Updating ACEs \u00b6 To add or update multiple entries in an existing pool ACL: $ dmg pool update-acl --pool <UUID> --acl-file <path> To add or update a single entry in an existing pool ACL: $ dmg pool update-acl --pool <UUID> --entry <ACE> If there is no existing entry for the principal in the ACL, the new entry is added to the ACL. If there is already an entry for the principal, that entry is replaced with the new one. Removing an ACE \u00b6 To delete an entry for a given principal in an existing pool ACL: $ dmg pool delete-acl --pool <UUID> --principal <principal> The principal corresponds to the principal portion of an ACE that was set during pool creation or a previous pool ACL operation. For the delete operation, the principal argument must be formatted as follows: Named user: u:username@ Named group: g:groupname@ Special principals: OWNER@ , GROUP@ , and EVERYONE@ The entry for that principal will be completely removed. This does not always mean that the principal will have no access. Rather, their access to the pool will be decided based on the remaining ACL rules. Pool Query \u00b6 The pool query operation retrieves information (i.e., the number of targets, space usage, rebuild status, property list, and more) about a created pool. It is integrated into the dmg utility. To query a pool: $ dmg pool query --pool <UUID> Below is the output for a pool created with SCM space only. pool=47293abe-aa6f-4147-97f6-42a9f796d64a Pool 47293abe-aa6f-4147-97f6-42a9f796d64a, ntarget=64, disabled=8 Pool space info: - Target(VOS) count:56 - SCM: Total size: 28GB Free: 28GB, min:505MB, max:512MB, mean:512MB - NVMe: Total size: 0 Free: 0, min:0, max:0, mean:0 Rebuild done, 10 objs, 1026 recs The total and free sizes are the sum across all the targets whereas min/max/mean gives information about individual targets. A min value close to 0 means that one target is running out of space. The example below shows a rebuild in progress and NVMe space allocated. pool=95886b8b-7eb8-454d-845c-fc0ae0ba5671 Pool 95886b8b-7eb8-454d-845c-fc0ae0ba5671, ntarget=64, disabled=8 Pool space info: - Target(VOS) count:56 - SCM: Total size: 28GB Free: 28GB, min:470MB, max:512MB, mean:509MB - NVMe: Total size: 56GB Free: 28GB, min:470MB, max:512MB, mean:509MB Rebuild busy, 75 objs, 9722 recs Additional status and telemetry data are planned to be exported through the management API and tool and will be documented here once available. Pool Modifications \u00b6 Target Exclusion and Self-Healing \u00b6 Pool Exclude \u00b6 An operator can exclude one or more targets from a specific DAOS pool using the rank the target resides on as well as the target idx on that rank. If a target idx list is not provided then all targets on the rank will be excluded. Excluding a target will automatically start the rebuild process. To exclude a target from a pool: $ dmg pool exclude --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool target exclude command accepts 3 parameters: The pool UUID of the pool that the targets will be excluded from. The rank of the target(s) to be excluded. The target Indices of the targets to be excluded from that rank (optional). Pool Drain \u00b6 Alternatively when an operator would like to remove one or more pool targets without the system operating in degraded mode Drain can be used. A pool drain operation will initiate rebuild without excluding the designated target until after the rebuild is complete. This allows the target(s) drained to continue to perform I/O while the rebuild operation is ongoing. Drain additionally enables non-replicated data to be rebuilt onto another target whereas in a conventional failure scenario non-replicated data would not be integrated into a rebuild and would be lost. To drain a target from a pool: $ dmg pool drain --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool target drain command accepts 3 parameters: The pool UUID of the pool that the targets will be drained from. The rank of the target(s) to be drained. The target Indices of the targets to be drained from that rank (optional). Target Reintegration \u00b6 After a target failure an operator can fix the underlying issue and reintegrate the affected targets to restore the pool to its original state. The operator can either reintegrate specific targets for a rank by supplying a target idx list, or reintegrate an entire rank by omitting the list. $ dmg pool reintegrate --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool reintegrate command accepts 3 parameters: The pool UUID of the pool that the targets will be reintegrated into. The rank of the affected targets. The target Indices of the targets to be reintegrated on that rank (optional). When rebuild is triggered it will list the operations and their related targets by their rank ID and target index. Target (rank 5 idx 0) is down. Target (rank 5 idx 1) is down. ... (rank 5 idx 0) is excluded. (rank 5 idx 1) is excluded. These should be the same values used when reintegrating the targets. $ dmg pool reintegrate --pool=${puuid} --rank=5 --target-idx=0,1 Pool Extension \u00b6 Target Addition & Space Rebalancing \u00b6 Full Support for online target addition and automatic space rebalancing is planned for DAOS v1.4 and will be documented here once available. Until then the following command(s) are placeholders and offer limited functionality related to Online Server Addition/Rebalancing operations. An operator can choose to extend a pool to include ranks not currently in the pool. This will automatically trigger a server rebalance operation where objects within the extended pool will be rebalanced across the new storage. $ dmg pool extend --pool=${puuid} --ranks=${rank1},${rank2}... The pool extend command accepts 2 required parameters: The pool UUID of the pool to be extended. A comma separated list of server ranks to include in the pool. The pool rebalance operation will work most efficiently when the pool is extended to its desired size in a single operation, as opposed to multiple, small extensions. Pool Shard Resize \u00b6 Support for quiescent pool shard resize is currently not supported and is under consideration. Pool Catastrophic Recovery \u00b6 A DAOS pool is instantiated on each target by a set of pmemobj files managed by PMDK and SPDK blobs on SSDs. Tools to verify and repair this persistent data is scheduled for DAOS v2.4 and will be documented here once available. Meanwhile, PMDK provides a recovery tool (i.e., pmempool check) to verify and possibly repair a pmemobj file. As discussed in the previous section, the rebuild status can be consulted via the pool query and will be expanded with more information. Recovering Ownership of a Pool's Container \u00b6 Typically users are expected to manage their containers. However, in the event that a container is orphaned and no users have the privileges to change the ownership, an administrator can transfer ownership of the container to a new user and/or group. To change the owner user: $ dmg cont set-owner --pool <UUID> --cont <UUID> --user <owner-user> To change the owner group: $ dmg cont set-owner --pool <UUID> --cont <UUID> --group <owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals . Because this is an administrative action, it does not require the administrator to have any privileges assigned in the container ACL.","title":"Pool Operations"},{"location":"admin/pool_operations/#pool-operations","text":"A DAOS pool is a storage reservation that can span any storage nodes and is managed by the administrator. The amount of space allocated to a pool is decided at creation time and can eventually be expanded through the management interface.","title":"Pool Operations"},{"location":"admin/pool_operations/#pool-creationdestroy","text":"A DAOS pool can be created and destroyed through the DAOS management API (see daos_mgmt.h). DAOS also provides a utility called dmg to manage storage pools from the command line. To create a pool: $ dmg pool create --scm-size=xxG --nvme-size=yyT This command creates a pool distributed across the DAOS servers with a target size on each server with xxGB of SCM and yyTB of NVMe storage. The actual space allocated will be a base-2 representation for SCM (i.e., 20GB will be interpreted as 20GiB == 20*2^30 bytes) and base-10 representation for NVMe (i.e. 20GB will be interpreted as 20*10^9 bytes) following the convention of units for memory and storage capacity. The UUID allocated to the newly created pool is printed to stdout (referred to as ${puuid}) as well as the rank where the pool service is located (referred to as ${svcl}). $ dmg pool create --help ... [create command options] -g, --group= DAOS pool to be owned by given group, format name@domain -u, --user= DAOS pool to be owned by given user, format name@domain -a, --acl-file= Access Control List file path for DAOS pool -s, --scm-size= Size of SCM component of DAOS pool -n, --nvme-size= Size of NVMe component of DAOS pool -r, --ranks= Storage server unique identifiers (ranks) for DAOS pool -v, --nsvc= Number of pool service replicas (default: 1) -S, --sys= DAOS system that pool is to be a part of (default: daos_server) The typical output of this command is as follows: $ dmg -i pool create -s 1G -n 10G -g root -u root -S daos Active connections: [localhost:10001] Creating DAOS pool with 1GB SCM and 10GB NvMe storage (0.100 ratio) Pool-create command SUCCEEDED: UUID: 5d6fa7bf-637f-4dba-bcd2-480ad251cdc7, Service replicas: 0,1 This created a pool with UUID 5d6fa7bf-637f-4dba-bcd2-480ad251cdc7, two pool service replica on rank 0 and 1. To destroy a pool: $ dmg pool destroy --pool=${puuid} To evict handles/connections to a pool: $ dmg pool evict --pool=${puuid} ` **To see a list of the pools in your DAOS system:** ```bash $ dmg system list-pools This will return a table of pool UUIDs and the ranks of their pool service replicas. For example: $ dmg system list-pools localhost:10001: connected Pool UUID Svc Replicas --------- ------------ 2a8ec3b2-729b-4617-bf51-77f37f764194 0,1 a106d667-5c5d-4d6f-ac3a-89099196c41a 0 85141a07-e3ba-42a6-81c2-3f18253c5e47 0","title":"Pool Creation/Destroy"},{"location":"admin/pool_operations/#pool-properties","text":"At creation time, a list of pool properties can be specified through the API (not supported by the tool yet): Pool Property Description DAOS_PROP_PO_LABEL A string that the administrator can associate with a pool. e.g., project A, project B, IO500 test pool DAOS_PROP_PO_ACL Access control list (ACL) associated with the pool DAOS_PROP_PO_SPACE_RB Space reserved on each target for rebuild purpose DAOS_PROP_PO_SELF_HEAL Define whether the pool wants automatically-trigger or manually-triggered self-healing DAOS_PROP_PO_RECLAIM Tune space reclaim strategy based on time interval, batched commits or snapshot creation While those pool properties are currently stored persistently with pool metadata, many of them are still under development. Moreover, the ability to modify some of those properties on an existing pool will be provided in a future release.","title":"Pool Properties"},{"location":"admin/pool_operations/#access-control-lists","text":"Client user and group access for pools are controlled by Access Control Lists (ACLs) . Most pool-related tasks are performed using the DMG administrative tool, which is authenticated by the administrative certificate rather than user-specific credentials. Access-controlled client pool accesses include: Connecting to the pool. Querying the pool. Creating containers in the pool. Deleting containers in the pool. This is reflected in the set of supported pool permissions . A user must be able to connect to the pool in order to access any containers inside, regardless of their permissions on those containers.","title":"Access Control Lists"},{"location":"admin/pool_operations/#ownership","text":"Pool ownership conveys no special privileges for access control decisions. All desired privileges of the owner-user ( OWNER@ ) and owner-group ( GROUP@ ) must be explicitly defined by an administrator in the pool ACL.","title":"Ownership"},{"location":"admin/pool_operations/#creating-a-pool-with-a-custom-acl","text":"To create a pool with a custom ACL: $ dmg pool create --scm-size <size> --acl-file <path> The ACL file format is detailed in the here .","title":"Creating a pool with a custom ACL"},{"location":"admin/pool_operations/#displaying-a-pools-acl","text":"To view a pool's ACL: $ dmg pool get-acl --pool <UUID> The output is in the same string format used in the ACL file during creation, with one Access Control Entry (i.e., ACE) per line.","title":"Displaying a Pool's ACL"},{"location":"admin/pool_operations/#modifying-a-pools-acl","text":"For all of these commands using an ACL file, the ACL file must be in the format noted above for pool creation.","title":"Modifying a Pool's ACL"},{"location":"admin/pool_operations/#overwriting-the-acl","text":"To replace a pool's ACL with a new ACL: $ dmg pool overwrite-acl --pool <UUID> --acl-file <path>","title":"Overwriting the ACL"},{"location":"admin/pool_operations/#adding-and-updating-aces","text":"To add or update multiple entries in an existing pool ACL: $ dmg pool update-acl --pool <UUID> --acl-file <path> To add or update a single entry in an existing pool ACL: $ dmg pool update-acl --pool <UUID> --entry <ACE> If there is no existing entry for the principal in the ACL, the new entry is added to the ACL. If there is already an entry for the principal, that entry is replaced with the new one.","title":"Adding and Updating ACEs"},{"location":"admin/pool_operations/#removing-an-ace","text":"To delete an entry for a given principal in an existing pool ACL: $ dmg pool delete-acl --pool <UUID> --principal <principal> The principal corresponds to the principal portion of an ACE that was set during pool creation or a previous pool ACL operation. For the delete operation, the principal argument must be formatted as follows: Named user: u:username@ Named group: g:groupname@ Special principals: OWNER@ , GROUP@ , and EVERYONE@ The entry for that principal will be completely removed. This does not always mean that the principal will have no access. Rather, their access to the pool will be decided based on the remaining ACL rules.","title":"Removing an ACE"},{"location":"admin/pool_operations/#pool-query","text":"The pool query operation retrieves information (i.e., the number of targets, space usage, rebuild status, property list, and more) about a created pool. It is integrated into the dmg utility. To query a pool: $ dmg pool query --pool <UUID> Below is the output for a pool created with SCM space only. pool=47293abe-aa6f-4147-97f6-42a9f796d64a Pool 47293abe-aa6f-4147-97f6-42a9f796d64a, ntarget=64, disabled=8 Pool space info: - Target(VOS) count:56 - SCM: Total size: 28GB Free: 28GB, min:505MB, max:512MB, mean:512MB - NVMe: Total size: 0 Free: 0, min:0, max:0, mean:0 Rebuild done, 10 objs, 1026 recs The total and free sizes are the sum across all the targets whereas min/max/mean gives information about individual targets. A min value close to 0 means that one target is running out of space. The example below shows a rebuild in progress and NVMe space allocated. pool=95886b8b-7eb8-454d-845c-fc0ae0ba5671 Pool 95886b8b-7eb8-454d-845c-fc0ae0ba5671, ntarget=64, disabled=8 Pool space info: - Target(VOS) count:56 - SCM: Total size: 28GB Free: 28GB, min:470MB, max:512MB, mean:509MB - NVMe: Total size: 56GB Free: 28GB, min:470MB, max:512MB, mean:509MB Rebuild busy, 75 objs, 9722 recs Additional status and telemetry data are planned to be exported through the management API and tool and will be documented here once available.","title":"Pool Query"},{"location":"admin/pool_operations/#pool-modifications","text":"","title":"Pool Modifications"},{"location":"admin/pool_operations/#target-exclusion-and-self-healing","text":"","title":"Target Exclusion and Self-Healing"},{"location":"admin/pool_operations/#pool-exclude","text":"An operator can exclude one or more targets from a specific DAOS pool using the rank the target resides on as well as the target idx on that rank. If a target idx list is not provided then all targets on the rank will be excluded. Excluding a target will automatically start the rebuild process. To exclude a target from a pool: $ dmg pool exclude --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool target exclude command accepts 3 parameters: The pool UUID of the pool that the targets will be excluded from. The rank of the target(s) to be excluded. The target Indices of the targets to be excluded from that rank (optional).","title":"Pool Exclude"},{"location":"admin/pool_operations/#pool-drain","text":"Alternatively when an operator would like to remove one or more pool targets without the system operating in degraded mode Drain can be used. A pool drain operation will initiate rebuild without excluding the designated target until after the rebuild is complete. This allows the target(s) drained to continue to perform I/O while the rebuild operation is ongoing. Drain additionally enables non-replicated data to be rebuilt onto another target whereas in a conventional failure scenario non-replicated data would not be integrated into a rebuild and would be lost. To drain a target from a pool: $ dmg pool drain --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool target drain command accepts 3 parameters: The pool UUID of the pool that the targets will be drained from. The rank of the target(s) to be drained. The target Indices of the targets to be drained from that rank (optional).","title":"Pool Drain"},{"location":"admin/pool_operations/#target-reintegration","text":"After a target failure an operator can fix the underlying issue and reintegrate the affected targets to restore the pool to its original state. The operator can either reintegrate specific targets for a rank by supplying a target idx list, or reintegrate an entire rank by omitting the list. $ dmg pool reintegrate --pool=${puuid} --rank=${rank} --target-idx=${idx1},${idx2},${idx3} The pool reintegrate command accepts 3 parameters: The pool UUID of the pool that the targets will be reintegrated into. The rank of the affected targets. The target Indices of the targets to be reintegrated on that rank (optional). When rebuild is triggered it will list the operations and their related targets by their rank ID and target index. Target (rank 5 idx 0) is down. Target (rank 5 idx 1) is down. ... (rank 5 idx 0) is excluded. (rank 5 idx 1) is excluded. These should be the same values used when reintegrating the targets. $ dmg pool reintegrate --pool=${puuid} --rank=5 --target-idx=0,1","title":"Target Reintegration"},{"location":"admin/pool_operations/#pool-extension","text":"","title":"Pool Extension"},{"location":"admin/pool_operations/#target-addition-space-rebalancing","text":"Full Support for online target addition and automatic space rebalancing is planned for DAOS v1.4 and will be documented here once available. Until then the following command(s) are placeholders and offer limited functionality related to Online Server Addition/Rebalancing operations. An operator can choose to extend a pool to include ranks not currently in the pool. This will automatically trigger a server rebalance operation where objects within the extended pool will be rebalanced across the new storage. $ dmg pool extend --pool=${puuid} --ranks=${rank1},${rank2}... The pool extend command accepts 2 required parameters: The pool UUID of the pool to be extended. A comma separated list of server ranks to include in the pool. The pool rebalance operation will work most efficiently when the pool is extended to its desired size in a single operation, as opposed to multiple, small extensions.","title":"Target Addition &amp; Space Rebalancing"},{"location":"admin/pool_operations/#pool-shard-resize","text":"Support for quiescent pool shard resize is currently not supported and is under consideration.","title":"Pool Shard Resize"},{"location":"admin/pool_operations/#pool-catastrophic-recovery","text":"A DAOS pool is instantiated on each target by a set of pmemobj files managed by PMDK and SPDK blobs on SSDs. Tools to verify and repair this persistent data is scheduled for DAOS v2.4 and will be documented here once available. Meanwhile, PMDK provides a recovery tool (i.e., pmempool check) to verify and possibly repair a pmemobj file. As discussed in the previous section, the rebuild status can be consulted via the pool query and will be expanded with more information.","title":"Pool Catastrophic Recovery"},{"location":"admin/pool_operations/#recovering-ownership-of-a-pools-container","text":"Typically users are expected to manage their containers. However, in the event that a container is orphaned and no users have the privileges to change the ownership, an administrator can transfer ownership of the container to a new user and/or group. To change the owner user: $ dmg cont set-owner --pool <UUID> --cont <UUID> --user <owner-user> To change the owner group: $ dmg cont set-owner --pool <UUID> --cont <UUID> --group <owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals . Because this is an administrative action, it does not require the administrator to have any privileges assigned in the container ACL.","title":"Recovering Ownership of a Pool's Container"},{"location":"admin/predeployment_check/","text":"Pre-deployment Checklist \u00b6 This section covers the preliminary setup required on the compute and storage nodes before deploying DAOS. Enable IOMMU (Optional) \u00b6 In order to run the DAOS server as a non-root user with NVMe devices, the hardware must support virtualized device access, and it must be enabled in the system BIOS. On Intel\u00ae systems, this capability is named Intel\u00ae Virtualization Technology for Directed I/O (VT-d). Once enabled in BIOS, IOMMU support must also be enabled in the Linux kernel. Exact details depend on the distribution, but the following example should be illustrative: # Enable IOMMU on CentOS 7 # All commands must be run as root/sudo! $ sudo vi /etc/default/grub # add the following line: GRUB_CMDLINE_LINUX_DEFAULT=\"intel_iommu=on\" # after saving the file, run the following to reconfigure # the bootloader: $ sudo grub2-mkconfig --output=/boot/grub2/grub.cfg # if the command completed with no errors, reboot the system # in order to make the changes take effect $ sudo reboot Warning VFIO support is a new feature for DAOS 1.2 and has been tested on CentOS 7.7 Time Synchronization \u00b6 The DAOS transaction model relies on timestamps and requires time to be synchronized across all the storage and client nodes. This can be done using NTP or any other equivalent protocol. User/Group Synchronization \u00b6 DAOS ACLs store the actual user and group names (instead of numeric IDs), and therefore the servers do not need access to a synchronized user/group database. The DAOS Agent (running on the client nodes) is responsible for resolving UID/GID to user/group names which are added to a signed credential and sent to the DAOS storage nodes. Multi-rail/NIC Setup \u00b6 Storage nodes can be configured with multiple network interfaces to run multiple engine instances. Subnet \u00b6 Since all DAOS engines need to be able to communicate, the different network interfaces need to be on the same subnet or routing capabilities across the different subnet might be configured. Infiniband/RoCE \u00b6 Some special configuration is required to use librdmacm with multiple interfaces. Firstly, the accept_local feature must be enabled on the network interfaces to be used by DAOS. This can be done using the following command ( must be replaced with the interface names): $ sysctl -w net.ipv4.conf.<ifaces>.accept_local=1 Secondly, Linux must be configured to only send ARP replies on the interface targeted in the ARP request. This is configured via the arp_ignore parameter. This should be set to 2 if all the IPoIB interfaces on the client and storage nodes are in the same logical subnet (e.g. ib0 == 10.0.0.27, ib1 == 10.0.1.27, prefix=16). $ sysctl -w net.ipv4.conf.all.arp_ignore=2 If separate logical subnets are used (e.g. prefix = 24), then the value must be set to 1. $ sysctl -w net.ipv4.conf.all.arp_ignore=1 Finally, the rp_filter is set to 1 by default on several distributions (e.g. on CentOS 7) and should be set to either 0 or 2, with 2 being more secure. This is true even if the configuration uses a single logical subnet. $ sysctl -w net.ipv4.conf.<ifaces>.rp_filter=2 All those parameters can be made persistent in /etc/sysctl.conf by adding a new sysctl file under /etc/sysctl.d (e.g. /etc/sysctl.d/95-daos-net.conf) with all the relevant settings. For more information, please refer to the librdmacm documentation Runtime Directory Setup \u00b6 DAOS uses a series of Unix Domain Sockets to communicate between its various components. On modern Linux systems, Unix Domain Sockets are typically stored under /run or /var/run (usually a symlink to /run) and are a mounted tmpfs file system. There are several methods for ensuring the necessary directories are setup. A sign that this step may have been missed is when starting daos_server or daos_agent, you may see the message: $ mkdir /var/run/daos_server: permission denied Unable to create socket directory: /var/run/daos_server Non-default Directory \u00b6 By default, daos_server and daos_agent will use the directories /var/run/daos_server and /var/run/daos_agent respectively. To change the default location that daos_server uses for its runtime directory, either uncomment and set the socket_dir configuration value in install/etc/daos_server.yml, or pass the location to daos_server on the command line using the -d flag. For the daos_agent, an alternate location can be passed on the command line using the --runtime_dir flag. Default Directory (non-persistent) \u00b6 Files and directories created in /run and /var/run only survive until the next reboot. However, if reboots are infrequent, an easy solution while still utilizing the default locations is to create the required directories manually. To do this execute the following commands. daos_server: $ mkdir /var/run/daos_server $ chmod 0755 /var/run/daos_server $ chown user:user /var/run/daos_server (where user is the user you will run daos_server as) daos_agent: $ mkdir /var/run/daos_agent $ chmod 0755 /var/run/daos_agent $ chown user:user /var/run/daos_agent (where user is the user you will run daos_agent as) Default Directory (persistent) \u00b6 If the server hosting daos_server or daos_agent will be rebooted often, systemd provides a persistent mechanism for creating the required directories called tmpfiles.d. This mechanism will be required every time the system is provisioned and requires a reboot to take effect. To tell systemd to create the necessary directories for DAOS: Copy the file utils/systemd/daosfiles.conf to /etc/tmpfiles.d\\ cp utils/systemd/daosfiles.conf /etc/tmpfiles.d Modify the copied file to change the user and group fields (currently daos) to the user daos will be run as Reboot the system, and the directories will be created automatically on all subsequent reboots. Elevated Privileges \u00b6 DAOS employs a privileged helper binary ( daos_admin ) to perform tasks that require elevated privileges on behalf of daos_server . Privileged Helper Configuration \u00b6 When DAOS is installed from RPM, the daos_admin helper is automatically installed to the correct location with the correct permissions. The RPM creates a \"daos_admins\" system group and configures permissions such that daos_admin may only be invoked from daos_server . For non-RPM installations, there are two supported scenarios: daos_server is run as root, which means that daos_admin is also invoked as root, and therefore no additional setup is necessary daos_server is run as a non-root user, which means that daos_admin must be manually installed and configured The steps to enable the second scenario are as follows (steps are assumed to be running out of a DAOS source tree which may be on a NFS share): $ chmod -x $SL_PREFIX/bin/daos_admin # prevent this copy from being executed $ sudo cp $SL_PREFIX/bin/daos_admin /usr/bin/daos_admin $ sudo chmod 4755 /usr/bin/daos_admin # make this copy setuid root $ sudo mkdir -p /usr/share/daos/control # create symlinks to SPDK scripts $ sudo ln -sf $SL_PREFIX/share/daos/control/setup_spdk.sh \\ /usr/share/daos/control $ sudo mkdir -p /usr/share/spdk/scripts $ sudo ln -sf $SL_PREFIX/share/spdk/scripts/setup.sh \\ /usr/share/spdk/scripts $ sudo ln -sf $SL_PREFIX/share/spdk/scripts/common.sh \\ /usr/share/spdk/scripts $ sudo ln -s $SL_PREFIX/include \\ /usr/share/spdk/include Note The RPM installation is preferred for production scenarios. Manual installation is most appropriate for development and predeployment proof-of-concept scenarios. Memory Lock Limits \u00b6 Low ulimit for memlock can cause SPDK to fail and emit the following error: daos_io_server:1 EAL: cannot set up DMA remapping, error 12 (Cannot allocate memory) The memlock limit only needs to be manually adjusted when daos_server is not running as a systemd service. Default ulimit settings vary between OSes. For RPM installations, the service will typically be launched by systemd and the limit is pre-set to unlimited in the daos_server.service unit file: https://github.com/daos-stack/daos/blob/master/utils/systemd/daos_server.service#L16. Note that values set in /etc/security/limits.conf are ignored by services launched by systemd. For non-RPM installations where daos_server is launched directly from the commandline, limits should be adjusted in /etc/security/limits.conf as per https://software.intel.com/content/www/us/en/develop/blogs/best-known-methods-for-setting-locked-memory-size.html.","title":"Pre-deployment Checklist"},{"location":"admin/predeployment_check/#pre-deployment-checklist","text":"This section covers the preliminary setup required on the compute and storage nodes before deploying DAOS.","title":"Pre-deployment Checklist"},{"location":"admin/predeployment_check/#enable-iommu-optional","text":"In order to run the DAOS server as a non-root user with NVMe devices, the hardware must support virtualized device access, and it must be enabled in the system BIOS. On Intel\u00ae systems, this capability is named Intel\u00ae Virtualization Technology for Directed I/O (VT-d). Once enabled in BIOS, IOMMU support must also be enabled in the Linux kernel. Exact details depend on the distribution, but the following example should be illustrative: # Enable IOMMU on CentOS 7 # All commands must be run as root/sudo! $ sudo vi /etc/default/grub # add the following line: GRUB_CMDLINE_LINUX_DEFAULT=\"intel_iommu=on\" # after saving the file, run the following to reconfigure # the bootloader: $ sudo grub2-mkconfig --output=/boot/grub2/grub.cfg # if the command completed with no errors, reboot the system # in order to make the changes take effect $ sudo reboot Warning VFIO support is a new feature for DAOS 1.2 and has been tested on CentOS 7.7","title":"Enable IOMMU (Optional)"},{"location":"admin/predeployment_check/#time-synchronization","text":"The DAOS transaction model relies on timestamps and requires time to be synchronized across all the storage and client nodes. This can be done using NTP or any other equivalent protocol.","title":"Time Synchronization"},{"location":"admin/predeployment_check/#usergroup-synchronization","text":"DAOS ACLs store the actual user and group names (instead of numeric IDs), and therefore the servers do not need access to a synchronized user/group database. The DAOS Agent (running on the client nodes) is responsible for resolving UID/GID to user/group names which are added to a signed credential and sent to the DAOS storage nodes.","title":"User/Group Synchronization"},{"location":"admin/predeployment_check/#multi-railnic-setup","text":"Storage nodes can be configured with multiple network interfaces to run multiple engine instances.","title":"Multi-rail/NIC Setup"},{"location":"admin/predeployment_check/#subnet","text":"Since all DAOS engines need to be able to communicate, the different network interfaces need to be on the same subnet or routing capabilities across the different subnet might be configured.","title":"Subnet"},{"location":"admin/predeployment_check/#infinibandroce","text":"Some special configuration is required to use librdmacm with multiple interfaces. Firstly, the accept_local feature must be enabled on the network interfaces to be used by DAOS. This can be done using the following command ( must be replaced with the interface names): $ sysctl -w net.ipv4.conf.<ifaces>.accept_local=1 Secondly, Linux must be configured to only send ARP replies on the interface targeted in the ARP request. This is configured via the arp_ignore parameter. This should be set to 2 if all the IPoIB interfaces on the client and storage nodes are in the same logical subnet (e.g. ib0 == 10.0.0.27, ib1 == 10.0.1.27, prefix=16). $ sysctl -w net.ipv4.conf.all.arp_ignore=2 If separate logical subnets are used (e.g. prefix = 24), then the value must be set to 1. $ sysctl -w net.ipv4.conf.all.arp_ignore=1 Finally, the rp_filter is set to 1 by default on several distributions (e.g. on CentOS 7) and should be set to either 0 or 2, with 2 being more secure. This is true even if the configuration uses a single logical subnet. $ sysctl -w net.ipv4.conf.<ifaces>.rp_filter=2 All those parameters can be made persistent in /etc/sysctl.conf by adding a new sysctl file under /etc/sysctl.d (e.g. /etc/sysctl.d/95-daos-net.conf) with all the relevant settings. For more information, please refer to the librdmacm documentation","title":"Infiniband/RoCE"},{"location":"admin/predeployment_check/#runtime-directory-setup","text":"DAOS uses a series of Unix Domain Sockets to communicate between its various components. On modern Linux systems, Unix Domain Sockets are typically stored under /run or /var/run (usually a symlink to /run) and are a mounted tmpfs file system. There are several methods for ensuring the necessary directories are setup. A sign that this step may have been missed is when starting daos_server or daos_agent, you may see the message: $ mkdir /var/run/daos_server: permission denied Unable to create socket directory: /var/run/daos_server","title":"Runtime Directory Setup"},{"location":"admin/predeployment_check/#non-default-directory","text":"By default, daos_server and daos_agent will use the directories /var/run/daos_server and /var/run/daos_agent respectively. To change the default location that daos_server uses for its runtime directory, either uncomment and set the socket_dir configuration value in install/etc/daos_server.yml, or pass the location to daos_server on the command line using the -d flag. For the daos_agent, an alternate location can be passed on the command line using the --runtime_dir flag.","title":"Non-default Directory"},{"location":"admin/predeployment_check/#default-directory-non-persistent","text":"Files and directories created in /run and /var/run only survive until the next reboot. However, if reboots are infrequent, an easy solution while still utilizing the default locations is to create the required directories manually. To do this execute the following commands. daos_server: $ mkdir /var/run/daos_server $ chmod 0755 /var/run/daos_server $ chown user:user /var/run/daos_server (where user is the user you will run daos_server as) daos_agent: $ mkdir /var/run/daos_agent $ chmod 0755 /var/run/daos_agent $ chown user:user /var/run/daos_agent (where user is the user you will run daos_agent as)","title":"Default Directory (non-persistent)"},{"location":"admin/predeployment_check/#default-directory-persistent","text":"If the server hosting daos_server or daos_agent will be rebooted often, systemd provides a persistent mechanism for creating the required directories called tmpfiles.d. This mechanism will be required every time the system is provisioned and requires a reboot to take effect. To tell systemd to create the necessary directories for DAOS: Copy the file utils/systemd/daosfiles.conf to /etc/tmpfiles.d\\ cp utils/systemd/daosfiles.conf /etc/tmpfiles.d Modify the copied file to change the user and group fields (currently daos) to the user daos will be run as Reboot the system, and the directories will be created automatically on all subsequent reboots.","title":"Default Directory (persistent)"},{"location":"admin/predeployment_check/#elevated-privileges","text":"DAOS employs a privileged helper binary ( daos_admin ) to perform tasks that require elevated privileges on behalf of daos_server .","title":"Elevated Privileges"},{"location":"admin/predeployment_check/#privileged-helper-configuration","text":"When DAOS is installed from RPM, the daos_admin helper is automatically installed to the correct location with the correct permissions. The RPM creates a \"daos_admins\" system group and configures permissions such that daos_admin may only be invoked from daos_server . For non-RPM installations, there are two supported scenarios: daos_server is run as root, which means that daos_admin is also invoked as root, and therefore no additional setup is necessary daos_server is run as a non-root user, which means that daos_admin must be manually installed and configured The steps to enable the second scenario are as follows (steps are assumed to be running out of a DAOS source tree which may be on a NFS share): $ chmod -x $SL_PREFIX/bin/daos_admin # prevent this copy from being executed $ sudo cp $SL_PREFIX/bin/daos_admin /usr/bin/daos_admin $ sudo chmod 4755 /usr/bin/daos_admin # make this copy setuid root $ sudo mkdir -p /usr/share/daos/control # create symlinks to SPDK scripts $ sudo ln -sf $SL_PREFIX/share/daos/control/setup_spdk.sh \\ /usr/share/daos/control $ sudo mkdir -p /usr/share/spdk/scripts $ sudo ln -sf $SL_PREFIX/share/spdk/scripts/setup.sh \\ /usr/share/spdk/scripts $ sudo ln -sf $SL_PREFIX/share/spdk/scripts/common.sh \\ /usr/share/spdk/scripts $ sudo ln -s $SL_PREFIX/include \\ /usr/share/spdk/include Note The RPM installation is preferred for production scenarios. Manual installation is most appropriate for development and predeployment proof-of-concept scenarios.","title":"Privileged Helper Configuration"},{"location":"admin/predeployment_check/#memory-lock-limits","text":"Low ulimit for memlock can cause SPDK to fail and emit the following error: daos_io_server:1 EAL: cannot set up DMA remapping, error 12 (Cannot allocate memory) The memlock limit only needs to be manually adjusted when daos_server is not running as a systemd service. Default ulimit settings vary between OSes. For RPM installations, the service will typically be launched by systemd and the limit is pre-set to unlimited in the daos_server.service unit file: https://github.com/daos-stack/daos/blob/master/utils/systemd/daos_server.service#L16. Note that values set in /etc/security/limits.conf are ignored by services launched by systemd. For non-RPM installations where daos_server is launched directly from the commandline, limits should be adjusted in /etc/security/limits.conf as per https://software.intel.com/content/www/us/en/develop/blogs/best-known-methods-for-setting-locked-memory-size.html.","title":"Memory Lock Limits"},{"location":"admin/tiering_uns/","text":"Tiering and Unified Namespace \u00b6 Unified Namespace \u00b6 The DAOS tier can be tightly integrated with the Lustre parallel filesystem in which DAOS containers will be represented through the Lustre namespace. This capability is under development and is scheduled for DAOS v1.2. Current state of work can be summarized as follow : DAOS integration with Lustre uses the Lustre foreign file/dir feature (from LU-11376 and associated patches) each time a DAOS POSIX container is created, using daos utility and its '--path' UNS option, a Lustre foreign file/dir of 'daos' type is being created with a specific LOV/LMV EA content that will allow to store the DAOS pool and containers UUIDs. Lustre Client patch for LU-12682, adds DAOS specific support to the Lustre foreign file/dir feature. It allows for foreign file/dir of daos type to be presented and act as <absolute-prefix>/<pool-uuid>/<container-uuid> a symlink to the Linux Kernel/VFS. the can be specified as the new daos=<absolute-prefix> Lustre Client mount option, or also through the new llite.*.daos_prefix Lustre dynamic tuneable. And both and are extracted from foreign file/dir LOV/LMV EA. to allow for symlink resolution and transparent access to DAOS concerned container content, it is expected that a DFuse/DFS instance/mount, of DAOS Server root, exists on presenting all served pools/containers as <pool-uuid>/<container-uuid> relative paths. daos foreign support is enabled at mount time with daos= option present, or dynamically through llite.*.daos_enable setting. Data Migration \u00b6 Migration to/from a POSIX filesystem \u00b6 A dataset mover tool is under consideration to move a snapshot of a POSIX, MPI-IO or HDF5 container to a POSIX filesystem and vice versa. The copy will be performed at the POSIX or HDF5 level. The resulting HDF5 file over the POSIX filesystem will be accessible through the native HDF5 connector with the POSIX VFD. The first version of the mover tool is currently scheduled for DAOS v1.4. Container Parking \u00b6 The mover tool will also eventually support the ability to serialize and deserialize a DAOS container to a set of POSIX files that can be stored or \"parked\" in an external POSIX filesystem. This transformation is agnostic to the data model and container type and will retain all DAOS internal metadata.","title":"Tiering and Unified Namespace"},{"location":"admin/tiering_uns/#tiering-and-unified-namespace","text":"","title":"Tiering and Unified Namespace"},{"location":"admin/tiering_uns/#unified-namespace","text":"The DAOS tier can be tightly integrated with the Lustre parallel filesystem in which DAOS containers will be represented through the Lustre namespace. This capability is under development and is scheduled for DAOS v1.2. Current state of work can be summarized as follow : DAOS integration with Lustre uses the Lustre foreign file/dir feature (from LU-11376 and associated patches) each time a DAOS POSIX container is created, using daos utility and its '--path' UNS option, a Lustre foreign file/dir of 'daos' type is being created with a specific LOV/LMV EA content that will allow to store the DAOS pool and containers UUIDs. Lustre Client patch for LU-12682, adds DAOS specific support to the Lustre foreign file/dir feature. It allows for foreign file/dir of daos type to be presented and act as <absolute-prefix>/<pool-uuid>/<container-uuid> a symlink to the Linux Kernel/VFS. the can be specified as the new daos=<absolute-prefix> Lustre Client mount option, or also through the new llite.*.daos_prefix Lustre dynamic tuneable. And both and are extracted from foreign file/dir LOV/LMV EA. to allow for symlink resolution and transparent access to DAOS concerned container content, it is expected that a DFuse/DFS instance/mount, of DAOS Server root, exists on presenting all served pools/containers as <pool-uuid>/<container-uuid> relative paths. daos foreign support is enabled at mount time with daos= option present, or dynamically through llite.*.daos_enable setting.","title":"Unified Namespace"},{"location":"admin/tiering_uns/#data-migration","text":"","title":"Data Migration"},{"location":"admin/tiering_uns/#migration-tofrom-a-posix-filesystem","text":"A dataset mover tool is under consideration to move a snapshot of a POSIX, MPI-IO or HDF5 container to a POSIX filesystem and vice versa. The copy will be performed at the POSIX or HDF5 level. The resulting HDF5 file over the POSIX filesystem will be accessible through the native HDF5 connector with the POSIX VFD. The first version of the mover tool is currently scheduled for DAOS v1.4.","title":"Migration to/from a POSIX filesystem"},{"location":"admin/tiering_uns/#container-parking","text":"The mover tool will also eventually support the ability to serialize and deserialize a DAOS container to a set of POSIX files that can be stored or \"parked\" in an external POSIX filesystem. This transformation is agnostic to the data model and container type and will retain all DAOS internal metadata.","title":"Container Parking"},{"location":"admin/troubleshooting/","text":"Troubleshooting \u00b6 DAOS Errors \u00b6 DAOS error numbering starts at 1000. The most common errors are documented in the table below. DAOS Error Value Description DER_NO_PERM 1001 No permission DER_NO_HDL 1002 Invalid handle DER_INVAL 1003 Invalid parameters DER_NOSPACE 1007 No space left on storage target DER_NOSYS 1010 Function not implemented DER_IO 2001 Generic I/O error DER_ENOENT 2003 Entry not found DER_KEY2BIG 2012 Key is too large DER_IO_INVAL 2014 IO buffers can't match object extents DER_AGENT_INCOMPAT 2029 Agent is incompatible with libdaos When an operation fails, DAOS returns a negative DER error. For a full list of errors, please check https://github.com/daos-stack/cart/blob/master/src/include/daos_errno.h (DER_ERR_GURT_BASE is equal to 1000 and DER_ERR_DAOS_BASE is equal to 2000). The function d_errstr() is provided in the API to convert an error number to an error message. Log Files \u00b6 On the server side, there are three log files created as part of normal server operations: Component Config Parameter Example Config Value Control Plane control_log_file /tmp/daos_control.log Data Plane log_file /tmp/daos_server.log Privileged Helper helper_log_file /tmp/daos_admin.log agent log_file /tmp/daos_agent.log Control Plane Log \u00b6 The default log level for the control plane is INFO. The following levels may be set using the control_log_mask config parameter: DEBUG INFO ERROR Data Plane Log \u00b6 Data Plane ( daos_io_server ) logging is configured on a per-instance basis. In other words, each section under the servers: section must have its own logging configuration. The log_file config parameter is converted to a D_LOG_FILE environment variable value. For more detail, please see the Debugging System section of this document. Privileged Helper Log \u00b6 By default, the privileged helper only emits ERROR-level logging which is captured by the control plane and included in that log. If the helper_log_file parameter is set in the server config, then DEBUG-level logging will be sent to the specified file. Daos Agent Log \u00b6 If the log_file config parameter is set in the agent config, then DEBUG-level logging will be sent to the specified file. Debugging System \u00b6 DAOS uses the debug system defined in CaRT but more specifically the GURT library. Default server log is \"/tmp/daos.log\" and client default log is stdout, unless otherwise set by D_LOG_FILE . Registered Subsystems/Facilities \u00b6 The debug logging system includes a series of subsystems or facilities which define groups for related log messages (defined per source file). There are common facilities which are defined in GURT, as well as other facilities that can be defined on a per-project basis (such as those for CaRT and DAOS). DD_SUBSYS can be used to set which subsystems to enable logging. By default all subsystems are enabled (\"DD_SUBSYS=all\"). DAOS Facilities: common, tree, vos, client, server, rdb, pool, container, object, placement, rebuild, tier, mgmt, bio, tests Common Facilities (GURT): MISC, MEM CaRT Facilities: RPC, BULK, CORPC, GRP, LM, HG, ST, IV Priority Logging \u00b6 All macros that output logs have a priority level, shown in descending order below. D_FATAL(fmt, ...) FATAL D_CRIT(fmt, ...) CRIT D_ERROR(fmt, ...) ERR D_WARN(fmt, ...) WARN D_NOTE(fmt, ...) NOTE D_INFO(fmt, ...) INFO D_DEBUG(mask, fmt, ...) DEBUG The priority level that outputs to stderr is set with DD_STDERR. By default in DAOS (specific to the project), this is set to CRIT (\"DD_STDERR=CRIT\") meaning that all CRIT and more severe log messages will dump to stderr. However, this is separate from the priority of logging to \"/tmp/daos.log\". The priority level of logging can be set with D_LOG_MASK, which by default is set to INFO (\"D_LOG_MASK=INFO\"), which will result in all messages excluding DEBUG messages being logged. D_LOG_MASK can also be used to specify the level of logging on a per-subsystem basis as well (\"D_LOG_MASK=DEBUG,MEM=ERR\"). Debug Masks/Streams: \u00b6 DEBUG messages account for a majority of the log messages, and finer-granularity might be desired. Mask bits are set as the first argument passed in D_DEBUG(mask, ...). To accomplish this, DD_MASK can be set to enable different debug streams. Similar to facilities, there are common debug streams defined in GURT, as well as other streams that can be defined on a per-project basis (CaRT and DAOS). All debug streams are enabled by default (\"DD_MASK=all\"). DAOS Debug Masks: md = metadata operations pl = placement operations mgmt = pool management epc = epoch system df = durable format rebuild = rebuild process daos_default = (group mask) io, md, pl, and rebuild operations Common Debug Masks (GURT): any = generic messages, no classification trace = function trace, tree/hash/lru operations mem = memory operations net = network operations io = object I/Otest = test programs Common Use Cases \u00b6 Generic setup for all messages (default settings) $ D_LOG_MASK=DEBUG $ DD_SUBSYS=all $ DD_MASK=all Disable all logs for performance tuning $ D_LOG_MASK=ERR -> will only log error messages from all facilities $ D_LOG_MASK=FATAL -> will only log system fatal messages Disable a noisy debug logging subsystem $ D_LOG_MASK=DEBUG,MEM=ERR -> disables MEM facility by restricting all logs from that facility to ERROR or higher priority only Enable a subset of facilities of interest $ DD_SUBSYS=rpc,tests $ D_LOG_MASK=DEBUG -> required to see logs for RPC and TESTS less severe than INFO (the majority of log messages) Fine-tune the debug messages by setting a debug mask $ D_LOG_MASK=DEBUG $ DD_MASK=mgmt -> only logs DEBUG messages related to pool management Refer to the DAOS Environment Variables document for more information about the debug system environment. Common DAOS Problems \u00b6 When DER_AGENT_INCOMPAT is received, it means that the client library libdaos.so is likely mismatched with the DAOS Agent. The libdaos.so, DAOS Agent and DAOS Server must be built from compatible sources so that the GetAttachInfo protocol is the same between each component. Depending on your situation, you will need to either update the DAOS Agent or the libdaos.so to the newer version in order to maintain compatibility with each other. Bug Report \u00b6 Bugs should be reported through our issue tracker 1 with a test case to reproduce the issue (when applicable) and debug logs. After creating a ticket, logs should be gathered from the locations described in the Log Files section of this document and attached to the ticket. To avoid problems with attaching large files, please attach the logs in a compressed container format, such as .zip or .tar.bz2. https://jira.hpdd.intel.com \u21a9","title":"Troubleshooting"},{"location":"admin/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"admin/troubleshooting/#daos-errors","text":"DAOS error numbering starts at 1000. The most common errors are documented in the table below. DAOS Error Value Description DER_NO_PERM 1001 No permission DER_NO_HDL 1002 Invalid handle DER_INVAL 1003 Invalid parameters DER_NOSPACE 1007 No space left on storage target DER_NOSYS 1010 Function not implemented DER_IO 2001 Generic I/O error DER_ENOENT 2003 Entry not found DER_KEY2BIG 2012 Key is too large DER_IO_INVAL 2014 IO buffers can't match object extents DER_AGENT_INCOMPAT 2029 Agent is incompatible with libdaos When an operation fails, DAOS returns a negative DER error. For a full list of errors, please check https://github.com/daos-stack/cart/blob/master/src/include/daos_errno.h (DER_ERR_GURT_BASE is equal to 1000 and DER_ERR_DAOS_BASE is equal to 2000). The function d_errstr() is provided in the API to convert an error number to an error message.","title":"DAOS Errors"},{"location":"admin/troubleshooting/#log-files","text":"On the server side, there are three log files created as part of normal server operations: Component Config Parameter Example Config Value Control Plane control_log_file /tmp/daos_control.log Data Plane log_file /tmp/daos_server.log Privileged Helper helper_log_file /tmp/daos_admin.log agent log_file /tmp/daos_agent.log","title":"Log Files"},{"location":"admin/troubleshooting/#control-plane-log","text":"The default log level for the control plane is INFO. The following levels may be set using the control_log_mask config parameter: DEBUG INFO ERROR","title":"Control Plane Log"},{"location":"admin/troubleshooting/#data-plane-log","text":"Data Plane ( daos_io_server ) logging is configured on a per-instance basis. In other words, each section under the servers: section must have its own logging configuration. The log_file config parameter is converted to a D_LOG_FILE environment variable value. For more detail, please see the Debugging System section of this document.","title":"Data Plane Log"},{"location":"admin/troubleshooting/#privileged-helper-log","text":"By default, the privileged helper only emits ERROR-level logging which is captured by the control plane and included in that log. If the helper_log_file parameter is set in the server config, then DEBUG-level logging will be sent to the specified file.","title":"Privileged Helper Log"},{"location":"admin/troubleshooting/#daos-agent-log","text":"If the log_file config parameter is set in the agent config, then DEBUG-level logging will be sent to the specified file.","title":"Daos Agent Log"},{"location":"admin/troubleshooting/#debugging-system","text":"DAOS uses the debug system defined in CaRT but more specifically the GURT library. Default server log is \"/tmp/daos.log\" and client default log is stdout, unless otherwise set by D_LOG_FILE .","title":"Debugging System"},{"location":"admin/troubleshooting/#registered-subsystemsfacilities","text":"The debug logging system includes a series of subsystems or facilities which define groups for related log messages (defined per source file). There are common facilities which are defined in GURT, as well as other facilities that can be defined on a per-project basis (such as those for CaRT and DAOS). DD_SUBSYS can be used to set which subsystems to enable logging. By default all subsystems are enabled (\"DD_SUBSYS=all\"). DAOS Facilities: common, tree, vos, client, server, rdb, pool, container, object, placement, rebuild, tier, mgmt, bio, tests Common Facilities (GURT): MISC, MEM CaRT Facilities: RPC, BULK, CORPC, GRP, LM, HG, ST, IV","title":"Registered Subsystems/Facilities"},{"location":"admin/troubleshooting/#priority-logging","text":"All macros that output logs have a priority level, shown in descending order below. D_FATAL(fmt, ...) FATAL D_CRIT(fmt, ...) CRIT D_ERROR(fmt, ...) ERR D_WARN(fmt, ...) WARN D_NOTE(fmt, ...) NOTE D_INFO(fmt, ...) INFO D_DEBUG(mask, fmt, ...) DEBUG The priority level that outputs to stderr is set with DD_STDERR. By default in DAOS (specific to the project), this is set to CRIT (\"DD_STDERR=CRIT\") meaning that all CRIT and more severe log messages will dump to stderr. However, this is separate from the priority of logging to \"/tmp/daos.log\". The priority level of logging can be set with D_LOG_MASK, which by default is set to INFO (\"D_LOG_MASK=INFO\"), which will result in all messages excluding DEBUG messages being logged. D_LOG_MASK can also be used to specify the level of logging on a per-subsystem basis as well (\"D_LOG_MASK=DEBUG,MEM=ERR\").","title":"Priority Logging"},{"location":"admin/troubleshooting/#debug-masksstreams","text":"DEBUG messages account for a majority of the log messages, and finer-granularity might be desired. Mask bits are set as the first argument passed in D_DEBUG(mask, ...). To accomplish this, DD_MASK can be set to enable different debug streams. Similar to facilities, there are common debug streams defined in GURT, as well as other streams that can be defined on a per-project basis (CaRT and DAOS). All debug streams are enabled by default (\"DD_MASK=all\"). DAOS Debug Masks: md = metadata operations pl = placement operations mgmt = pool management epc = epoch system df = durable format rebuild = rebuild process daos_default = (group mask) io, md, pl, and rebuild operations Common Debug Masks (GURT): any = generic messages, no classification trace = function trace, tree/hash/lru operations mem = memory operations net = network operations io = object I/Otest = test programs","title":"Debug Masks/Streams:"},{"location":"admin/troubleshooting/#common-use-cases","text":"Generic setup for all messages (default settings) $ D_LOG_MASK=DEBUG $ DD_SUBSYS=all $ DD_MASK=all Disable all logs for performance tuning $ D_LOG_MASK=ERR -> will only log error messages from all facilities $ D_LOG_MASK=FATAL -> will only log system fatal messages Disable a noisy debug logging subsystem $ D_LOG_MASK=DEBUG,MEM=ERR -> disables MEM facility by restricting all logs from that facility to ERROR or higher priority only Enable a subset of facilities of interest $ DD_SUBSYS=rpc,tests $ D_LOG_MASK=DEBUG -> required to see logs for RPC and TESTS less severe than INFO (the majority of log messages) Fine-tune the debug messages by setting a debug mask $ D_LOG_MASK=DEBUG $ DD_MASK=mgmt -> only logs DEBUG messages related to pool management Refer to the DAOS Environment Variables document for more information about the debug system environment.","title":"Common Use Cases"},{"location":"admin/troubleshooting/#common-daos-problems","text":"When DER_AGENT_INCOMPAT is received, it means that the client library libdaos.so is likely mismatched with the DAOS Agent. The libdaos.so, DAOS Agent and DAOS Server must be built from compatible sources so that the GetAttachInfo protocol is the same between each component. Depending on your situation, you will need to either update the DAOS Agent or the libdaos.so to the newer version in order to maintain compatibility with each other.","title":"Common DAOS Problems"},{"location":"admin/troubleshooting/#bug-report","text":"Bugs should be reported through our issue tracker 1 with a test case to reproduce the issue (when applicable) and debug logs. After creating a ticket, logs should be gathered from the locations described in the Log Files section of this document and attached to the ticket. To avoid problems with attaching large files, please attach the logs in a compressed container format, such as .zip or .tar.bz2. https://jira.hpdd.intel.com \u21a9","title":"Bug Report"},{"location":"admin/utilities_examples/","text":"Utilities & Usage Examples \u00b6 This section to be updated in a future revision.","title":"Utilities and Usage Examples"},{"location":"admin/utilities_examples/#utilities-usage-examples","text":"This section to be updated in a future revision.","title":"Utilities &amp; Usage Examples"},{"location":"dev/coding/","text":"DAOS Coding Rules \u00b6","title":"DAOS Coding Rules"},{"location":"dev/coding/#daos-coding-rules","text":"","title":"DAOS Coding Rules"},{"location":"dev/contributing/","text":"Contributing to DAOS \u00b6 Your contributions are most welcome! There are several good ways to suggest new features, offer to add a feature, or just begin a dialog about DAOS: Open an issue in jira Suggest a feature, ask a question, start a discussion, etc. in our user group Chat with members of the DAOS community real-time on Gitter Coding Rules \u00b6 Please check the coding conventions for code contribution. Commit Comments \u00b6 Commit Message Content \u00b6 Writing good commit comments is critical to ensuring that changes are easily understood, even years after they were originally written. The commit comment should contain enough information about the change to allow the reader to understand the motivation for the change, what parts of the code it is affecting, and any interesting, unusual, or complex parts of the change to draw attention to. The reason for a change may be manyfold: bug, enhancement, feature, code style, etc. so providing information about this sets the stage for understanding the change. If it is a bug, include information about what usage triggers the bug and how it manifests (error messages, assertion failure, etc.). If it is a feature, include information about what improvement is being made, and how it will affect usage. Providing some high-level information about the code path that is being modified is useful for the reader, since the files and patch fragments are not necessarily going to be listed in a sensible order in the patch. Including the important functions being modified provides a starting point for the reader to follow the logic of the change, and makes it easier to search for such changes in the future. If the patch is based on some earlier patch, then including the git commit hash of the original patch, Jira ticket number, etc. is useful for tracking the chain of dependencies. This can be very useful if a patch is landed separately to different maintenance branches, if it is fixing a problem in a previously landed patch, or if it is being imported from an upstream kernel commit. Having long commit comments that describe the change well is a good thing. The commit comments will be tightly associated with the code for a long time into the future, even many of the original commit comments from years earlier are still available through changes of the source code repository. In contrast, bug tracking systems come and go, and cannot be relied upon to track information about a change for extended periods of time. Commit Message Format \u00b6 Unlike the content of the commit message, the format is relatively easy to verify for correctness. Having the same standard format allows Git tools like git shortlog to extract information from the patches more easily. The first line of the commit comment is the commit summary of the change. Changes submitted to the DAOS master branch require a DAOS Jira ticket number at the beginning of the commit summary. A DAOS Jira ticket is one that begins with DAOS and is, therefore, part of the DAOS project within Jira. The commit summary should also have a component: tag immediately following the Jira ticket number that indicates to which DAOS subsystem the commit is related. Example DAOS subsystems relate to modules like client, pool, container, object, vos, rdb; functional components like rebuild; or auxiliary components like build, tests, doc. This subsystem list is not exhaustive but provides a good guideline for consistency. The commit summary line must be 62 characters or less, including the Jira ticket number and component tag, so that git shortlog and git format-patch can fit the summary onto a single line. The summary must be followed by a blank line. The rest of the comments should be wrapped to 70 columns or less. This allows for the first line to be used as a subject in emails, and also for the entire body to be displayed using tools like git log or git shortlog in an 80 column window. DAOS-nnn component: short description of change under 62 columns The \"component:\" should be a lower-case single-word subsystem of the DAOS code that best encompasses the change being made. Examples of components include modules: client, pool, container, object, vos, rdb, cart; functional subsystems: recovery; and auxiliary areas: build, tests, docs. This list is not exhaustive, but is a guideline. The commit comment should contain a detailed explanation of changes being made. This can be as long as you'd like. Please give details of what problem was solved (including error messages or problems that were seen), a good high-level description of how it was solved, and which parts of the code were changed (including important functions that were changed, if this is useful to understand the patch, and for easier searching). Wrap lines at/under 70 columns. Signed-off-by: Your Real Name <your_email@domain.name> The Signed-off-by: line \u00b6 The Signed-off-by: line asserts that you have permission to contribute the code to the project according to the Developer's Certificate of Origin. The -s option to git commit also adds the Signed-off-by: line automatically. Additional commit tags \u00b6 A number of additional commit tags can be used to further explain who has contributed to the patch, and for tracking purposes. These tags are commonly used with Linux kernel patches. These tags should appear before the Signed-off-by: tag. Acked-by: User Name <user@domain.com> Tested-by: User Name <user@domain.com> Reported-by: User Name <user@domain.com> Reviewed-by: User Name <user@domain.com> CC: User Name <user@domain.com> Pull Requests (PR) \u00b6 DAOS uses the common fork & merge workflow used by most GitHub-hosted projects. Please refer to the online GitHub documentation .","title":"Contributing"},{"location":"dev/contributing/#contributing-to-daos","text":"Your contributions are most welcome! There are several good ways to suggest new features, offer to add a feature, or just begin a dialog about DAOS: Open an issue in jira Suggest a feature, ask a question, start a discussion, etc. in our user group Chat with members of the DAOS community real-time on Gitter","title":"Contributing to DAOS"},{"location":"dev/contributing/#coding-rules","text":"Please check the coding conventions for code contribution.","title":"Coding Rules"},{"location":"dev/contributing/#commit-comments","text":"","title":"Commit Comments"},{"location":"dev/contributing/#commit-message-content","text":"Writing good commit comments is critical to ensuring that changes are easily understood, even years after they were originally written. The commit comment should contain enough information about the change to allow the reader to understand the motivation for the change, what parts of the code it is affecting, and any interesting, unusual, or complex parts of the change to draw attention to. The reason for a change may be manyfold: bug, enhancement, feature, code style, etc. so providing information about this sets the stage for understanding the change. If it is a bug, include information about what usage triggers the bug and how it manifests (error messages, assertion failure, etc.). If it is a feature, include information about what improvement is being made, and how it will affect usage. Providing some high-level information about the code path that is being modified is useful for the reader, since the files and patch fragments are not necessarily going to be listed in a sensible order in the patch. Including the important functions being modified provides a starting point for the reader to follow the logic of the change, and makes it easier to search for such changes in the future. If the patch is based on some earlier patch, then including the git commit hash of the original patch, Jira ticket number, etc. is useful for tracking the chain of dependencies. This can be very useful if a patch is landed separately to different maintenance branches, if it is fixing a problem in a previously landed patch, or if it is being imported from an upstream kernel commit. Having long commit comments that describe the change well is a good thing. The commit comments will be tightly associated with the code for a long time into the future, even many of the original commit comments from years earlier are still available through changes of the source code repository. In contrast, bug tracking systems come and go, and cannot be relied upon to track information about a change for extended periods of time.","title":"Commit Message Content"},{"location":"dev/contributing/#commit-message-format","text":"Unlike the content of the commit message, the format is relatively easy to verify for correctness. Having the same standard format allows Git tools like git shortlog to extract information from the patches more easily. The first line of the commit comment is the commit summary of the change. Changes submitted to the DAOS master branch require a DAOS Jira ticket number at the beginning of the commit summary. A DAOS Jira ticket is one that begins with DAOS and is, therefore, part of the DAOS project within Jira. The commit summary should also have a component: tag immediately following the Jira ticket number that indicates to which DAOS subsystem the commit is related. Example DAOS subsystems relate to modules like client, pool, container, object, vos, rdb; functional components like rebuild; or auxiliary components like build, tests, doc. This subsystem list is not exhaustive but provides a good guideline for consistency. The commit summary line must be 62 characters or less, including the Jira ticket number and component tag, so that git shortlog and git format-patch can fit the summary onto a single line. The summary must be followed by a blank line. The rest of the comments should be wrapped to 70 columns or less. This allows for the first line to be used as a subject in emails, and also for the entire body to be displayed using tools like git log or git shortlog in an 80 column window. DAOS-nnn component: short description of change under 62 columns The \"component:\" should be a lower-case single-word subsystem of the DAOS code that best encompasses the change being made. Examples of components include modules: client, pool, container, object, vos, rdb, cart; functional subsystems: recovery; and auxiliary areas: build, tests, docs. This list is not exhaustive, but is a guideline. The commit comment should contain a detailed explanation of changes being made. This can be as long as you'd like. Please give details of what problem was solved (including error messages or problems that were seen), a good high-level description of how it was solved, and which parts of the code were changed (including important functions that were changed, if this is useful to understand the patch, and for easier searching). Wrap lines at/under 70 columns. Signed-off-by: Your Real Name <your_email@domain.name>","title":"Commit Message Format"},{"location":"dev/contributing/#the-signed-off-by-line","text":"The Signed-off-by: line asserts that you have permission to contribute the code to the project according to the Developer's Certificate of Origin. The -s option to git commit also adds the Signed-off-by: line automatically.","title":"The Signed-off-by: line"},{"location":"dev/contributing/#additional-commit-tags","text":"A number of additional commit tags can be used to further explain who has contributed to the patch, and for tracking purposes. These tags are commonly used with Linux kernel patches. These tags should appear before the Signed-off-by: tag. Acked-by: User Name <user@domain.com> Tested-by: User Name <user@domain.com> Reported-by: User Name <user@domain.com> Reviewed-by: User Name <user@domain.com> CC: User Name <user@domain.com>","title":"Additional commit tags"},{"location":"dev/contributing/#pull-requests-pr","text":"DAOS uses the common fork & merge workflow used by most GitHub-hosted projects. Please refer to the online GitHub documentation .","title":"Pull Requests (PR)"},{"location":"dev/development/","text":"Development Environment \u00b6 This section covers specific instructions to create a developer-friendly environment to contribute to the DAOS development. This includes how to regenerate the protobuf files or add new Go package dependencies, which is only required for development purposes. Building DAOS for Development \u00b6 Prerequisite when built using --build-deps are installed in component specific directories under PREFIX/prereq/$TARGET_TYPE. Initialize and update the git submodules: $ git submodule init $ git submodule update Run the following scons command: $ scons PREFIX=${daos_prefix_path} install --build-deps=yes --config=force Installing the components into separate directories allow upgrading the components individually by replacing --build-deps=yes with --update-prereq={component\\_name} . This requires a change to the environment configuration from before. For automated environment setup, source utils/sl/utils/setup_local.sh . The install path should be relocatable with the exception that daos_admin will not be able to find the new location of daos and dependencies. All other libraries and binaries should work without any change due to relative paths. Editing the .build-vars.sh file to replace the old with the new can restore the capability of setup_local.sh to automate path setup. To run daos_server, either the rpath in daos_admin needs to be patched to the new installation location of spdk and isal or LD_LIBRARY_PATH needs to be set. This can be done using SL_SPDK_PREFIX and SL_ISAL_PREFIX set when sourcing setup_local.sh . This can also be done with the following commands: source utils/sl/setup_local.sh sudo -E utils/setup_daos_admin.sh [path to new location of daos] This script is intended only for developer setup of daos_admin . With this approach, DAOS gets built using the prebuilt dependencies in ${daos_prefix_path}/prereq , and required options are saved for future compilations. So, after the first time, during development, only \" scons --config=force \" and \" scons --config=force install \" would suffice for compiling changes to DAOS source code. If you wish to compile DAOS with clang rather than gcc , set COMPILER=clang on the scons command line. This option is also saved for future compilations. Additionally, users can specify BUILD_TYPE=[dev|release|debug] and scons will save the intermediate build for the various BUILD_TYPE , COMPILER , and TARGET_TYPE options so a user can switch between options without a full rebuild and thus with minimal cost. By default, TARGET_TYPE is set to 'default' which means it uses the BUILD_TYPE setting. To avoid rebuilding prerequisites for every BUILD_TYPE setting, TARGET_TYPE can be explicitly set to a BUILD_TYPE setting to always use that set of prerequisites. These settings are stored in daos.conf so setting the values on subsequent builds is not necessary. If needed, ALT_PREFIX can be set to a colon separated prefix path where to look for already built components. If set, the build will check these paths for components before proceeding to build. Go dependencies \u00b6 Developers contributing Go code may need to change the external dependencies located in the src/control/vendor directory. The DAOS codebase uses Go Modules to manage these dependencies. As this feature is built in to Go distributions starting with version 1.11, no additional tools are needed to manage dependencies. Among other benefits, one of the major advantages of using Go Modules is that it removes the requirement for builds to be done within the $GOPATH , which simplifies our build system and other internal tooling. While it is possible to use Go Modules without checking a vendor directory into SCM, the DAOS project continues to use vendored dependencies in order to insulate our build system from transient network issues and other problems associated with nonvendored builds. The following is a short list of example workflows. For more details, please refer to one of the many resources available online. # add a new dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get github.com/awesome/thing # make sure that github.com/awesome/thing is imported somewhere in the codebase $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. # update an existing dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get -u github.com/awesome/thing # make sure that github.com/awesome/thing is imported somewhere in the codebase $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. # replace/remove an existing dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get github.com/other/thing # make sure that github.com/other/thing is imported somewhere in the codebase, # and that github.com/awesome/thing is no longer imported $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod tidy $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. In all cases, after updating the vendor directory, it is a good idea to verify that your changes were applied as expected. In order to do this, a simple workflow is to clear the caches to force a clean build and then run the test script, which is vendor-aware and will not try to download missing modules: $ cd ~/daos/src/control # or wherever your daos clone lives $ go clean -modcache -cache $ ./run_go_tests.sh $ ls ~/go/pkg/mod # ~/go/pkg/mod should either not exist or be empty Protobuf Compiler \u00b6 The DAOS control plane infrastructure uses Protocol Buffers as the data serialization format for its RPC requests. Not all developers will need to compile the \\*.proto files, but if Protobuf changes are needed, the developer must regenerate the corresponding C and Go source files using a Protobuf compiler compatible with proto3 syntax. Recommended Versions \u00b6 The recommended installation method is to clone the git repositories, check out the tagged releases noted below, and install from source. Later versions may work, but are not guaranteed. You may encounter installation errors when building from source relating to insufficient permissions. If that occurs, you may try relocating the repo to /var/tmp/ in order to build and install from there. Protocol Buffers v3.11.4. Installation instructions . Protobuf-C v1.3.3. Installation instructions . gRPC plugin: protoc-gen-go is the version specified in go.mod . This plugin is automatically installed by the Makefile in $DAOSREPO/src/proto. Compiling Protobuf Files \u00b6 The source ( .proto ) files live under $DAOSREPO/src/proto . The preferred mechanism for generating compiled C/Go protobuf definitions is to use the Makefile in this directory. Care should be taken to keep the Makefile updated when source files are added or removed, or generated file destinations are updated. Note that the generated files are checked into SCM and are not generated as part of the normal DAOS build process. This allows developers to ensure that the generated files are correct after any changes to the source files are made. $ cd ~/daos/src/proto # or wherever your daos clone lives $ make protoc -I /home/foo/daos/src/proto/mgmt/ --go_out=plugins=grpc:/home/foo/daos/src/control/common/proto/mgmt/ acl.proto protoc -I /home/foo/daos/src/proto/mgmt/ --go_out=plugins=grpc:/home/foo/daos/src/control/common/proto/mgmt/ mgmt.proto ... $ git status ... # modified: ../control/common/proto/mgmt/acl.pb.go # modified: ../control/common/proto/mgmt/mgmt.pb.go ... After verifying that the generated C/Go files are correct, add and commit them as you would any other file.","title":"Dev Environment"},{"location":"dev/development/#development-environment","text":"This section covers specific instructions to create a developer-friendly environment to contribute to the DAOS development. This includes how to regenerate the protobuf files or add new Go package dependencies, which is only required for development purposes.","title":"Development Environment"},{"location":"dev/development/#building-daos-for-development","text":"Prerequisite when built using --build-deps are installed in component specific directories under PREFIX/prereq/$TARGET_TYPE. Initialize and update the git submodules: $ git submodule init $ git submodule update Run the following scons command: $ scons PREFIX=${daos_prefix_path} install --build-deps=yes --config=force Installing the components into separate directories allow upgrading the components individually by replacing --build-deps=yes with --update-prereq={component\\_name} . This requires a change to the environment configuration from before. For automated environment setup, source utils/sl/utils/setup_local.sh . The install path should be relocatable with the exception that daos_admin will not be able to find the new location of daos and dependencies. All other libraries and binaries should work without any change due to relative paths. Editing the .build-vars.sh file to replace the old with the new can restore the capability of setup_local.sh to automate path setup. To run daos_server, either the rpath in daos_admin needs to be patched to the new installation location of spdk and isal or LD_LIBRARY_PATH needs to be set. This can be done using SL_SPDK_PREFIX and SL_ISAL_PREFIX set when sourcing setup_local.sh . This can also be done with the following commands: source utils/sl/setup_local.sh sudo -E utils/setup_daos_admin.sh [path to new location of daos] This script is intended only for developer setup of daos_admin . With this approach, DAOS gets built using the prebuilt dependencies in ${daos_prefix_path}/prereq , and required options are saved for future compilations. So, after the first time, during development, only \" scons --config=force \" and \" scons --config=force install \" would suffice for compiling changes to DAOS source code. If you wish to compile DAOS with clang rather than gcc , set COMPILER=clang on the scons command line. This option is also saved for future compilations. Additionally, users can specify BUILD_TYPE=[dev|release|debug] and scons will save the intermediate build for the various BUILD_TYPE , COMPILER , and TARGET_TYPE options so a user can switch between options without a full rebuild and thus with minimal cost. By default, TARGET_TYPE is set to 'default' which means it uses the BUILD_TYPE setting. To avoid rebuilding prerequisites for every BUILD_TYPE setting, TARGET_TYPE can be explicitly set to a BUILD_TYPE setting to always use that set of prerequisites. These settings are stored in daos.conf so setting the values on subsequent builds is not necessary. If needed, ALT_PREFIX can be set to a colon separated prefix path where to look for already built components. If set, the build will check these paths for components before proceeding to build.","title":"Building DAOS for Development"},{"location":"dev/development/#go-dependencies","text":"Developers contributing Go code may need to change the external dependencies located in the src/control/vendor directory. The DAOS codebase uses Go Modules to manage these dependencies. As this feature is built in to Go distributions starting with version 1.11, no additional tools are needed to manage dependencies. Among other benefits, one of the major advantages of using Go Modules is that it removes the requirement for builds to be done within the $GOPATH , which simplifies our build system and other internal tooling. While it is possible to use Go Modules without checking a vendor directory into SCM, the DAOS project continues to use vendored dependencies in order to insulate our build system from transient network issues and other problems associated with nonvendored builds. The following is a short list of example workflows. For more details, please refer to one of the many resources available online. # add a new dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get github.com/awesome/thing # make sure that github.com/awesome/thing is imported somewhere in the codebase $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. # update an existing dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get -u github.com/awesome/thing # make sure that github.com/awesome/thing is imported somewhere in the codebase $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. # replace/remove an existing dependency $ cd ~/daos/src/control # or wherever your daos clone lives $ go get github.com/other/thing # make sure that github.com/other/thing is imported somewhere in the codebase, # and that github.com/awesome/thing is no longer imported $ ./run_go_tests.sh # note that go.mod and go.sum have been updated automatically # # when ready to commit and push for review: $ go mod tidy $ go mod vendor $ git commit -a # should pick up go.mod, go.sum, vendor/*, etc. In all cases, after updating the vendor directory, it is a good idea to verify that your changes were applied as expected. In order to do this, a simple workflow is to clear the caches to force a clean build and then run the test script, which is vendor-aware and will not try to download missing modules: $ cd ~/daos/src/control # or wherever your daos clone lives $ go clean -modcache -cache $ ./run_go_tests.sh $ ls ~/go/pkg/mod # ~/go/pkg/mod should either not exist or be empty","title":"Go dependencies"},{"location":"dev/development/#protobuf-compiler","text":"The DAOS control plane infrastructure uses Protocol Buffers as the data serialization format for its RPC requests. Not all developers will need to compile the \\*.proto files, but if Protobuf changes are needed, the developer must regenerate the corresponding C and Go source files using a Protobuf compiler compatible with proto3 syntax.","title":"Protobuf Compiler"},{"location":"dev/development/#recommended-versions","text":"The recommended installation method is to clone the git repositories, check out the tagged releases noted below, and install from source. Later versions may work, but are not guaranteed. You may encounter installation errors when building from source relating to insufficient permissions. If that occurs, you may try relocating the repo to /var/tmp/ in order to build and install from there. Protocol Buffers v3.11.4. Installation instructions . Protobuf-C v1.3.3. Installation instructions . gRPC plugin: protoc-gen-go is the version specified in go.mod . This plugin is automatically installed by the Makefile in $DAOSREPO/src/proto.","title":"Recommended Versions"},{"location":"dev/development/#compiling-protobuf-files","text":"The source ( .proto ) files live under $DAOSREPO/src/proto . The preferred mechanism for generating compiled C/Go protobuf definitions is to use the Makefile in this directory. Care should be taken to keep the Makefile updated when source files are added or removed, or generated file destinations are updated. Note that the generated files are checked into SCM and are not generated as part of the normal DAOS build process. This allows developers to ensure that the generated files are correct after any changes to the source files are made. $ cd ~/daos/src/proto # or wherever your daos clone lives $ make protoc -I /home/foo/daos/src/proto/mgmt/ --go_out=plugins=grpc:/home/foo/daos/src/control/common/proto/mgmt/ acl.proto protoc -I /home/foo/daos/src/proto/mgmt/ --go_out=plugins=grpc:/home/foo/daos/src/control/common/proto/mgmt/ mgmt.proto ... $ git status ... # modified: ../control/common/proto/mgmt/acl.pb.go # modified: ../control/common/proto/mgmt/mgmt.pb.go ... After verifying that the generated C/Go files are correct, add and commit them as you would any other file.","title":"Compiling Protobuf Files"},{"location":"overview/architecture/","text":"Architecture \u00b6 DAOS is an open-source software-defined scale-out object store that provides high bandwidth and high IOPS storage containers to applications and enables next-generation data-centric workflows combining simulation, data analytics, and machine learning. Unlike the traditional storage stacks that were primarily designed for rotating media, DAOS is architected from the ground up to exploit new NVM technologies and is extremely lightweight since it operates End-to-End (E2E) in user space with full OS bypass. DAOS offers a shift away from an I/O model designed for block-based and high-latency storage to one that inherently supports fine-grained data access and unlocks the performance of the next-generation storage technologies. Unlike traditional Burst Buffers, DAOS is a high-performant independent and fault-tolerant storage tier that does not rely on a third-party tier to manage metadata and data resilience. DAOS Features \u00b6 DAOS relies on OFI for low-latency communications and stores data on both storage-class memory and NVMe storage. DAOS presents a native key-array-value storage interface that offers a unified storage model over which domain-specific data models are ported, such as HDF5, MPI-IO, and Apache Arrow. A POSIX I/O emulation layer implementing files and directories over the native DAOS API is also available. DAOS I/O operations are logged and then inserted into a persistent index maintained in SCM. Each I/O is tagged with a particular timestamp called epoch and is associated with a particular version of the dataset. No read-modify-write operations are performed internally. Write operations are non-destructive and not sensitive to alignment. Upon read request, the DAOS service walks through the persistent index and creates a complex scatter-gather Remote Direct Memory Access (RDMA) descriptor to reconstruct the data at the requested version directly in the buffer provided by the application. The SCM storage is memory-mapped directly into the address space of the DAOS service that manages the persistent index via direct load/store. Depending on the I/O characteristics, the DAOS service can decide to store the I/O in either SCM or NVMe storage. As represented in Figure 2-1, latency-sensitive I/Os, like application metadata and byte-granular data, will typically be stored in the former, whereas checkpoints and bulk data will be stored in the latter. This approach allows DAOS to deliver the raw NVMe bandwidth for bulk data by streaming the data to NVMe storage and maintaining internal metadata index in SCM. The Persistent Memory Development Kit (PMDK)[^1] allows managing transactional access to SCM and the Storage Performance Development Kit (SPDK)[^2] enables user-space I/O to NVMe devices. Figure 2-1. DAOS Storage DAOS aims at delivering: High throughput and IOPS at arbitrary alignment and size Fine-grained I/O operations with true zero-copy I/O to SCM Support for massively distributed NVM storage via scalable collective communications across the storage servers Non-blocking data and metadata operations to allow I/O and computation to overlap Advanced data placement taking into account fault domains Software-managed redundancy supporting both replication and erasure code with an online rebuild End-to-end data integrity Scalable distributed transactions with guaranteed data consistency and automated recovery Dataset snapshot Security framework to manage access control to storage pools Software-defined storage management to provision, configure, modify and monitor storage pools over COTS hardware Native support for Hierarchical Data Format (HDF)5, MPI-IO and POSIX namespace over the DAOS data model Tools for disaster recovery Seamless integration with the Lustre parallel filesystem Mover agent to migrate datasets among DAOS pools and from parallel filesystems to DAOS and vice versa DAOS Components \u00b6 A data center may have hundreds of thousands of compute nodes interconnected via a scalable high-performance fabric, where all, or a subset of the nodes called storage nodes, have direct access to NVM storage. A DAOS installation involves several components that can be either collocated or distributed. DAOS Target, Server and System \u00b6 The DAOS server is a multi-tenant daemon running on a Linux instance (i.e. natively on the physical node or in a VM or container) of each storage node and exporting through the network the locally-attached NVM storage. It listens to a management port, addressed by an IP address and a TCP port number, plus one or more fabric endpoints, addressed by network URIs. The DAOS server is configured through a YAML file and can be integrated with different daemon management or orchestration frameworks (e.g., a systemd script, a Kubernetes service or even via a parallel launcher like pdsh or srun). A DAOS system is identified by a system name and consists of a set of DAOS servers connected to the same fabric. Membership of the DAOS servers is recorded into the system map that assigns a unique integer rank to each server. Two different systems comprise two disjoint sets of servers and do not coordinate with each other. Inside a DAOS server, the storage is statically partitioned across multiple targets to optimize concurrency. To avoid contention, each target has its private storage, own pool of service threads and dedicated network context that can be directly addressed over the fabric independently of the other targets hosted on the same storage node. A target is typically associated with a single-ported SCM module and NVMe SSD attached to a single storage node. Moreover, a target does not implement any internal data protection mechanism against storage media failure. As a result, a target is a single point of failure. A dynamic state is associated with each target and is set to either up and running, or down and not available. A target is the unit of performance. Hardware components associated with the target, such as the backend storage medium, the server, and the network, have limited capability and capacity. The number of targets exported by a DAOS server instance is configurable and depends on the underlying hardware (i.e., the number of SCM modules, CPUs, NVMe SSDs ...). A target is the unit of fault. Storage API, Application Interface and Tools \u00b6 Applications, users, and administrators can interact with a DAOS system through two different client APIs. The management API offers the ability to administrate a DAOS system. It is intended to be integrated with different vendor-specific storage management or open-source orchestration frameworks. The dmg CLI tool is built over the DAOS management API. On the other hand, the DAOS library ( libdaos ) implements the DAOS storage model. It is primarily targeted at application and I/O middleware developers who want to store datasets in a DAOS system. User utilities like the daos command are also built over the API to allow users to manage datasets from a CLI. Applications can access datasets stored in DAOS either directly through the native DAOS API, through an I/O middleware library (e.g. POSIX emulation, MPI-IO, HDF5) or through frameworks like Spark or TensorFlow that have already been integrated with the native DAOS storage model. Agent \u00b6 The DAOS agent is a daemon residing on the client nodes that interacts with the DAOS library to authenticate the application processes. It is a trusted entity that can sign the DAOS Client credentials using certificates. The agent can support different authentication frameworks, and uses a Unix Domain Socket to communicate with the client library.","title":"Architecture"},{"location":"overview/architecture/#architecture","text":"DAOS is an open-source software-defined scale-out object store that provides high bandwidth and high IOPS storage containers to applications and enables next-generation data-centric workflows combining simulation, data analytics, and machine learning. Unlike the traditional storage stacks that were primarily designed for rotating media, DAOS is architected from the ground up to exploit new NVM technologies and is extremely lightweight since it operates End-to-End (E2E) in user space with full OS bypass. DAOS offers a shift away from an I/O model designed for block-based and high-latency storage to one that inherently supports fine-grained data access and unlocks the performance of the next-generation storage technologies. Unlike traditional Burst Buffers, DAOS is a high-performant independent and fault-tolerant storage tier that does not rely on a third-party tier to manage metadata and data resilience.","title":"Architecture"},{"location":"overview/architecture/#daos-features","text":"DAOS relies on OFI for low-latency communications and stores data on both storage-class memory and NVMe storage. DAOS presents a native key-array-value storage interface that offers a unified storage model over which domain-specific data models are ported, such as HDF5, MPI-IO, and Apache Arrow. A POSIX I/O emulation layer implementing files and directories over the native DAOS API is also available. DAOS I/O operations are logged and then inserted into a persistent index maintained in SCM. Each I/O is tagged with a particular timestamp called epoch and is associated with a particular version of the dataset. No read-modify-write operations are performed internally. Write operations are non-destructive and not sensitive to alignment. Upon read request, the DAOS service walks through the persistent index and creates a complex scatter-gather Remote Direct Memory Access (RDMA) descriptor to reconstruct the data at the requested version directly in the buffer provided by the application. The SCM storage is memory-mapped directly into the address space of the DAOS service that manages the persistent index via direct load/store. Depending on the I/O characteristics, the DAOS service can decide to store the I/O in either SCM or NVMe storage. As represented in Figure 2-1, latency-sensitive I/Os, like application metadata and byte-granular data, will typically be stored in the former, whereas checkpoints and bulk data will be stored in the latter. This approach allows DAOS to deliver the raw NVMe bandwidth for bulk data by streaming the data to NVMe storage and maintaining internal metadata index in SCM. The Persistent Memory Development Kit (PMDK)[^1] allows managing transactional access to SCM and the Storage Performance Development Kit (SPDK)[^2] enables user-space I/O to NVMe devices. Figure 2-1. DAOS Storage DAOS aims at delivering: High throughput and IOPS at arbitrary alignment and size Fine-grained I/O operations with true zero-copy I/O to SCM Support for massively distributed NVM storage via scalable collective communications across the storage servers Non-blocking data and metadata operations to allow I/O and computation to overlap Advanced data placement taking into account fault domains Software-managed redundancy supporting both replication and erasure code with an online rebuild End-to-end data integrity Scalable distributed transactions with guaranteed data consistency and automated recovery Dataset snapshot Security framework to manage access control to storage pools Software-defined storage management to provision, configure, modify and monitor storage pools over COTS hardware Native support for Hierarchical Data Format (HDF)5, MPI-IO and POSIX namespace over the DAOS data model Tools for disaster recovery Seamless integration with the Lustre parallel filesystem Mover agent to migrate datasets among DAOS pools and from parallel filesystems to DAOS and vice versa","title":"DAOS Features"},{"location":"overview/architecture/#daos-components","text":"A data center may have hundreds of thousands of compute nodes interconnected via a scalable high-performance fabric, where all, or a subset of the nodes called storage nodes, have direct access to NVM storage. A DAOS installation involves several components that can be either collocated or distributed.","title":"DAOS Components"},{"location":"overview/architecture/#daos-target-server-and-system","text":"The DAOS server is a multi-tenant daemon running on a Linux instance (i.e. natively on the physical node or in a VM or container) of each storage node and exporting through the network the locally-attached NVM storage. It listens to a management port, addressed by an IP address and a TCP port number, plus one or more fabric endpoints, addressed by network URIs. The DAOS server is configured through a YAML file and can be integrated with different daemon management or orchestration frameworks (e.g., a systemd script, a Kubernetes service or even via a parallel launcher like pdsh or srun). A DAOS system is identified by a system name and consists of a set of DAOS servers connected to the same fabric. Membership of the DAOS servers is recorded into the system map that assigns a unique integer rank to each server. Two different systems comprise two disjoint sets of servers and do not coordinate with each other. Inside a DAOS server, the storage is statically partitioned across multiple targets to optimize concurrency. To avoid contention, each target has its private storage, own pool of service threads and dedicated network context that can be directly addressed over the fabric independently of the other targets hosted on the same storage node. A target is typically associated with a single-ported SCM module and NVMe SSD attached to a single storage node. Moreover, a target does not implement any internal data protection mechanism against storage media failure. As a result, a target is a single point of failure. A dynamic state is associated with each target and is set to either up and running, or down and not available. A target is the unit of performance. Hardware components associated with the target, such as the backend storage medium, the server, and the network, have limited capability and capacity. The number of targets exported by a DAOS server instance is configurable and depends on the underlying hardware (i.e., the number of SCM modules, CPUs, NVMe SSDs ...). A target is the unit of fault.","title":"DAOS Target, Server and System"},{"location":"overview/architecture/#storage-api-application-interface-and-tools","text":"Applications, users, and administrators can interact with a DAOS system through two different client APIs. The management API offers the ability to administrate a DAOS system. It is intended to be integrated with different vendor-specific storage management or open-source orchestration frameworks. The dmg CLI tool is built over the DAOS management API. On the other hand, the DAOS library ( libdaos ) implements the DAOS storage model. It is primarily targeted at application and I/O middleware developers who want to store datasets in a DAOS system. User utilities like the daos command are also built over the API to allow users to manage datasets from a CLI. Applications can access datasets stored in DAOS either directly through the native DAOS API, through an I/O middleware library (e.g. POSIX emulation, MPI-IO, HDF5) or through frameworks like Spark or TensorFlow that have already been integrated with the native DAOS storage model.","title":"Storage API, Application Interface and Tools"},{"location":"overview/architecture/#agent","text":"The DAOS agent is a daemon residing on the client nodes that interacts with the DAOS library to authenticate the application processes. It is a trusted entity that can sign the DAOS Client credentials using certificates. The agent can support different authentication frameworks, and uses a Unix Domain Socket to communicate with the client library.","title":"Agent"},{"location":"overview/data_integrity/","text":"Introduction \u00b6 Arguably, one of the worst things a data storage system can do is to return incorrect data without the requester knowing. While each component in the system (network layer, storage devices) may offer protection against silent data corruption, DAOS provides end-to-end data integrity using checksums to better ensure that user data is not corrupted silently. For DAOS, end-to-end means that the client will calculate and verify checksums, providing protection for data through the entire I/O stack. During a write or update, the DAOS Client library (libdaos.so) calculates a checksum and appends it to the RPC message before transferred over the network. Depending on the configuration, the DAOS Server may or may not calculate checksums to verify the data on receipt. On a fetch, the DAOS Server will send a known good checksum with the requested data to the DAOS Client, which will calculate checksums on the data received and verify. Requirements \u00b6 Key Requirements \u00b6 There are two key requirements that DAOS will support. 1. Detect silent data corruption - Corruption will be detected on the distribution and attribute keys and records within a DAOS object. At a minimum, when corruption is detected, an error will be reported. 1. Correct data corruption - When data corruption is detected, an attempt will be made to recover the data using data redundancy mechanisms. Supportive/Additional Requirements \u00b6 Additionally, DAOS will support ... 1. End to End Data Integrity as a Quality of Service Attribute - Container properties are used to enable/disable the use of checksums for data integrity as well as define specific attributes of data integrity feature. See https://daos-stack.github.io/user/container/#data-integrity for details on configuring a container with checksums enabled. 1. Minimize Performance Impact - When there is no data corruption, the End to End Data Integrity feature should have minimal performance impacted. If data corruption is detected, performance can be impacted to correct the data. Work is ongoing to minimize performance impact. 1. Inject Errors - The ability to corrupt data within a specific record, key, or checksum will be necessary for testing purposes. Fault injection is used to simulate corruption over the network and on disk. The DAOS_CSUM_CORRUPT_* flags used for data corruption are defined in src/include/daos/common.h. 1. Logging - When data corruption is detected, error logs are captured in the client and server logs. Up coming features not supported yet 1. Event Logging - When silent data corruption is discovered, an event should be logged in such a way that it can be retrieved with other system health and diagnostic information. 1. Proactive background service task - A background task on the server which scans for and detects (audits checksums) silent data corruption and corrects. Keys and Value Objects \u00b6 Because DAOS is a key/value store, the data for both keys and values is protected, however, the approach for both is slightly different. For the two different value types, single and array, the approach is also slightly different. Keys \u00b6 On an update and fetch, the client calculates a checksum for the data used as the distribution and attribute keys and will send it to the server within the RPC. The server verifies the keys with the checksum. While enumerating keys, the server will calculate checksums for the keys and pack within the RPC message to the client. The client will verify the keys received. Note Checksums for keys are not stored on the server. A hash of the key is calculated and used to index the key in the server tree of the keys (see VOS Key Array Stores ). It is also expected that keys are stored only in Storage Class Memory which has reliable data integrity protection. Values \u00b6 On an update, the client will calculate a checksum for the data of the value and will send it to the server within the RPC. If \"server verify\" is enabled, the server will calculate a new checksum for the value and compare with the checksum received from the client to verify the integrity of the value. If the checksums don't match, then data corruption has occurred and an error is returned to the client indicating that the client should try the update again. Whether \"server verify\" is enabled or not, the server will store the checksum. See VOS for more info about checksum management and storage in VOS. On a fetch, the server will return the stored checksum to the client with the values fetched so the client can verify the values received. If the checksums don't match, then the client will fetch from another replica if available in an attempt to get uncorrupted data. There are some slight variations to this approach for the two different types of values. The following diagram illustrates a basic example. (See Storage Model for more details about the single value and array value types) Single Value \u00b6 A Single Value is an atomic value, meaning that writes to a single value will update the entire value and reads retrieve the entire value. Other DAOS features such as Erasure Codes might split a Single Value into multiple shards to be distributed among multiple storage nodes. Either the whole Single Value (if going to a single node) or each shard (if distributed) will have a checksum calculated, sent to the server, and stored on the server. Note that it is possible for a single value, or shard of a single value, to be smaller than the checksum derived from it. It is advised that if an application needs many small single values to use an Array Type instead. Array Values \u00b6 Unlike Single Values, Array Values can be updated and fetched at any part of an array. In addition, updates to an array are versioned, so a fetch can include parts from multiple versions of the array. Each of these versioned parts of an array are called extents. The following diagrams illustrate a couple examples (also see VOS Key Array Stores for more information): A single extent update (blue line) from index 2-13. A fetched extent (orange line) from index 2-6. The fetch is only part of the original extent written. ![](../graph/data_integrity/array_example_1.png) Many extent updates and different epochs. A fetch from index 2-13 requires parts from each extent. ![Array Example 2](../graph/data_integrity/array_example_2.png) The nature of the array type requires that a more sophisticated approach to creating checksums is used. DAOS uses a \"chunking\" approach where each extent will be broken up into \"chunks\" with a predetermined \"chunk size.\" Checksums will be derived from these chunks. Chunks are aligned with an absolute offset (starting at 0), not an I/O offset. The following diagram illustrates a chunk size configured to be 4 (units is arbitrary in this example). Though not all chunks have a full size of 4, an absolute offset alignment is maintained. The gray boxes around the extents represent the chunks. (See Object Layer for more details about the checksum process on object update and fetch) Checksum calculations \u00b6 The actual checksum calculations are done by the isa-l and isa-l_crypto libraries. However, these libraries are abstracted away from much of DAOS and a common checksum library is used with appropriate adapters to the actual isa-l implementations. common checksum library Performance Impact \u00b6 Calculating checksums can be CPU intensive and will impact performance. To mitigate performance impact, checksum types with hardware acceleration should be chosen. For example, CRC32C is supported by recent Intel CPUs, and many are accelerated via SIMD. Quality \u00b6 Unit and functional testing is performed at many layers. Test executable What's tested Key test files common_test daos_csummer, utility functions to help with chunk alignment src/common/tests/checksum_tests.c vos_test vos_obj_update/fetch apis with checksum params to ensure updating and fetching checksums src/vos/tests/vts_checksum.c srv_checksum_tests Server side logic for adding fetched checksums to an array request. Checksums are appropriately copied or created depending on extent layout. src/object/tests/srv_checksum_tests.c daos_test daos_obj_update/fetch with checksums enabled. The -z flag can be used for specific checksum tests. Also --csum_type flag can be used to enable checksums with any of the other daos_tests src/tests/suite/daos_checksum.c Running Tests \u00b6 With daos_server not running ./commont_test ./vos_test -z ./srv_checksum_tests With daos_server running export DAOS_CSUM_TEST_ALL_TYPE=1 ./daos_server -z ./daos_server -i --csum_type crc64 Life of a checksum (WIP) \u00b6 Rebuild \u00b6 migrate_one_insert - mrone.iods_csums is allocated, iods_csums copied from dss_enum_unpack_io. Memory reference removed from iods_csums.data. It will be freed in migrate_one_destory migrate_fetch_update_inline - mrone.iods_csums sent to vos_obj_update VOS \u00b6 akey_update_begin - determines how much extra space needs to be allocated in SCM to account for the checksum Arrays \u00b6 evt_root_activate - evtree root is activated. If has a csum them the root csum properties are set (csum_len, csum_type, csum_chunk_size) evt_desc_csum_fill - if root was activated with a punched record then it won't have had the csum fields set correctly so set them here. Main purpose is to copy the csum to the end of persistent evt record (evt_desc). Enough SCM should have been reserved in akey_update_begin. evt_entry_csum_fill - Copy the csum from the persistent memory to the evt_entry returned. Also copy the csum fields from the evtree root to complete the csum_info structure in the evt_entry. akey_fetch_recx - checksums are saved to the ioc for each found extent. Will be used to be added to to the result later. Update/Fetch (copied from vos/README.md) \u00b6 SV Update: vos_update_end -> akey_update_single -> svt_rec_store Sv Fetch: vos_fetch_begin -> akey_fetch_single -> svt_rec_load EV Update: vos_update_end -> akey_update_recx -> evt_insert EV Fetch: vos_fetch_begin -> akey_fetch_recx -> evt_fill_entry Enumeration \u00b6 For enumeration the csums for the keys and values are packed into an iov dedicated to csums. - fill_key_csum - Checksum is calcuated for the key and packed into the iov - fill_data_csum - pack/serialize the csum_info structure into the iov. Checksum Scrubbing (In Development) \u00b6 A background task will scan (when the storage server is idle to limit performance impact) the Version Object Store (VOS) trees to verify the data integrity with the checksums. Corrective actions can be taken when corruption is detected. See Corrective Actions Scanner \u00b6 Goals/Requirements \u00b6 Detect Silent Data Corruption Proactively - The whole point of the scrubber is to detect silent data corruption before it is fetched. Minimize CPU and I/O Bandwidth - Checksum scrubbing scanner will impact CPU and the I/O bandwidth because it must iterate the VOS tree (I/O to SCM) fetch data (I/O to SSD) and calculate checksums (CPU intensive). To minimize both of these impacts, the server scheduler must be able to throttled the scrubber's I/O and CPU usage. Minimize Media Wear - The background task will minimize media wear by preventing objects from being scrubbed too frequently. A container config/tunable will be used by an operator to define the minimum number of days that should pass before an object is scanned again. Continuous - The background task will be a continuous processes instead of running on a schedule. Once complete immediately start over. Throttling approaches should prevent from scrubbing same objects too frequently. High Level Design \u00b6 Per Pool ULT (I/O xstream) that will iterate containers. If checksums and scrubber is enabled then iterate the object tree. If a record value (SV or array) is not marked corrupted then scan. Fetch the data. Create new ULTs (helper xstream) to calculate checksum for data Compare calculated checksum with stored checksum. After every checksum is calculated, determine if need to sleep or yield . If checksums don't match confirm record is still there (not deleted by aggregation) then update record as corrupted After each object scanned yield to allow the server scheduler to reschedule the next appropriate I/O. Sleep or Yield \u00b6 Sleep for sufficient amount of time to ensure that scanning completes no sooner than configured interval (i.e. once a week or month). For example, if the interval is 1 week and there are 70 checksums that need to be calculated, then at a maximum 10 checksums are calculated a day, spaced roughly every 2.4 hours. If it doesn't need to sleep, then it will yield to allow the server scheduler to prioritize other jobs. Corrective Actions \u00b6 There are two main options for corrective actions when data corruption is discovered, in place data repair and SSD eviction. In Place Data Repair \u00b6 If enabled, when corruption is detected, the value identifier (dkey, akey, recx) will be placed in a queue. When there are available cycles, the value identifier will be used to request the data from a replica if exists and rewrite the data locally. This will continue until the SSD Eviction threshold is reached, in which case, the SSD is assumed to be bad enough that it isn't worth fixing locally and it will be requested to be evicted. SSD Eviction \u00b6 If enabled, when the SSD Eviction Threshold is reached the SSD will be evicted. Current eviction methods are pool and target based so there will need to be a mapping and mechanism in place to evict an SSD. When an SSD is evicted, the rebuild protocol will be invoked. Also, once the SSD Eviction Threshold is reached, the scanner should quit scanning anything on that SSD. Additional Checksum Properties > doc/user/container.md / doc/user/pool.md? \u00b6 These properties are provided when a container or pool is created, but should also be able to update them. When updated, they should be active right away. - Scanner Interval - Minimum number of days scanning will take. Could take longer, but if only a few records will pad so takes longer. (Pool property) - Disable scrubbing - at container level & pool level - Threshold for when to evict SSD (number of corruption events) - In Place Correction - If the number checksum errors is below the Eviction Threshold, DAOS will attempt to repair the corrupted data using replicas if they exist. Design Details & Implementation \u00b6 Pool ULT \u00b6 The code for the pool ULT is found in srv_pool_scrub.c . It can be a bit difficult to follow because there are several layers of callback functions due to the nature of how ULTs and the vos_iterator work, but the file is organized such that functions typically call the function above it (either directly or indirectly as a callback). For example (~> is an indirect call, -> is a direct call): ds_start_scrubbing_ult ~> scrubbing_ult -> scrub_pool ~> cont_iter_scrub_cb -> scrub_cont ~> obj_iter_scrub_cb ... Silent Data Corruption Detection (TODO) \u00b6 ::Still todo:: obj_iter_scrub(coh, epr, csummer, pool_uuid, event_handlers, entry, type) { build_iod vos_obj_fetch(coh, oid, epoch, dkey, iod, sgl); // for single value csum = calc_checksum(type, csummer, iod, sgl) compare(csum, entry.csum) // for recx for each chunk calc csum and compare } VOS Layer \u00b6 In order to mark data as corrupted a flag field is added to bio_addr_t which includes a CORRUPTED bit. The vos update api already accepts a flag, so a CORRUPTED flag is added and handled during an update so that, if set, the bio address will be updated to be corrupted. On fetch, if a value is already marked corrupted, return -DER_CSUM Object Layer \u00b6 When corruption is detected on the server during a fetch, aggregation, or rebuild the server calls VOS to update value as corrupted. (TBD) Add Server Side Verifying on fetch so can know if media or network corruption (note: need something so extents aren't double verified?) Debugging \u00b6 In the server.yml configuration file set the following env_vars - D_LOG_MASK=DEBUG - DD_SUBSYS=pool - DD_MASK=csum","title":"Introduction"},{"location":"overview/data_integrity/#introduction","text":"Arguably, one of the worst things a data storage system can do is to return incorrect data without the requester knowing. While each component in the system (network layer, storage devices) may offer protection against silent data corruption, DAOS provides end-to-end data integrity using checksums to better ensure that user data is not corrupted silently. For DAOS, end-to-end means that the client will calculate and verify checksums, providing protection for data through the entire I/O stack. During a write or update, the DAOS Client library (libdaos.so) calculates a checksum and appends it to the RPC message before transferred over the network. Depending on the configuration, the DAOS Server may or may not calculate checksums to verify the data on receipt. On a fetch, the DAOS Server will send a known good checksum with the requested data to the DAOS Client, which will calculate checksums on the data received and verify.","title":"Introduction"},{"location":"overview/data_integrity/#requirements","text":"","title":"Requirements"},{"location":"overview/data_integrity/#key-requirements","text":"There are two key requirements that DAOS will support. 1. Detect silent data corruption - Corruption will be detected on the distribution and attribute keys and records within a DAOS object. At a minimum, when corruption is detected, an error will be reported. 1. Correct data corruption - When data corruption is detected, an attempt will be made to recover the data using data redundancy mechanisms.","title":"Key Requirements"},{"location":"overview/data_integrity/#supportiveadditional-requirements","text":"Additionally, DAOS will support ... 1. End to End Data Integrity as a Quality of Service Attribute - Container properties are used to enable/disable the use of checksums for data integrity as well as define specific attributes of data integrity feature. See https://daos-stack.github.io/user/container/#data-integrity for details on configuring a container with checksums enabled. 1. Minimize Performance Impact - When there is no data corruption, the End to End Data Integrity feature should have minimal performance impacted. If data corruption is detected, performance can be impacted to correct the data. Work is ongoing to minimize performance impact. 1. Inject Errors - The ability to corrupt data within a specific record, key, or checksum will be necessary for testing purposes. Fault injection is used to simulate corruption over the network and on disk. The DAOS_CSUM_CORRUPT_* flags used for data corruption are defined in src/include/daos/common.h. 1. Logging - When data corruption is detected, error logs are captured in the client and server logs. Up coming features not supported yet 1. Event Logging - When silent data corruption is discovered, an event should be logged in such a way that it can be retrieved with other system health and diagnostic information. 1. Proactive background service task - A background task on the server which scans for and detects (audits checksums) silent data corruption and corrects.","title":"Supportive/Additional Requirements"},{"location":"overview/data_integrity/#keys-and-value-objects","text":"Because DAOS is a key/value store, the data for both keys and values is protected, however, the approach for both is slightly different. For the two different value types, single and array, the approach is also slightly different.","title":"Keys and Value Objects"},{"location":"overview/data_integrity/#keys","text":"On an update and fetch, the client calculates a checksum for the data used as the distribution and attribute keys and will send it to the server within the RPC. The server verifies the keys with the checksum. While enumerating keys, the server will calculate checksums for the keys and pack within the RPC message to the client. The client will verify the keys received. Note Checksums for keys are not stored on the server. A hash of the key is calculated and used to index the key in the server tree of the keys (see VOS Key Array Stores ). It is also expected that keys are stored only in Storage Class Memory which has reliable data integrity protection.","title":"Keys"},{"location":"overview/data_integrity/#values","text":"On an update, the client will calculate a checksum for the data of the value and will send it to the server within the RPC. If \"server verify\" is enabled, the server will calculate a new checksum for the value and compare with the checksum received from the client to verify the integrity of the value. If the checksums don't match, then data corruption has occurred and an error is returned to the client indicating that the client should try the update again. Whether \"server verify\" is enabled or not, the server will store the checksum. See VOS for more info about checksum management and storage in VOS. On a fetch, the server will return the stored checksum to the client with the values fetched so the client can verify the values received. If the checksums don't match, then the client will fetch from another replica if available in an attempt to get uncorrupted data. There are some slight variations to this approach for the two different types of values. The following diagram illustrates a basic example. (See Storage Model for more details about the single value and array value types)","title":"Values"},{"location":"overview/data_integrity/#single-value","text":"A Single Value is an atomic value, meaning that writes to a single value will update the entire value and reads retrieve the entire value. Other DAOS features such as Erasure Codes might split a Single Value into multiple shards to be distributed among multiple storage nodes. Either the whole Single Value (if going to a single node) or each shard (if distributed) will have a checksum calculated, sent to the server, and stored on the server. Note that it is possible for a single value, or shard of a single value, to be smaller than the checksum derived from it. It is advised that if an application needs many small single values to use an Array Type instead.","title":"Single Value"},{"location":"overview/data_integrity/#array-values","text":"Unlike Single Values, Array Values can be updated and fetched at any part of an array. In addition, updates to an array are versioned, so a fetch can include parts from multiple versions of the array. Each of these versioned parts of an array are called extents. The following diagrams illustrate a couple examples (also see VOS Key Array Stores for more information): A single extent update (blue line) from index 2-13. A fetched extent (orange line) from index 2-6. The fetch is only part of the original extent written. ![](../graph/data_integrity/array_example_1.png) Many extent updates and different epochs. A fetch from index 2-13 requires parts from each extent. ![Array Example 2](../graph/data_integrity/array_example_2.png) The nature of the array type requires that a more sophisticated approach to creating checksums is used. DAOS uses a \"chunking\" approach where each extent will be broken up into \"chunks\" with a predetermined \"chunk size.\" Checksums will be derived from these chunks. Chunks are aligned with an absolute offset (starting at 0), not an I/O offset. The following diagram illustrates a chunk size configured to be 4 (units is arbitrary in this example). Though not all chunks have a full size of 4, an absolute offset alignment is maintained. The gray boxes around the extents represent the chunks. (See Object Layer for more details about the checksum process on object update and fetch)","title":"Array Values"},{"location":"overview/data_integrity/#checksum-calculations","text":"The actual checksum calculations are done by the isa-l and isa-l_crypto libraries. However, these libraries are abstracted away from much of DAOS and a common checksum library is used with appropriate adapters to the actual isa-l implementations. common checksum library","title":"Checksum calculations"},{"location":"overview/data_integrity/#performance-impact","text":"Calculating checksums can be CPU intensive and will impact performance. To mitigate performance impact, checksum types with hardware acceleration should be chosen. For example, CRC32C is supported by recent Intel CPUs, and many are accelerated via SIMD.","title":"Performance Impact"},{"location":"overview/data_integrity/#quality","text":"Unit and functional testing is performed at many layers. Test executable What's tested Key test files common_test daos_csummer, utility functions to help with chunk alignment src/common/tests/checksum_tests.c vos_test vos_obj_update/fetch apis with checksum params to ensure updating and fetching checksums src/vos/tests/vts_checksum.c srv_checksum_tests Server side logic for adding fetched checksums to an array request. Checksums are appropriately copied or created depending on extent layout. src/object/tests/srv_checksum_tests.c daos_test daos_obj_update/fetch with checksums enabled. The -z flag can be used for specific checksum tests. Also --csum_type flag can be used to enable checksums with any of the other daos_tests src/tests/suite/daos_checksum.c","title":"Quality"},{"location":"overview/data_integrity/#running-tests","text":"With daos_server not running ./commont_test ./vos_test -z ./srv_checksum_tests With daos_server running export DAOS_CSUM_TEST_ALL_TYPE=1 ./daos_server -z ./daos_server -i --csum_type crc64","title":"Running Tests"},{"location":"overview/data_integrity/#life-of-a-checksum-wip","text":"","title":"Life of a checksum (WIP)"},{"location":"overview/data_integrity/#rebuild","text":"migrate_one_insert - mrone.iods_csums is allocated, iods_csums copied from dss_enum_unpack_io. Memory reference removed from iods_csums.data. It will be freed in migrate_one_destory migrate_fetch_update_inline - mrone.iods_csums sent to vos_obj_update","title":"Rebuild"},{"location":"overview/data_integrity/#vos","text":"akey_update_begin - determines how much extra space needs to be allocated in SCM to account for the checksum","title":"VOS"},{"location":"overview/data_integrity/#arrays","text":"evt_root_activate - evtree root is activated. If has a csum them the root csum properties are set (csum_len, csum_type, csum_chunk_size) evt_desc_csum_fill - if root was activated with a punched record then it won't have had the csum fields set correctly so set them here. Main purpose is to copy the csum to the end of persistent evt record (evt_desc). Enough SCM should have been reserved in akey_update_begin. evt_entry_csum_fill - Copy the csum from the persistent memory to the evt_entry returned. Also copy the csum fields from the evtree root to complete the csum_info structure in the evt_entry. akey_fetch_recx - checksums are saved to the ioc for each found extent. Will be used to be added to to the result later.","title":"Arrays"},{"location":"overview/data_integrity/#updatefetch-copied-from-vosreadmemd","text":"SV Update: vos_update_end -> akey_update_single -> svt_rec_store Sv Fetch: vos_fetch_begin -> akey_fetch_single -> svt_rec_load EV Update: vos_update_end -> akey_update_recx -> evt_insert EV Fetch: vos_fetch_begin -> akey_fetch_recx -> evt_fill_entry","title":"Update/Fetch (copied from vos/README.md)"},{"location":"overview/data_integrity/#enumeration","text":"For enumeration the csums for the keys and values are packed into an iov dedicated to csums. - fill_key_csum - Checksum is calcuated for the key and packed into the iov - fill_data_csum - pack/serialize the csum_info structure into the iov.","title":"Enumeration"},{"location":"overview/data_integrity/#checksum-scrubbing-in-development","text":"A background task will scan (when the storage server is idle to limit performance impact) the Version Object Store (VOS) trees to verify the data integrity with the checksums. Corrective actions can be taken when corruption is detected. See Corrective Actions","title":"Checksum Scrubbing (In Development)"},{"location":"overview/data_integrity/#scanner","text":"","title":"Scanner"},{"location":"overview/data_integrity/#goalsrequirements","text":"Detect Silent Data Corruption Proactively - The whole point of the scrubber is to detect silent data corruption before it is fetched. Minimize CPU and I/O Bandwidth - Checksum scrubbing scanner will impact CPU and the I/O bandwidth because it must iterate the VOS tree (I/O to SCM) fetch data (I/O to SSD) and calculate checksums (CPU intensive). To minimize both of these impacts, the server scheduler must be able to throttled the scrubber's I/O and CPU usage. Minimize Media Wear - The background task will minimize media wear by preventing objects from being scrubbed too frequently. A container config/tunable will be used by an operator to define the minimum number of days that should pass before an object is scanned again. Continuous - The background task will be a continuous processes instead of running on a schedule. Once complete immediately start over. Throttling approaches should prevent from scrubbing same objects too frequently.","title":"Goals/Requirements"},{"location":"overview/data_integrity/#high-level-design","text":"Per Pool ULT (I/O xstream) that will iterate containers. If checksums and scrubber is enabled then iterate the object tree. If a record value (SV or array) is not marked corrupted then scan. Fetch the data. Create new ULTs (helper xstream) to calculate checksum for data Compare calculated checksum with stored checksum. After every checksum is calculated, determine if need to sleep or yield . If checksums don't match confirm record is still there (not deleted by aggregation) then update record as corrupted After each object scanned yield to allow the server scheduler to reschedule the next appropriate I/O.","title":"High Level Design"},{"location":"overview/data_integrity/#sleep-or-yield","text":"Sleep for sufficient amount of time to ensure that scanning completes no sooner than configured interval (i.e. once a week or month). For example, if the interval is 1 week and there are 70 checksums that need to be calculated, then at a maximum 10 checksums are calculated a day, spaced roughly every 2.4 hours. If it doesn't need to sleep, then it will yield to allow the server scheduler to prioritize other jobs.","title":"Sleep or Yield"},{"location":"overview/data_integrity/#corrective-actions","text":"There are two main options for corrective actions when data corruption is discovered, in place data repair and SSD eviction.","title":"Corrective Actions"},{"location":"overview/data_integrity/#in-place-data-repair","text":"If enabled, when corruption is detected, the value identifier (dkey, akey, recx) will be placed in a queue. When there are available cycles, the value identifier will be used to request the data from a replica if exists and rewrite the data locally. This will continue until the SSD Eviction threshold is reached, in which case, the SSD is assumed to be bad enough that it isn't worth fixing locally and it will be requested to be evicted.","title":"In Place Data Repair"},{"location":"overview/data_integrity/#ssd-eviction","text":"If enabled, when the SSD Eviction Threshold is reached the SSD will be evicted. Current eviction methods are pool and target based so there will need to be a mapping and mechanism in place to evict an SSD. When an SSD is evicted, the rebuild protocol will be invoked. Also, once the SSD Eviction Threshold is reached, the scanner should quit scanning anything on that SSD.","title":"SSD Eviction"},{"location":"overview/data_integrity/#additional-checksum-properties-docusercontainermd-docuserpoolmd","text":"These properties are provided when a container or pool is created, but should also be able to update them. When updated, they should be active right away. - Scanner Interval - Minimum number of days scanning will take. Could take longer, but if only a few records will pad so takes longer. (Pool property) - Disable scrubbing - at container level & pool level - Threshold for when to evict SSD (number of corruption events) - In Place Correction - If the number checksum errors is below the Eviction Threshold, DAOS will attempt to repair the corrupted data using replicas if they exist.","title":"Additional Checksum Properties &gt; doc/user/container.md / doc/user/pool.md?"},{"location":"overview/data_integrity/#design-details-implementation","text":"","title":"Design Details &amp; Implementation"},{"location":"overview/data_integrity/#pool-ult","text":"The code for the pool ULT is found in srv_pool_scrub.c . It can be a bit difficult to follow because there are several layers of callback functions due to the nature of how ULTs and the vos_iterator work, but the file is organized such that functions typically call the function above it (either directly or indirectly as a callback). For example (~> is an indirect call, -> is a direct call): ds_start_scrubbing_ult ~> scrubbing_ult -> scrub_pool ~> cont_iter_scrub_cb -> scrub_cont ~> obj_iter_scrub_cb ...","title":"Pool ULT"},{"location":"overview/data_integrity/#silent-data-corruption-detection-todo","text":"::Still todo:: obj_iter_scrub(coh, epr, csummer, pool_uuid, event_handlers, entry, type) { build_iod vos_obj_fetch(coh, oid, epoch, dkey, iod, sgl); // for single value csum = calc_checksum(type, csummer, iod, sgl) compare(csum, entry.csum) // for recx for each chunk calc csum and compare }","title":"Silent Data Corruption Detection (TODO)"},{"location":"overview/data_integrity/#vos-layer","text":"In order to mark data as corrupted a flag field is added to bio_addr_t which includes a CORRUPTED bit. The vos update api already accepts a flag, so a CORRUPTED flag is added and handled during an update so that, if set, the bio address will be updated to be corrupted. On fetch, if a value is already marked corrupted, return -DER_CSUM","title":"VOS Layer"},{"location":"overview/data_integrity/#object-layer","text":"When corruption is detected on the server during a fetch, aggregation, or rebuild the server calls VOS to update value as corrupted. (TBD) Add Server Side Verifying on fetch so can know if media or network corruption (note: need something so extents aren't double verified?)","title":"Object Layer"},{"location":"overview/data_integrity/#debugging","text":"In the server.yml configuration file set the following env_vars - D_LOG_MASK=DEBUG - DD_SUBSYS=pool - DD_MASK=csum","title":"Debugging"},{"location":"overview/fault/","text":"Fault Model \u00b6 DAOS relies on massively distributed single-ported storage. Each target is thus effectively a single point of failure. DAOS achieves availability and durability of both data and metadata by providing redundancy across targets in different fault domains. DAOS internal pool and container metadata are replicated via a robust consensus algorithm. DAOS objects are then safely replicated or erasure-coded by transparently leveraging the DAOS distributed transaction mechanisms internally. The purpose of this section is to provide details on how DAOS achieves fault tolerance and guarantees object resilience. Hierarchical Fault Domains \u00b6 A fault domain is a set of servers sharing the same point of failure and which are thus likely to fail altogether. DAOS assumes that fault domains are hierarchical and do not overlap. The actual hierarchy and fault domain membership must be supplied by an external database used by DAOS to generate the pool map. Pool metadata are replicated on several nodes from different high-level fault domains for high availability, whereas object data is replicated or erasure-coded over a variable number of fault domains depending on the selected object class. Fault Detection \u00b6 DAOS servers are monitored within a DAOS system through a gossip-based protocol called SWIM that provides accurate, efficient, and scalable server fault detection. Storage attached to each DAOS target is monitored through periodic local health assessment. Whenever a local storage I/O error is returned to the DAOS server, an internal health check procedure will be called automatically. This procedure will make an overall health assessment by analyzing the IO error code and device SMART/Health data. If the result is negative, the target will be marked as faulty, and further I/Os to this target will be rejected and re-routed. Fault Isolation \u00b6 Once detected, the faulty target or servers (effectivelly a set of targets) must be excluded from the pool map. This process is triggered either manually by the administrator or automatically. Upon exclusion, the new version of the pool map is eagerly pushed to all storage targets. At this point, the pool enters a degraded mode that might require extra processing on access (e.g. reconstructing data out of erasure code). Consequently, DAOS client and storage nodes retry RPC indefinitely until they find an alternative replacement target from the new pool map. At this point, all outstanding communications with the evicted target are aborted, and no further messages should be sent to the target until it is explicitly reintegrated (possibly only after maintenance action). All storage targets are promptly notified of pool map changes by the pool service. This is not the case for client nodes, which are lazily informed of pool map invalidation each time they communicate with servers. To do so, clients pack in every RPC their current pool map version. Servers reply not only with the current pool map version. Consequently, when a DAOS client experiences RPC timeout, it regularly communicates with the other DAOS target to guarantee that its pool map is always current. Clients will then eventually be informed of the target exclusion and enter into degraded mode. This mechanism guarantees global node eviction and that all nodes eventually share the same view of target aliveness. Fault Recovery \u00b6 Upon exclusion from the pool map, each target starts the rebuild process automatically to restore data redundancy. First, each target creates a list of local objects impacted by the target exclusion. This is done by scanning a local object table maintained by the underlying storage layer. Then for each impacted object, the location of the new object shard is determined and redundancy of the object restored for the whole history (i.e., snapshots). Once all impacted objects have been rebuilt, the pool map is updated a second time to report the target as failed out. This marks the end of collective rebuild process and the exit from degraded mode for this particular fault. At this point, the pool has fully recovered from the fault and client nodes can now read from the rebuilt object shards. This rebuild process is executed online while applications continue accessing and updating objects.","title":"Fault Model"},{"location":"overview/fault/#fault-model","text":"DAOS relies on massively distributed single-ported storage. Each target is thus effectively a single point of failure. DAOS achieves availability and durability of both data and metadata by providing redundancy across targets in different fault domains. DAOS internal pool and container metadata are replicated via a robust consensus algorithm. DAOS objects are then safely replicated or erasure-coded by transparently leveraging the DAOS distributed transaction mechanisms internally. The purpose of this section is to provide details on how DAOS achieves fault tolerance and guarantees object resilience.","title":"Fault Model"},{"location":"overview/fault/#hierarchical-fault-domains","text":"A fault domain is a set of servers sharing the same point of failure and which are thus likely to fail altogether. DAOS assumes that fault domains are hierarchical and do not overlap. The actual hierarchy and fault domain membership must be supplied by an external database used by DAOS to generate the pool map. Pool metadata are replicated on several nodes from different high-level fault domains for high availability, whereas object data is replicated or erasure-coded over a variable number of fault domains depending on the selected object class.","title":"Hierarchical Fault Domains"},{"location":"overview/fault/#fault-detection","text":"DAOS servers are monitored within a DAOS system through a gossip-based protocol called SWIM that provides accurate, efficient, and scalable server fault detection. Storage attached to each DAOS target is monitored through periodic local health assessment. Whenever a local storage I/O error is returned to the DAOS server, an internal health check procedure will be called automatically. This procedure will make an overall health assessment by analyzing the IO error code and device SMART/Health data. If the result is negative, the target will be marked as faulty, and further I/Os to this target will be rejected and re-routed.","title":"Fault Detection"},{"location":"overview/fault/#fault-isolation","text":"Once detected, the faulty target or servers (effectivelly a set of targets) must be excluded from the pool map. This process is triggered either manually by the administrator or automatically. Upon exclusion, the new version of the pool map is eagerly pushed to all storage targets. At this point, the pool enters a degraded mode that might require extra processing on access (e.g. reconstructing data out of erasure code). Consequently, DAOS client and storage nodes retry RPC indefinitely until they find an alternative replacement target from the new pool map. At this point, all outstanding communications with the evicted target are aborted, and no further messages should be sent to the target until it is explicitly reintegrated (possibly only after maintenance action). All storage targets are promptly notified of pool map changes by the pool service. This is not the case for client nodes, which are lazily informed of pool map invalidation each time they communicate with servers. To do so, clients pack in every RPC their current pool map version. Servers reply not only with the current pool map version. Consequently, when a DAOS client experiences RPC timeout, it regularly communicates with the other DAOS target to guarantee that its pool map is always current. Clients will then eventually be informed of the target exclusion and enter into degraded mode. This mechanism guarantees global node eviction and that all nodes eventually share the same view of target aliveness.","title":"Fault Isolation"},{"location":"overview/fault/#fault-recovery","text":"Upon exclusion from the pool map, each target starts the rebuild process automatically to restore data redundancy. First, each target creates a list of local objects impacted by the target exclusion. This is done by scanning a local object table maintained by the underlying storage layer. Then for each impacted object, the location of the new object shard is determined and redundancy of the object restored for the whole history (i.e., snapshots). Once all impacted objects have been rebuilt, the pool map is updated a second time to report the target as failed out. This marks the end of collective rebuild process and the exit from degraded mode for this particular fault. At this point, the pool has fully recovered from the fault and client nodes can now read from the rebuilt object shards. This rebuild process is executed online while applications continue accessing and updating objects.","title":"Fault Recovery"},{"location":"overview/security/","text":"Security Model \u00b6 DAOS uses a flexible security model that separates authentication from authorization. It is designed to have a minimal impact on the I/O path. There are two areas of DAOS that require access control. At the user level, clients must be able to read and modify only pools and containers to which they have been granted access. At the system and administrative levels, only authorized components must be able to access the DAOS management network. Authentication \u00b6 There are different means of authentication, depending on whether the caller is accessing client resources or the DAOS management network. Client Library \u00b6 The client library libdaos is an untrusted component. The daos user-level command that uses the client library is also an untrusted component. A trusted process, the DAOS agent ( daos_agent ), runs on each client node and authenticates the user processes. The DAOS security model is designed to support different authentication methods for client processes. Currently, we support AUTH_SYS authentication only. DAOS Management Network \u00b6 Each trusted DAOS component ( daos_server , daos_agent , and the dmg administrative tool) is authenticated by means of a certificate generated for that component. These components identify one another over the DAOS management network via mutually-authenticated TLS. Authorization \u00b6 Client authorization for resources is controlled by the Access Control List (ACL) on the resource. Authorization on the management network is achieved by settings on the certificates that are generated while setting up the DAOS system. Component Certificates \u00b6 Access to DAOS management RPCs is controlled via the CommonName (CN) set in each management component certificate. A given management RPC may only be invoked by a component which connects with the correct certificate. Access Control Lists \u00b6 Client access to resources like pools and containers is controlled by DAOS Access Control Lists (ACLs). These ACLs are derived in part from NFSv4 ACLs, and adapted for the unique needs of a distributed system. The client may request read-only or read-write access to the resource. If the resource ACL doesn't grant them the requested access level, they won't be able to connect. While connected, their handle to that resource grants permissions for specific actions. The permissions of a handle last for the duration of its existence, similar to an open file descriptor in a POSIX system. A handle cannot currently be revoked. Access Control Entries \u00b6 In the input and output of DAOS tools, an Access Control Entry (ACE) is defined using a colon-separated string with the following format: TYPE:FLAGS:PRINCIPAL:PERMISSIONS The contents of all the fields are case-sensitive. Type \u00b6 The type of ACE entry (mandatory). Only one type of ACE is supported at this time. A (Allow): Allow access to the specified principal for the given permissions. Flags \u00b6 The (optional) flags provide additional information about how the ACE should be interpreted. G (Group): The principal should be interpreted as a group. Principal \u00b6 The principal (also called the identity) is specified in the name@domain format. The domain should be left off if the name is a UNIX user/group on the local domain. Currently, this is the only case supported by DAOS. There are three special principals, OWNER@ , GROUP@ , and EVERYONE@ , which align with User, Group, and Other from traditional POSIX permission bits. When providing them in the ACE string format, they must be spelled exactly as written here, in uppercase with no domain appended. The GROUP@ entry must also have the G (group) flag. Permissions \u00b6 The permissions in a resource's ACE permit a certain type of user access to the resource. The order of the permission \"bits\" (characters) within the PERMISSIONS field of the ACE is not significant. Permission Pool Meaning Container Meaning r (Read) Alias for 't' Read container data and attributes w (Write) Alias for 'c' + 'd' Write container data and attributes c (Create) Create containers N/A d (Delete) Delete any container Delete this container t (Get-Prop) Connect/query Get container properties T (Set-Prop) N/A Set/Change container properties a (Get-ACL) N/A Get container ACL A (Set-ACL) N/A Set/Change container ACL o (Set-Owner) N/A Set/Change container's owner user and group ACEs containing permissions not applicable to the given resource are considered invalid. To allow a user/group to connect to a resource, that principal's permissions must include at least some form of read access (for example, read or get-prop ). A user with write -only permissions will be rejected when requesting RW access to a resource. Denying Access \u00b6 Currently, only \"Allow\" Access Control Entries are supported. However, it is possible to deny access to a specific user by creating an Allow entry for them with no permissions. This is fundamentally different from removing a user's ACE, which allows other ACEs in the ACL to determine their access. It is not possible to deny access to a specific group in this way, due to the way group permissions are enforced . ACE Examples \u00b6 A::daos_user@:rw Allow the UNIX user named daos_user to have read-write access. A:G:project_users@:tc Allow anyone in the UNIX group project_users to access a pool's contents and create containers. A::OWNER@:rwdtTaAo Allow the UNIX user who owns the container to have full control. A:G:GROUP@:rwdtT Allow the UNIX group that owns the container to read and write data, delete the container, and manipulate container properties. A::EVERYONE@:r Allow any user not covered by other rules to have read-only access. A::daos_user@: Deny the UNIX user named daos_user any access to the resource. Enforcement \u00b6 Access Control Entries (ACEs) will be enforced in the following order: Owner-User Named users Owner-Group and named groups Everyone In general, enforcement will be based on the first match, ignoring lower-priority entries. If the user is the owner of the resource and there is an OWNER@ entry, they will receive the owner permissions only. They will not receive any of the permissions in the named user/group entries, even if they would match those other entries. If the user isn't the owner, or there is no OWNER@ entry, but there is an ACE for their user identity, they will receive the permissions for their user identity only. They will not receive the permissions for any of their groups, even if those group entries have broader permissions than the user entry does. The user is expected to match at most one user entry. If no matching user entry is found, but entries match one or more of the user's groups, enforcement will be based on the union of the permissions of all matching groups, including the owner-group GROUP@ . If no matching groups are found, the EVERYONE@ entry's permissions will be used, if it exists. By default, if a user matches no ACEs in the ACL list, access will be denied. ACL File \u00b6 Tools that accept an ACL file expect it to be a simple text file with one ACE on each line. A line may be marked as a comment by using a # as the first non-whitespace character on the line. For example: # ACL for my container # Owner can't touch data - just do admin-type things A::OWNER@:dtTaAo # My project's users can generate and access data A:G:my_great_project@:rw # Bob can use the data to generate a report A::bob@:r The permission bits and the ACEs themselves don't need to be in any specific order. However the order may be different when the resulting ACL is parsed and displayed by DAOS. Limitations \u00b6 The maximum size of the ACE list in a DAOS ACL internal data structure is 64KiB. To calculate the internal data size of an ACL, use the following formula for each ACE: The base size of an ACE is 256 Bytes. If the ACE principal is not one of the special principals: Add the length of the principal string + 1. If that value is not 64-Byte aligned, round up to the nearest 64-Byte boundary.","title":"Security Model"},{"location":"overview/security/#security-model","text":"DAOS uses a flexible security model that separates authentication from authorization. It is designed to have a minimal impact on the I/O path. There are two areas of DAOS that require access control. At the user level, clients must be able to read and modify only pools and containers to which they have been granted access. At the system and administrative levels, only authorized components must be able to access the DAOS management network.","title":"Security Model"},{"location":"overview/security/#authentication","text":"There are different means of authentication, depending on whether the caller is accessing client resources or the DAOS management network.","title":"Authentication"},{"location":"overview/security/#client-library","text":"The client library libdaos is an untrusted component. The daos user-level command that uses the client library is also an untrusted component. A trusted process, the DAOS agent ( daos_agent ), runs on each client node and authenticates the user processes. The DAOS security model is designed to support different authentication methods for client processes. Currently, we support AUTH_SYS authentication only.","title":"Client Library"},{"location":"overview/security/#daos-management-network","text":"Each trusted DAOS component ( daos_server , daos_agent , and the dmg administrative tool) is authenticated by means of a certificate generated for that component. These components identify one another over the DAOS management network via mutually-authenticated TLS.","title":"DAOS Management Network"},{"location":"overview/security/#authorization","text":"Client authorization for resources is controlled by the Access Control List (ACL) on the resource. Authorization on the management network is achieved by settings on the certificates that are generated while setting up the DAOS system.","title":"Authorization"},{"location":"overview/security/#component-certificates","text":"Access to DAOS management RPCs is controlled via the CommonName (CN) set in each management component certificate. A given management RPC may only be invoked by a component which connects with the correct certificate.","title":"Component Certificates"},{"location":"overview/security/#access-control-lists","text":"Client access to resources like pools and containers is controlled by DAOS Access Control Lists (ACLs). These ACLs are derived in part from NFSv4 ACLs, and adapted for the unique needs of a distributed system. The client may request read-only or read-write access to the resource. If the resource ACL doesn't grant them the requested access level, they won't be able to connect. While connected, their handle to that resource grants permissions for specific actions. The permissions of a handle last for the duration of its existence, similar to an open file descriptor in a POSIX system. A handle cannot currently be revoked.","title":"Access Control Lists"},{"location":"overview/security/#access-control-entries","text":"In the input and output of DAOS tools, an Access Control Entry (ACE) is defined using a colon-separated string with the following format: TYPE:FLAGS:PRINCIPAL:PERMISSIONS The contents of all the fields are case-sensitive.","title":"Access Control Entries"},{"location":"overview/security/#type","text":"The type of ACE entry (mandatory). Only one type of ACE is supported at this time. A (Allow): Allow access to the specified principal for the given permissions.","title":"Type"},{"location":"overview/security/#flags","text":"The (optional) flags provide additional information about how the ACE should be interpreted. G (Group): The principal should be interpreted as a group.","title":"Flags"},{"location":"overview/security/#principal","text":"The principal (also called the identity) is specified in the name@domain format. The domain should be left off if the name is a UNIX user/group on the local domain. Currently, this is the only case supported by DAOS. There are three special principals, OWNER@ , GROUP@ , and EVERYONE@ , which align with User, Group, and Other from traditional POSIX permission bits. When providing them in the ACE string format, they must be spelled exactly as written here, in uppercase with no domain appended. The GROUP@ entry must also have the G (group) flag.","title":"Principal"},{"location":"overview/security/#permissions","text":"The permissions in a resource's ACE permit a certain type of user access to the resource. The order of the permission \"bits\" (characters) within the PERMISSIONS field of the ACE is not significant. Permission Pool Meaning Container Meaning r (Read) Alias for 't' Read container data and attributes w (Write) Alias for 'c' + 'd' Write container data and attributes c (Create) Create containers N/A d (Delete) Delete any container Delete this container t (Get-Prop) Connect/query Get container properties T (Set-Prop) N/A Set/Change container properties a (Get-ACL) N/A Get container ACL A (Set-ACL) N/A Set/Change container ACL o (Set-Owner) N/A Set/Change container's owner user and group ACEs containing permissions not applicable to the given resource are considered invalid. To allow a user/group to connect to a resource, that principal's permissions must include at least some form of read access (for example, read or get-prop ). A user with write -only permissions will be rejected when requesting RW access to a resource.","title":"Permissions"},{"location":"overview/security/#denying-access","text":"Currently, only \"Allow\" Access Control Entries are supported. However, it is possible to deny access to a specific user by creating an Allow entry for them with no permissions. This is fundamentally different from removing a user's ACE, which allows other ACEs in the ACL to determine their access. It is not possible to deny access to a specific group in this way, due to the way group permissions are enforced .","title":"Denying Access"},{"location":"overview/security/#ace-examples","text":"A::daos_user@:rw Allow the UNIX user named daos_user to have read-write access. A:G:project_users@:tc Allow anyone in the UNIX group project_users to access a pool's contents and create containers. A::OWNER@:rwdtTaAo Allow the UNIX user who owns the container to have full control. A:G:GROUP@:rwdtT Allow the UNIX group that owns the container to read and write data, delete the container, and manipulate container properties. A::EVERYONE@:r Allow any user not covered by other rules to have read-only access. A::daos_user@: Deny the UNIX user named daos_user any access to the resource.","title":"ACE Examples"},{"location":"overview/security/#enforcement","text":"Access Control Entries (ACEs) will be enforced in the following order: Owner-User Named users Owner-Group and named groups Everyone In general, enforcement will be based on the first match, ignoring lower-priority entries. If the user is the owner of the resource and there is an OWNER@ entry, they will receive the owner permissions only. They will not receive any of the permissions in the named user/group entries, even if they would match those other entries. If the user isn't the owner, or there is no OWNER@ entry, but there is an ACE for their user identity, they will receive the permissions for their user identity only. They will not receive the permissions for any of their groups, even if those group entries have broader permissions than the user entry does. The user is expected to match at most one user entry. If no matching user entry is found, but entries match one or more of the user's groups, enforcement will be based on the union of the permissions of all matching groups, including the owner-group GROUP@ . If no matching groups are found, the EVERYONE@ entry's permissions will be used, if it exists. By default, if a user matches no ACEs in the ACL list, access will be denied.","title":"Enforcement"},{"location":"overview/security/#acl-file","text":"Tools that accept an ACL file expect it to be a simple text file with one ACE on each line. A line may be marked as a comment by using a # as the first non-whitespace character on the line. For example: # ACL for my container # Owner can't touch data - just do admin-type things A::OWNER@:dtTaAo # My project's users can generate and access data A:G:my_great_project@:rw # Bob can use the data to generate a report A::bob@:r The permission bits and the ACEs themselves don't need to be in any specific order. However the order may be different when the resulting ACL is parsed and displayed by DAOS.","title":"ACL File"},{"location":"overview/security/#limitations","text":"The maximum size of the ACE list in a DAOS ACL internal data structure is 64KiB. To calculate the internal data size of an ACL, use the following formula for each ACE: The base size of an ACE is 256 Bytes. If the ACE principal is not one of the special principals: Add the length of the principal string + 1. If that value is not 64-Byte aligned, round up to the nearest 64-Byte boundary.","title":"Limitations"},{"location":"overview/storage/","text":"Storage Model \u00b6 The figure below represents the fundamental abstractions of the DAOS storage model. A DAOS pool is a storage reservation distributed across a collection of targets. The actual space allocated to the pool on each target is called a pool shard. The total space allocated to a pool is decided at creation time and can be expanded over time by resizing all the pool shards (within the limit of the storage capacity dedicated to each target) or by spanning more targets (i.e., adding more pool shards). A pool offers storage virtualization and is the unit of provisioning and isolation. DAOS pools cannot span across multiple systems. A pool can host multiple transactional object stores called DAOS containers. Each container is a private object address space, which can be modified transactionally and independently of the other containers stored in the same pool. A container is the unit of snapshot and data management. DAOS objects belonging to a container can be distributed across any target of the pool for both performance and resilience and can be accessed through different APIs to represent structured, semi-structured and unstructured data efficiently The table below shows the targeted level of scalability for each DAOS concept. DAOS Concept Order of Magnitude System 10 5 Servers (hundreds of thousands) and 10 2 Pools (hundreds) Server 10 1 Targets (tens) Pool 10 2 Containers (hundreds) Container 10 9 Objects (billions) DAOS Pool \u00b6 A pool is identified by a unique UUID and maintains target memberships in a persistent versioned list called the pool map. The membership is definitive and consistent, and membership changes are sequentially numbered. The pool map not only records the list of active targets, it also contains the storage topology under the form of a tree that is used to identify targets sharing common hardware components. For instance, the first level of the tree can represent targets sharing the same motherboard, and then the second level can represent all motherboards sharing the same rack and finally the third level can represent all racks in the same cage. This framework effectively represents hierarchical fault domains, which are then used to avoid placing redundant data on targets subject to correlated failures. At any point in time, new targets can be added to the pool map, and failed ones can be excluded. Moreover, the pool map is fully versioned, which effectively assigns a unique sequence to each modification of the map, more particularly for failed node removal. A pool shard is a reservation of persistent memory optionally combined with a pre-allocated space on NVMe storage on a specific target. It has a fixed capacity and fails operations when full. Current space usage can be queried at any time and reports the total amount of bytes used by any data type stored in the pool shard. Upon target failure and exclusion from the pool map, data redundancy inside the pool is automatically restored online. This self-healing process is known as rebuild. Rebuild progress is recorded regularly in special logs in the pool stored in persistent memory to address cascading failures. When new targets are added, data is automatically migrated to the newly added targets to redistribute space usage equally among all the members. This process is known as space rebalancing and uses dedicated persistent logs as well to support interruption and restart. A pool is a set of targets spread across different storage nodes over which data and metadata are distributed to achieve horizontal scalability, and replicated or erasure-coded to ensure durability and availability. When creating a pool, a set of system properties must be defined to configure the different features supported by the pool. Also, user can define their attributes that will be stored persistently. A pool is only accessible to authenticated and authorized applications. Multiple security frameworks could be supported, from NFSv4 access control lists to third party-based authentication (such as Kerberos). Security is enforced when connecting to the pool. Upon successful connection to the pool, a connection context is returned to the application process. As detailed previously, a pool stores many different sorts of persistent metadata, such as the pool map, authentication, and authorization information, user attributes, properties and rebuild logs. Such metadata are critical and require the highest level of resiliency. Therefore, the pool metadata are replicated on a few nodes from distinct high-level fault domains. For very large configurations with hundreds of thousands of storage nodes, only a very small fraction of those nodes (in the order of tens) run the pool metadata service. With a limited number of storage nodes, DAOS can afford to rely on a consensus algorithm to reach agreement and to guarantee consistency in the presence of faults and to avoid split-brain syndrome. To access a pool, a user process should connect to this pool and pass the security checks. Once granted, a pool connection can be shared (via local2global() and global2local() operations) with any or all of its peer application processes (similar to the openg() POSIX extension). This collective connect mechanism allows avoiding metadata request storm when a massively distributed job is run on the datacenter. A pool connection is then revoked when the original process that issued the connection request disconnects from the pool. DAOS Container \u00b6 A container represents an object address space inside a pool and is identified by a UUID. The diagram below represents how the user (i.e., I/O middleware, domain-specific data format, big data or AI frameworks ...) could use the container concept to store related datasets. Like pools, containers can store user attributes, and a set of properties must be passed at container creation time to configure different features like checksums. To access a container, an application must first connect to the pool and then open the container. If the application is authorized to access the container, a container handle is returned. This includes capabilities that authorize any process in the application to access the container and its contents. The opening process may share this handle with any or all of its peers. Their capabilities are revoked either on container close. Objects in a container may have different schemas for data distribution and redundancy over targets. Dynamic or static striping, replication, or erasure code are some parameters required to define the object schema. The object class defines common schema attributes for a set of objects. Each object class is assigned a unique identifier and is associated with a given schema at the pool level. A new object class can be defined at any time with a configurable schema, which is then immutable after creation, or at least until all objects belonging to the class have been destroyed. For convenience, several object classes expected to be the most commonly used will be predefined by default when the pool is created, as shown the table below table below. Sample of Pre-defined Object Classes Object Class (RW = read/write, RM = read-mostly Redundancy Layout (SC = stripe count, RC = replica count, PC = parity count, TGT = target Small size & RW Replication static SCxRC, e.g. 1x4 Small size & RM Erasure code static SC+PC, e.g. 4+2 Large size & RW Replication static SCxRC over max #targets) Large size & RM Erasure code static SCx(SC+PC) w/ max #TGT) Unknown size & RW Replication SCxRC, e.g. 1x4 initially and grows Unknown size & RM Erasure code SC+PC, e.g. 4+2 initially and grows As shown below, each object is identified in the container by a unique 128-bit object address. The high 32 bits of the object address is reserved for DAOS to encode internal metadata such as the object class. The remaining 96 bits are managed by the user and should be unique inside the container. Those bits can be used by upper layers of the stack to encode their metadata as long as unicity is guaranteed. A per-container 64-bit scalable object ID allocator is provided in the DAOS API. The object ID to be stored by the application is the full 128-bit address which is for single use only and can be associated with only a single object schema. DAOS Object ID Structure <---------------------------------- 128 bits ----------------------------------> -------------------------------------------------------------------------------- |DAOS Internal Bits| Unique User Bits | -------------------------------------------------------------------------------- <---- 32 bits ----><------------------------- 96 bits -------------------------> A container is the basic unit of transaction and versioning. All object operations are implicitly tagged by the DAOS library with a timestamp called an epoch. The DAOS transaction API allows combining multiple object updates into a single atomic transaction with multi-version concurrency control based on epoch ordering. All the versioned updates may periodically be aggregated to reclaim space utilized by overlapping writes and to reduce metadata complexity. A snapshot is a permanent reference that can be placed on a specific epoch to prevent aggregation. Container metadata (i.e., list of snapshots, container open handles, object class, user attributes, properties, and others) are stored in persistent memory and maintained by a dedicated container metadata service that either uses the same replicated engine as the parent metadata pool service or has its own engine. This is configurable when creating a container. Like a pool, access to a container is controlled by the container handle. To acquire a valid handle, an application process must open the container and pass the security checks. This container handle may then be shared with other peer application processes via the container local2global() and global2local() operations. DAOS Object \u00b6 To avoid scaling problems and overhead common to a traditional storage system, DAOS objects are intentionally simple. No default object metadata beyond the type and schema are provided. This means that the system does not maintain time, size, owner, permissions or even track openers. To achieve high availability and horizontal scalability, many object schemas (replication/erasure code, static/dynamic striping, and others) are provided. The schema framework is flexible and easily expandable to allow for new custom schema types in the future. The layout is generated algorithmically on object open from the object identifier and the pool map. End-to-end integrity is assured by protecting object data with checksums during network transfer and storage. A DAOS object can be accessed through different APIs: Multi-level key-array API is the native object interface with locality feature. The key is split into a distribution (i.e., dkey) and an attribute (i.e., akey) key. Both the dkey and akey can be of variable length and type (i.e. a string, an integer or even a complex data structure). All entries under the same dkey are guaranteed to be collocated on the same target. The value associated with akey can be either a single variable-length value that cannot be partially overwritten or an array of fixed-length values. Both the akeys and dkeys support enumeration. Key-value API provides a simple key and variable-length value interface. It supports the traditional put, get, remove and list operations. Array API implements a one-dimensional array of fixed-size elements addressed by a 64-bit offset. A DAOS array supports arbitrary extent read, write and punch operations.","title":"Storage Model"},{"location":"overview/storage/#storage-model","text":"The figure below represents the fundamental abstractions of the DAOS storage model. A DAOS pool is a storage reservation distributed across a collection of targets. The actual space allocated to the pool on each target is called a pool shard. The total space allocated to a pool is decided at creation time and can be expanded over time by resizing all the pool shards (within the limit of the storage capacity dedicated to each target) or by spanning more targets (i.e., adding more pool shards). A pool offers storage virtualization and is the unit of provisioning and isolation. DAOS pools cannot span across multiple systems. A pool can host multiple transactional object stores called DAOS containers. Each container is a private object address space, which can be modified transactionally and independently of the other containers stored in the same pool. A container is the unit of snapshot and data management. DAOS objects belonging to a container can be distributed across any target of the pool for both performance and resilience and can be accessed through different APIs to represent structured, semi-structured and unstructured data efficiently The table below shows the targeted level of scalability for each DAOS concept. DAOS Concept Order of Magnitude System 10 5 Servers (hundreds of thousands) and 10 2 Pools (hundreds) Server 10 1 Targets (tens) Pool 10 2 Containers (hundreds) Container 10 9 Objects (billions)","title":"Storage Model"},{"location":"overview/storage/#daos-pool","text":"A pool is identified by a unique UUID and maintains target memberships in a persistent versioned list called the pool map. The membership is definitive and consistent, and membership changes are sequentially numbered. The pool map not only records the list of active targets, it also contains the storage topology under the form of a tree that is used to identify targets sharing common hardware components. For instance, the first level of the tree can represent targets sharing the same motherboard, and then the second level can represent all motherboards sharing the same rack and finally the third level can represent all racks in the same cage. This framework effectively represents hierarchical fault domains, which are then used to avoid placing redundant data on targets subject to correlated failures. At any point in time, new targets can be added to the pool map, and failed ones can be excluded. Moreover, the pool map is fully versioned, which effectively assigns a unique sequence to each modification of the map, more particularly for failed node removal. A pool shard is a reservation of persistent memory optionally combined with a pre-allocated space on NVMe storage on a specific target. It has a fixed capacity and fails operations when full. Current space usage can be queried at any time and reports the total amount of bytes used by any data type stored in the pool shard. Upon target failure and exclusion from the pool map, data redundancy inside the pool is automatically restored online. This self-healing process is known as rebuild. Rebuild progress is recorded regularly in special logs in the pool stored in persistent memory to address cascading failures. When new targets are added, data is automatically migrated to the newly added targets to redistribute space usage equally among all the members. This process is known as space rebalancing and uses dedicated persistent logs as well to support interruption and restart. A pool is a set of targets spread across different storage nodes over which data and metadata are distributed to achieve horizontal scalability, and replicated or erasure-coded to ensure durability and availability. When creating a pool, a set of system properties must be defined to configure the different features supported by the pool. Also, user can define their attributes that will be stored persistently. A pool is only accessible to authenticated and authorized applications. Multiple security frameworks could be supported, from NFSv4 access control lists to third party-based authentication (such as Kerberos). Security is enforced when connecting to the pool. Upon successful connection to the pool, a connection context is returned to the application process. As detailed previously, a pool stores many different sorts of persistent metadata, such as the pool map, authentication, and authorization information, user attributes, properties and rebuild logs. Such metadata are critical and require the highest level of resiliency. Therefore, the pool metadata are replicated on a few nodes from distinct high-level fault domains. For very large configurations with hundreds of thousands of storage nodes, only a very small fraction of those nodes (in the order of tens) run the pool metadata service. With a limited number of storage nodes, DAOS can afford to rely on a consensus algorithm to reach agreement and to guarantee consistency in the presence of faults and to avoid split-brain syndrome. To access a pool, a user process should connect to this pool and pass the security checks. Once granted, a pool connection can be shared (via local2global() and global2local() operations) with any or all of its peer application processes (similar to the openg() POSIX extension). This collective connect mechanism allows avoiding metadata request storm when a massively distributed job is run on the datacenter. A pool connection is then revoked when the original process that issued the connection request disconnects from the pool.","title":"DAOS Pool"},{"location":"overview/storage/#daos-container","text":"A container represents an object address space inside a pool and is identified by a UUID. The diagram below represents how the user (i.e., I/O middleware, domain-specific data format, big data or AI frameworks ...) could use the container concept to store related datasets. Like pools, containers can store user attributes, and a set of properties must be passed at container creation time to configure different features like checksums. To access a container, an application must first connect to the pool and then open the container. If the application is authorized to access the container, a container handle is returned. This includes capabilities that authorize any process in the application to access the container and its contents. The opening process may share this handle with any or all of its peers. Their capabilities are revoked either on container close. Objects in a container may have different schemas for data distribution and redundancy over targets. Dynamic or static striping, replication, or erasure code are some parameters required to define the object schema. The object class defines common schema attributes for a set of objects. Each object class is assigned a unique identifier and is associated with a given schema at the pool level. A new object class can be defined at any time with a configurable schema, which is then immutable after creation, or at least until all objects belonging to the class have been destroyed. For convenience, several object classes expected to be the most commonly used will be predefined by default when the pool is created, as shown the table below table below. Sample of Pre-defined Object Classes Object Class (RW = read/write, RM = read-mostly Redundancy Layout (SC = stripe count, RC = replica count, PC = parity count, TGT = target Small size & RW Replication static SCxRC, e.g. 1x4 Small size & RM Erasure code static SC+PC, e.g. 4+2 Large size & RW Replication static SCxRC over max #targets) Large size & RM Erasure code static SCx(SC+PC) w/ max #TGT) Unknown size & RW Replication SCxRC, e.g. 1x4 initially and grows Unknown size & RM Erasure code SC+PC, e.g. 4+2 initially and grows As shown below, each object is identified in the container by a unique 128-bit object address. The high 32 bits of the object address is reserved for DAOS to encode internal metadata such as the object class. The remaining 96 bits are managed by the user and should be unique inside the container. Those bits can be used by upper layers of the stack to encode their metadata as long as unicity is guaranteed. A per-container 64-bit scalable object ID allocator is provided in the DAOS API. The object ID to be stored by the application is the full 128-bit address which is for single use only and can be associated with only a single object schema. DAOS Object ID Structure <---------------------------------- 128 bits ----------------------------------> -------------------------------------------------------------------------------- |DAOS Internal Bits| Unique User Bits | -------------------------------------------------------------------------------- <---- 32 bits ----><------------------------- 96 bits -------------------------> A container is the basic unit of transaction and versioning. All object operations are implicitly tagged by the DAOS library with a timestamp called an epoch. The DAOS transaction API allows combining multiple object updates into a single atomic transaction with multi-version concurrency control based on epoch ordering. All the versioned updates may periodically be aggregated to reclaim space utilized by overlapping writes and to reduce metadata complexity. A snapshot is a permanent reference that can be placed on a specific epoch to prevent aggregation. Container metadata (i.e., list of snapshots, container open handles, object class, user attributes, properties, and others) are stored in persistent memory and maintained by a dedicated container metadata service that either uses the same replicated engine as the parent metadata pool service or has its own engine. This is configurable when creating a container. Like a pool, access to a container is controlled by the container handle. To acquire a valid handle, an application process must open the container and pass the security checks. This container handle may then be shared with other peer application processes via the container local2global() and global2local() operations.","title":"DAOS Container"},{"location":"overview/storage/#daos-object","text":"To avoid scaling problems and overhead common to a traditional storage system, DAOS objects are intentionally simple. No default object metadata beyond the type and schema are provided. This means that the system does not maintain time, size, owner, permissions or even track openers. To achieve high availability and horizontal scalability, many object schemas (replication/erasure code, static/dynamic striping, and others) are provided. The schema framework is flexible and easily expandable to allow for new custom schema types in the future. The layout is generated algorithmically on object open from the object identifier and the pool map. End-to-end integrity is assured by protecting object data with checksums during network transfer and storage. A DAOS object can be accessed through different APIs: Multi-level key-array API is the native object interface with locality feature. The key is split into a distribution (i.e., dkey) and an attribute (i.e., akey) key. Both the dkey and akey can be of variable length and type (i.e. a string, an integer or even a complex data structure). All entries under the same dkey are guaranteed to be collocated on the same target. The value associated with akey can be either a single variable-length value that cannot be partially overwritten or an array of fixed-length values. Both the akeys and dkeys support enumeration. Key-value API provides a simple key and variable-length value interface. It supports the traditional put, get, remove and list operations. Array API implements a one-dimensional array of fixed-size elements addressed by a 64-bit offset. A DAOS array supports arbitrary extent read, write and punch operations.","title":"DAOS Object"},{"location":"overview/terminology/","text":"Terminology \u00b6 Acronym Expansion ABT Argobots ACL Access Control List ACE Access Control Entry BIO Blob I/O CART Collective and RPC Transport CGO Go tools that enable creation of Go packages that call C code CN Compute Node COTS Commercial off-the-shelf CPU Central Processing Unit Daemon A process offering system-level resources. DAOS Distributed Asynchronous Object Storage DCPM Intel Optane DC Persistent Memory DPDK Data Plane Development Kit dRPC DAOS Remote Procedure Call gRPC gRPC Remote Procedure Calls GURT A common library of Gurt Useful Routines and Types HLC Hybrid Logical Clock HLD High-level Design ISA-L Intel Storage Acceleration Library I/O Input/Output KV store Key-Value store libfabric A user-space library that exports the Open Fabrics Interface Mercury A user-space RPC library that can use libfabrics as a transport MTBF Mean Time Between Failures NVM Non-Volatile Memory NVMe Non-Volatile Memory express OFI Open Fabrics Interface OS Operating System PM/PMEM Persistent Memory PMDK Persistent Memory Devevelopment Kit RAFT Raft is a consensus algorithm used to distribute state transitions among DAOS server nodes. RAS Reliability, Availability & Serviceability RDB Replicated Database, containing pool metadata and maintained across DAOS servers using the Raft algorithm. RDMA/RMA Remote (Direct) Memory Access RDG Redundancy Group RPC Remote Procedure Call SCM Storage-Class Memory SWIM Scalable Weakly-consistent Infection-style process group Membership SPDK Storage Performance Development Kit SSD Solid State Drive SWIM Scalable Weakly-consistent Infection-style process group Membership protocol ULT User Level Thread UPI Intel Ultra Path Interconnect UUID Universal Unique Identifier VOS Versioning Object Store","title":"Terminology"},{"location":"overview/terminology/#terminology","text":"Acronym Expansion ABT Argobots ACL Access Control List ACE Access Control Entry BIO Blob I/O CART Collective and RPC Transport CGO Go tools that enable creation of Go packages that call C code CN Compute Node COTS Commercial off-the-shelf CPU Central Processing Unit Daemon A process offering system-level resources. DAOS Distributed Asynchronous Object Storage DCPM Intel Optane DC Persistent Memory DPDK Data Plane Development Kit dRPC DAOS Remote Procedure Call gRPC gRPC Remote Procedure Calls GURT A common library of Gurt Useful Routines and Types HLC Hybrid Logical Clock HLD High-level Design ISA-L Intel Storage Acceleration Library I/O Input/Output KV store Key-Value store libfabric A user-space library that exports the Open Fabrics Interface Mercury A user-space RPC library that can use libfabrics as a transport MTBF Mean Time Between Failures NVM Non-Volatile Memory NVMe Non-Volatile Memory express OFI Open Fabrics Interface OS Operating System PM/PMEM Persistent Memory PMDK Persistent Memory Devevelopment Kit RAFT Raft is a consensus algorithm used to distribute state transitions among DAOS server nodes. RAS Reliability, Availability & Serviceability RDB Replicated Database, containing pool metadata and maintained across DAOS servers using the Raft algorithm. RDMA/RMA Remote (Direct) Memory Access RDG Redundancy Group RPC Remote Procedure Call SCM Storage-Class Memory SWIM Scalable Weakly-consistent Infection-style process group Membership SPDK Storage Performance Development Kit SSD Solid State Drive SWIM Scalable Weakly-consistent Infection-style process group Membership protocol ULT User Level Thread UPI Intel Ultra Path Interconnect UUID Universal Unique Identifier VOS Versioning Object Store","title":"Terminology"},{"location":"overview/transaction/","text":"Transaction Model \u00b6 The DAOS API supports distributed transactions that allow any update operations against objects belonging to the same container to be combined into a single ACID transaction. Distributed consistency is provided via a lockless optimistic concurrency control mechanism based on multi-version timestamp ordering. DAOS transactions are serializable and can be used on an ad-hoc basis for parts of the datasets that need it. The DAOS versioning mechanism allows creating persistent container snapshots which provide point-in-time distributed consistent views of a container which can be used to build producer-consumer pipeline. Epoch and Timestamp Ordering \u00b6 Each DAOS I/O operation is tagged with a timestamp called epoch. An epoch is a 64-bit integer that integrates both logical and physical clocks (see HLC paper ). The DAOS API provides helper functions to convert an epoch to traditional POSIX time (i.e., struct timespec, see clock_gettime(3)). Container Snapshot \u00b6 As shown in the figure below, the content of a container can be snapshot at any time. DAOS snapshots are very lightweight and are tagged with the epoch associated with the time when the snapshot was created. Once successfully created, a snapshot remains readable until it is explicitly destroyed. The content of a container can be rolled back to a particular snapshot. The container snapshot feature allows supporting native producer/consumer pipeline as represented in the diagram below. The producer will generate a snapshot once a consistent version of the dataset has been successfully written. The consumer applications may subscribe to container snapshot events so that new updates can be processed as the producer commits them. The immutability of the snapshots guarantees that the consumer sees consistent data, even while the producer continues with new updates. Both the producer and consumer indeed operate on different versions of the container and do not need any serialization. Once the producer generates a new version of the dataset, the consumer may query the differences between the two snapshots and process only the incremental changes. Distributed Transactions \u00b6 Unlike POSIX, the DAOS API does not impose any worst-case concurrency control mechanism to address conflicting I/O operations. Instead, individual I/O operations are tagged with a different epoch and applied in epoch order, regardless of execution order. This baseline model delivers the maximum scalability and performance to data models and applications that do not generate conflicting I/O workload. Typical examples are collective MPI-IO operations, POSIX file read/write or HDF5 dataset read/write. For parts of the data model that require conflict serialization, DAOS provides distributed serializable transaction based on multi-version concurrency control. Transactions are typically needed when different user process can overwrite the value associated with a dkey/akey pair. Examples are a SQL database over DAOS or a consistent POSIX namespace accessed concurrently by uncoordinated clients. All I/O operations (include reads) submitted in the context of the same operation will use the same epoch. The DAOS transaction mechanism automatically detects the traditional read/write, write/read and write/write conflicts and aborts one of the conflicting transactions that have to be restarted by the user (i.e., transaction fails to commit with -DER_RESTART). In the initial implementation, the transaction API has the following limitations that will be addressed in future DAOS versions: no support for the array API transactional object update and key-value put operations are not visible via object fetch/list and key-value get/list operations executed in the context of the same transaction.","title":"Transaction Model"},{"location":"overview/transaction/#transaction-model","text":"The DAOS API supports distributed transactions that allow any update operations against objects belonging to the same container to be combined into a single ACID transaction. Distributed consistency is provided via a lockless optimistic concurrency control mechanism based on multi-version timestamp ordering. DAOS transactions are serializable and can be used on an ad-hoc basis for parts of the datasets that need it. The DAOS versioning mechanism allows creating persistent container snapshots which provide point-in-time distributed consistent views of a container which can be used to build producer-consumer pipeline.","title":"Transaction Model"},{"location":"overview/transaction/#epoch-and-timestamp-ordering","text":"Each DAOS I/O operation is tagged with a timestamp called epoch. An epoch is a 64-bit integer that integrates both logical and physical clocks (see HLC paper ). The DAOS API provides helper functions to convert an epoch to traditional POSIX time (i.e., struct timespec, see clock_gettime(3)).","title":"Epoch and Timestamp Ordering"},{"location":"overview/transaction/#container-snapshot","text":"As shown in the figure below, the content of a container can be snapshot at any time. DAOS snapshots are very lightweight and are tagged with the epoch associated with the time when the snapshot was created. Once successfully created, a snapshot remains readable until it is explicitly destroyed. The content of a container can be rolled back to a particular snapshot. The container snapshot feature allows supporting native producer/consumer pipeline as represented in the diagram below. The producer will generate a snapshot once a consistent version of the dataset has been successfully written. The consumer applications may subscribe to container snapshot events so that new updates can be processed as the producer commits them. The immutability of the snapshots guarantees that the consumer sees consistent data, even while the producer continues with new updates. Both the producer and consumer indeed operate on different versions of the container and do not need any serialization. Once the producer generates a new version of the dataset, the consumer may query the differences between the two snapshots and process only the incremental changes.","title":"Container Snapshot"},{"location":"overview/transaction/#distributed-transactions","text":"Unlike POSIX, the DAOS API does not impose any worst-case concurrency control mechanism to address conflicting I/O operations. Instead, individual I/O operations are tagged with a different epoch and applied in epoch order, regardless of execution order. This baseline model delivers the maximum scalability and performance to data models and applications that do not generate conflicting I/O workload. Typical examples are collective MPI-IO operations, POSIX file read/write or HDF5 dataset read/write. For parts of the data model that require conflict serialization, DAOS provides distributed serializable transaction based on multi-version concurrency control. Transactions are typically needed when different user process can overwrite the value associated with a dkey/akey pair. Examples are a SQL database over DAOS or a consistent POSIX namespace accessed concurrently by uncoordinated clients. All I/O operations (include reads) submitted in the context of the same operation will use the same epoch. The DAOS transaction mechanism automatically detects the traditional read/write, write/read and write/write conflicts and aborts one of the conflicting transactions that have to be restarted by the user (i.e., transaction fails to commit with -DER_RESTART). In the initial implementation, the transaction API has the following limitations that will be addressed in future DAOS versions: no support for the array API transactional object update and key-value put operations are not visible via object fetch/list and key-value get/list operations executed in the context of the same transaction.","title":"Distributed Transactions"},{"location":"overview/use_cases/","text":"Use Cases \u00b6 This section provides a non-exhaustive list of use cases presenting how the DAOS storage model and stack could be used on a real HPC cluster. This document contains the following sections: Storage Management and Workflow Integration Workflow Execution Bulk Synchronous Checkpoint Producer/Consumer Concurrent Producers Storage Node Failure and Resilvering Storage Management & Workflow Integration \u00b6 In this section, we consider two different cluster configurations: Cluster A: All or a majority of the compute nodes have local persistent memory. In other words, each compute node is also a storage node. Cluster B: Storage nodes are dedicated to storage and disseminated across the fabric. They are not used for computation and thus do not run any application code. At boot time, each storage node starts the DAOS server that instantiates service threads. In cluster A, the DAOS threads are bound to the noisy cores and interact with the FWK if mOS is used. In cluster B, the DAOS server can use all the cores of the storage node. The DAOS server then loads the storage management module. This module scans for local storage on the node and reports the result to a designated master DAOS server that aggregates information about the used and available storage across the cluster. The management module also retrieves the fault domain hierarchy (from a database or specific service) and integrates this with the storage information. The resource manager then uses the DAOS management API to query available storage and allocate a certain amount of storage (i.e. persistent memory) for a new workflow that is to be scheduled. In cluster A, this allocation request may list the compute nodes where the workflow is supposed to run, whereas in case B, it may ask for storage nearby some allocated compute nodes. Once successfully allocated, the master server will initialize a DAOS pool covering the allocated storage by formatting the VOS layout (i.e. fallocate(1) a PMEM file & create VOS super block) and starting the pool service which will initiate the Raft engine in charge of the pool membership and metadata. At this point, the DAOS pool is ready to be handed off to the actual workflow. When the workflow starts, one rank connects to the DAOS pool, then uses local2global() to generate a global connection handle and shares it with all the other application ranks that use global2local() to create a local connection handle. At that point, new containers can be created and existing ones opened collectively or individually by the application tasks. Workflow Execution \u00b6 We consider the workflow represented in the figure below. Each green box represents a different container. All containers are stored in the same DAOS pool represented by the grey box. The simulation reads data from the input container and writes raw timesteps to another container. It also regularly dumps checkpoints to a dedicated ckpt container. The down-sample job reads the raw timesteps and generates sampled timesteps to be analyzed by the post-process which stores analysis data into yet another container. Bulk Synchronous Checkpoint \u00b6 Defensive I/O is used to manage a large simulation run over a period of time larger than the platform's mean time between failure (MTBF). The simulation regularly dumps the current computation state to a dedicated container used to guarantee forward progress in the event of failures. This section elaborates on how checkponting could be implemented on top of the DAOS storage stack. We first consider the traditional approach relying on blocking barriers and then a more loosely coupled execution. Blocking Barrier When the simulation job starts, one task opens the checkpoint container and fetches the current global HCE. It thens obtains an epoch hold and shares the data (the container handle, the current LHE and global HCE) with peer tasks. Each task checks for the latest computation state saved to the checkpoint container by reading with an epoch equal to the global HCE and resumes computation from where it was last checkpointed. To checkpoint, each task executes a barrier to synchronize with the other tasks, writes its current computation state to the checkpoint container at epoch LHE, flushes all updates and finally executes another barrier. Once all tasks have completed the last barrier, one designated task (e.g. rank 0) commits the LHE which is then increased by one on successful commit. This process is repeated regularly until the simulation successfully completes. Non-blocking Barrier We now consider another approach to checkpointing where the execution is more loosely coupled. As in the previous case, one task is responsible for opening the checkpoint container, fetching the global HCE, obtaining an epoch hold and sharing the data with the other peer tasks. However, tasks can now checkpoint their computation state at their own pace without waiting for each other. After the computation of N timesteps, each task dumps its state to the checkpoint container at epoch LHE+1, flushes the changes and calls a non-blocking barrier (e.g. MPI_Ibarrier()) once done. Then after another N timesteps, the new checkpoint is written with epoch LHE+2 and so on. For each checkpoint, the epoch number is incremented. Moreover, each task regularly calls MPI_Test() to check for barrier completion which allows them to recycle the MPI_Request. Upon barrier completion, one designated task (typically rank 0) also commits the associated epoch number. All epochs are guaranteed to be committed in sequence and each committed epoch is a new consistent checkpoint to restart from. On failure, checkpointed states that have been written by individual tasks, but not committed, are automatically rolled back. Producer/Consumer \u00b6 In the previous figure , we have two examples of producer/consumer. The down-sample job consumes raw timesteps generated by the simulation job and produces sampled timesteps analyzed by the post-process job. The DAOS stack provides specific mechanims for producer/consumer workflow which even allows the consumer to dumps the result of its analysis into the same container as the producer. Private Container The down-sample job opens the sampled timesteps container, fetches the current global HCE, obtains an epoch hold and writes new sampled data to this container at epoch LHE. While this is occurring, the post process job opens the container storing analyzed data for write, checks for the latest analyzed timesteps and obtains an epoch hold on this container. It then opens the sampled timesteps container for read, and checks whether the next time-step to be consumed is ready. If not, it waits for a new global HCE to be committed (notified by asynchronous event completion on the event queue) and checks again. When the requested time-step is available, the down-sample job processes input data for this new time-step, dumps the results in its own container and updates the latest analyzed time-step in its metadata. It then commits updates to its output container and waits again for a new epoch to be committed and repeats the same process. Another approach is for the producer job to create explicit snapshots for epochs of interest and have the analysis job waiting and processing snapshots. This avoid processing every single committed epoch. Shared Container We now assume that the container storing the sampled timesteps and the one storing the analyzed data are a single container. In other words, the down-sample job consumes input data and writes output data to the same container. The down-sample job opens the shared container, obtains an hold and dumps new sampled timesteps to the container. As before, the post-process job also opens the container, fetches the latest analyzed timestep, but does not obtain an epoch hold until a new global HCE is ready. Once the post-process job is notified of a new global HCE, it can analyze the new sampled timesteps, obtain an hold and write its analyzed data to the same container. Once this is done, the post-process job flushes its updates, commits the held epoch and releases the held epoch. At that point, it can wait again for a new global HCE to be generated by the down-sample job. Concurrent Producers \u00b6 In the previous section, we consider a producer and a consumer job concurrently reading and writing into the same container, but in disjoint objects. We now consider a workflow composed of concurrent producer jobs modifying the same container in a conflicting and uncoordinated manner. This effectively means that the two producers can update the same key of the same KV object or document store or overlapping extents of the same byte array. This model requires the implementation of a concurrency-control mechanism (not part of DAOS) to coordinate conflicting accesses. This section presents an example of such a mechanism based on locking, but alternative approaches can also be considered. A workflow is composed of two applications using a distributed lock manager to serialize contended accesses to DAOS objects. Each application individually opens the same container and grabs an epoch hold whenever it wants to modify some objects in the container. Prior to modifying an object, an application should acquire a write lock on the object. This lock carries a lock value block (LVB) storing the last epoch number in which this object was last modified and committed. Once the lock is acquired, the writer must: read from an epoch equal to the greatest of the epoch specified in the LVB and the handle LRE. submit new writes with an epoch higher than the one in the LVB and the currently held epoch. After all the I/O operations have been completed, flushed, and committed by the application, the LVB is updated with the committed epoch in which the object was modified, and the lock can finally be released. Storage Node Failure and Resilvering \u00b6 In this section, we consider a workflow connected to a DAOS pool and one storage node that suddenly fails. Both DAOS clients and servers communicating with the failed server experience RPC timeouts and inform the RAS system. Failing RPCs are resent repeatedly until the RAS system or the pool metadata service itself decides to declare the storage node dead and evicts it from the pool map. The pool map update, along with the new version, is propagated to all the storage nodes that lazily (in RPC replies) inform clients that a new pool map version is available. Both clients and servers are thus eventually informed of the failure and enter into recovery mode. Server nodes will cooperate to restore redundancy on different servers for the impacted objects, whereas clients will enter in degraded mode and read from other replicas, or reconstruct data from erasure code. This rebuild process is executed online while the container is still being accessed and modified. Once redundancy has been restored for all objects, the poolmap is updated again to inform everyone that the system has recovered from the fault and the system can exit from degraded mode.","title":"Use Cases"},{"location":"overview/use_cases/#use-cases","text":"This section provides a non-exhaustive list of use cases presenting how the DAOS storage model and stack could be used on a real HPC cluster. This document contains the following sections: Storage Management and Workflow Integration Workflow Execution Bulk Synchronous Checkpoint Producer/Consumer Concurrent Producers Storage Node Failure and Resilvering","title":"Use Cases"},{"location":"overview/use_cases/#storage-management-workflow-integration","text":"In this section, we consider two different cluster configurations: Cluster A: All or a majority of the compute nodes have local persistent memory. In other words, each compute node is also a storage node. Cluster B: Storage nodes are dedicated to storage and disseminated across the fabric. They are not used for computation and thus do not run any application code. At boot time, each storage node starts the DAOS server that instantiates service threads. In cluster A, the DAOS threads are bound to the noisy cores and interact with the FWK if mOS is used. In cluster B, the DAOS server can use all the cores of the storage node. The DAOS server then loads the storage management module. This module scans for local storage on the node and reports the result to a designated master DAOS server that aggregates information about the used and available storage across the cluster. The management module also retrieves the fault domain hierarchy (from a database or specific service) and integrates this with the storage information. The resource manager then uses the DAOS management API to query available storage and allocate a certain amount of storage (i.e. persistent memory) for a new workflow that is to be scheduled. In cluster A, this allocation request may list the compute nodes where the workflow is supposed to run, whereas in case B, it may ask for storage nearby some allocated compute nodes. Once successfully allocated, the master server will initialize a DAOS pool covering the allocated storage by formatting the VOS layout (i.e. fallocate(1) a PMEM file & create VOS super block) and starting the pool service which will initiate the Raft engine in charge of the pool membership and metadata. At this point, the DAOS pool is ready to be handed off to the actual workflow. When the workflow starts, one rank connects to the DAOS pool, then uses local2global() to generate a global connection handle and shares it with all the other application ranks that use global2local() to create a local connection handle. At that point, new containers can be created and existing ones opened collectively or individually by the application tasks.","title":"Storage Management &amp; Workflow Integration"},{"location":"overview/use_cases/#workflow-execution","text":"We consider the workflow represented in the figure below. Each green box represents a different container. All containers are stored in the same DAOS pool represented by the grey box. The simulation reads data from the input container and writes raw timesteps to another container. It also regularly dumps checkpoints to a dedicated ckpt container. The down-sample job reads the raw timesteps and generates sampled timesteps to be analyzed by the post-process which stores analysis data into yet another container.","title":"Workflow Execution"},{"location":"overview/use_cases/#bulk-synchronous-checkpoint","text":"Defensive I/O is used to manage a large simulation run over a period of time larger than the platform's mean time between failure (MTBF). The simulation regularly dumps the current computation state to a dedicated container used to guarantee forward progress in the event of failures. This section elaborates on how checkponting could be implemented on top of the DAOS storage stack. We first consider the traditional approach relying on blocking barriers and then a more loosely coupled execution. Blocking Barrier When the simulation job starts, one task opens the checkpoint container and fetches the current global HCE. It thens obtains an epoch hold and shares the data (the container handle, the current LHE and global HCE) with peer tasks. Each task checks for the latest computation state saved to the checkpoint container by reading with an epoch equal to the global HCE and resumes computation from where it was last checkpointed. To checkpoint, each task executes a barrier to synchronize with the other tasks, writes its current computation state to the checkpoint container at epoch LHE, flushes all updates and finally executes another barrier. Once all tasks have completed the last barrier, one designated task (e.g. rank 0) commits the LHE which is then increased by one on successful commit. This process is repeated regularly until the simulation successfully completes. Non-blocking Barrier We now consider another approach to checkpointing where the execution is more loosely coupled. As in the previous case, one task is responsible for opening the checkpoint container, fetching the global HCE, obtaining an epoch hold and sharing the data with the other peer tasks. However, tasks can now checkpoint their computation state at their own pace without waiting for each other. After the computation of N timesteps, each task dumps its state to the checkpoint container at epoch LHE+1, flushes the changes and calls a non-blocking barrier (e.g. MPI_Ibarrier()) once done. Then after another N timesteps, the new checkpoint is written with epoch LHE+2 and so on. For each checkpoint, the epoch number is incremented. Moreover, each task regularly calls MPI_Test() to check for barrier completion which allows them to recycle the MPI_Request. Upon barrier completion, one designated task (typically rank 0) also commits the associated epoch number. All epochs are guaranteed to be committed in sequence and each committed epoch is a new consistent checkpoint to restart from. On failure, checkpointed states that have been written by individual tasks, but not committed, are automatically rolled back.","title":"Bulk Synchronous Checkpoint"},{"location":"overview/use_cases/#producerconsumer","text":"In the previous figure , we have two examples of producer/consumer. The down-sample job consumes raw timesteps generated by the simulation job and produces sampled timesteps analyzed by the post-process job. The DAOS stack provides specific mechanims for producer/consumer workflow which even allows the consumer to dumps the result of its analysis into the same container as the producer. Private Container The down-sample job opens the sampled timesteps container, fetches the current global HCE, obtains an epoch hold and writes new sampled data to this container at epoch LHE. While this is occurring, the post process job opens the container storing analyzed data for write, checks for the latest analyzed timesteps and obtains an epoch hold on this container. It then opens the sampled timesteps container for read, and checks whether the next time-step to be consumed is ready. If not, it waits for a new global HCE to be committed (notified by asynchronous event completion on the event queue) and checks again. When the requested time-step is available, the down-sample job processes input data for this new time-step, dumps the results in its own container and updates the latest analyzed time-step in its metadata. It then commits updates to its output container and waits again for a new epoch to be committed and repeats the same process. Another approach is for the producer job to create explicit snapshots for epochs of interest and have the analysis job waiting and processing snapshots. This avoid processing every single committed epoch. Shared Container We now assume that the container storing the sampled timesteps and the one storing the analyzed data are a single container. In other words, the down-sample job consumes input data and writes output data to the same container. The down-sample job opens the shared container, obtains an hold and dumps new sampled timesteps to the container. As before, the post-process job also opens the container, fetches the latest analyzed timestep, but does not obtain an epoch hold until a new global HCE is ready. Once the post-process job is notified of a new global HCE, it can analyze the new sampled timesteps, obtain an hold and write its analyzed data to the same container. Once this is done, the post-process job flushes its updates, commits the held epoch and releases the held epoch. At that point, it can wait again for a new global HCE to be generated by the down-sample job.","title":"Producer/Consumer"},{"location":"overview/use_cases/#concurrent-producers","text":"In the previous section, we consider a producer and a consumer job concurrently reading and writing into the same container, but in disjoint objects. We now consider a workflow composed of concurrent producer jobs modifying the same container in a conflicting and uncoordinated manner. This effectively means that the two producers can update the same key of the same KV object or document store or overlapping extents of the same byte array. This model requires the implementation of a concurrency-control mechanism (not part of DAOS) to coordinate conflicting accesses. This section presents an example of such a mechanism based on locking, but alternative approaches can also be considered. A workflow is composed of two applications using a distributed lock manager to serialize contended accesses to DAOS objects. Each application individually opens the same container and grabs an epoch hold whenever it wants to modify some objects in the container. Prior to modifying an object, an application should acquire a write lock on the object. This lock carries a lock value block (LVB) storing the last epoch number in which this object was last modified and committed. Once the lock is acquired, the writer must: read from an epoch equal to the greatest of the epoch specified in the LVB and the handle LRE. submit new writes with an epoch higher than the one in the LVB and the currently held epoch. After all the I/O operations have been completed, flushed, and committed by the application, the LVB is updated with the committed epoch in which the object was modified, and the lock can finally be released.","title":"Concurrent Producers"},{"location":"overview/use_cases/#storage-node-failure-and-resilvering","text":"In this section, we consider a workflow connected to a DAOS pool and one storage node that suddenly fails. Both DAOS clients and servers communicating with the failed server experience RPC timeouts and inform the RAS system. Failing RPCs are resent repeatedly until the RAS system or the pool metadata service itself decides to declare the storage node dead and evicts it from the pool map. The pool map update, along with the new version, is propagated to all the storage nodes that lazily (in RPC replies) inform clients that a new pool map version is available. Both clients and servers are thus eventually informed of the failure and enter into recovery mode. Server nodes will cooperate to restore redundancy on different servers for the impacted objects, whereas clients will enter in degraded mode and read from other replicas, or reconstruct data from erasure code. This rebuild process is executed online while the container is still being accessed and modified. Once redundancy has been restored for all objects, the poolmap is updated again to inform everyone that the system has recovered from the fault and the system can exit from degraded mode.","title":"Storage Node Failure and Resilvering"},{"location":"release/releaseNote_v1_0/","text":"DAOS Version 1.0 Release Notes \u00b6 We are pleased to announce the release of DAOS version 1.0, a key DAOS milestone focused on a newly created high-performance object store that is ultimately shifting the HPC and big data paradigm. Recently awarded the top spot in the IO500 10-node Challenge , DAOS is fully optimized for Intel(R) architecture and non-volatile memory (NVM). This release is targeted towards benchmarking, partner integration, evaluation, and brings support for the following features: NVMe and Persistent Memory support Per-pool ACL Certificate Support Unified Namespace via dfuse MPI-IO ROMIO Driver HDF5 Support Basic POSIX I/O Support Replication and Self-Healing (Preview) This release is not yet intended for production use. DAOS is an open-source, software-defined storage (SDS) and storage-as-a-service (STaaS) platform. This technology was developed from the ground up for nextgen NVM technologies like Intel(R) 3D NAND Technology and Intel(R) Optane technology. DAOS operates end-to-end in user-space for ease of deployment and to maximize IOPS, bandwidth, and minimize latency. DAOS is a scale-out solution allowing small and medium deployments to grow as much as required (i.e., 100's of PB with millions of client nodes and thousands of storage servers) to serve the most demanding scientific, Big Data and AI workloads. The primary storage for the first US Exascale supercomputer (the Aurora system at Argonne National Laboratory - ANL) will be a 230PB DAOS tier composed to deliver an aggregated bandwidth of at least 25TB/s. Intel is collaborating closely with different partners to propose DAOS-based solutions for production deployments. DAOS is gaining traction among the enterprise and hyperscalers. Designed to address evolving storage needs, DAOS is a new storage platform for the convergence of traditional modeling and simulation, data science analytics, and artificial intelligence. Visit the DAOS github.io page for more information. All DAOS project source code is maintained in the https://github.com/daos-stack/daos repository. Please visit this link for more information on the licenses. Software Dependencies \u00b6 Reference the Software Installation section of the DAOS Administration Guide for more details. Distribution Packages \u00b6 DAOS RPMs are currently being developed for DAOS v1.0. Instructions for obtaining the RPMs will be provided in this document at a future date, and will be posted in the DAOS mailing list . Build Prerequisites \u00b6 To build DAOS and its dependencies, several software packages must be installed on the system. This includes scons, libuuid, cmocka, ipmctl, and several other packages usually available on all the Linux distributions. Moreover, a Go version of at least 1.10 is required. CentOS is currently the only supported Linux distribution. An exhaustive list of packages for each supported Linux distribution is maintained in the Docker files. Refer to the Software Installation section of the DAOS Administration Guide for more details. Hardware Support \u00b6 Processor Requirements \u00b6 DAOS requires a 64-bit processor architecture and is primarily developed on Intel 64 architecture. The DAOS software and the libraries it depends on (e.g., ISA-L, SPDK, PMDK, and DPDK) can take advantage of Intel SSE and AVX extensions. Network Requirements \u00b6 The DAOS network layer relies on libfabrics and supports OFI providers for Ethernet/sockets, InfiniBand/verbs. An RDMA-capable fabric is preferred for better performance. DAOS can support multiple rails by binding different instances of the DAOS server to individual network cards. The DAOS control plane provides methods for administering and managing the DAOS servers using a secure socket layer interface. An additional out-of-band network connecting the nodes in the DAOS service cluster is required for DAOS administration. Management traffic between clients and servers use IP over Fabric. Storage Requirements \u00b6 DAOS requires each storage node to have direct access to storage-class memory (SCM). While DAOS is primarily tested and tuned for Intel(R) Optane DC Persistent Memory, the DAOS software stack is built over the Persistent Memory Development Kit (PMDK) and the DAX feature of the Linux operating systems as described in the SNIA NVM Programming Model . As a result, the open-source DAOS software stack should be able to run transparently over any storage-class memory supported by the PMDK. The storage node should be equipped with NVMe (non-volatile memory express) SSDs to provide capacity. HDDs, as well as SATA and SAS SSDs, are not supported by DAOS. Both NVMe 3D-NAND and Optane SSDs are supported. NVMe-oF devices should theoretically work with the user-space storage stack but have not been tested. A recommended ratio of 6% SCM to SSD capacity will guarantee that DAOS has enough space in SCM to store its internal metadata (e.g., pool metadata, SSD block allocation tracking). For testing purposes, SCM can be emulated with DRAM by mounting a tmpfs filesystem, and NVMe SSDs can be also emulated with DRAM or a loopback file. Any data written using a tmpfs will not be persistent across a reboot. DAOS Testing \u00b6 DAOS 1.0 validation efforts were focused on anticipated initial use cases including: system integration, application porting, benchmarking, initial evaluations, and the like. This release is not intended for large scale production use and testing to date has not focused on use cases or hardware typically found in HPC production environments. Testing has been completed in the following areas: Testing has been performed on Centos 7.7 and SLES 15 with Centos being used in the majority of the test cycles. Testing has been conducted using Intel Xeon processors, Intel 3D NAND and Optane based NVMe SSDs and Optane persistent memory modules although generally storage density was not tested at production levels. DAOS uses the libfabric network abstraction layer and testing has been performed on a number of network specific providers, including the IB verbs, OPA PSM2, socket and TCP providers. Network testing is on-going and none of the above providers should be considered fully tested at this time. All DAOS 1.0 supported functionality has been tested with an emphasis on use cases with positive outcomes error cases (e.g. DAOS server failure) have limited test cycles at this time. Maximum scale-out of DAOS servers during test runs was 128. Maximum scale-out of DAOS clients was 2048. Soak testing with an emphasis on I/O jobs in combination with basic administrative actions has been run and found to be error free for periods up to 48 hours. As with functional testing the focus has been on positive path testing with failure paths and fault injection coming in a future release. Version 1.0 major features \u00b6 NVMe and Persistent Memory Support \u00b6 DAOS supports two tiers of storage: Storage Class Memory (SCM) and NVMe SSDs. Each DAOS server will be equipped with SCM (for byte-granular application data and metadata) along with NVMe SSDs (for DAOS application bulk data, ie >4KB). Similar to how PMDK is used to facilitate access to SCM, the Storage Performance Development Kit (SPDK) is used to provide seamless and efficient access to NVMe SSDs. DAOS utilizes the significant performance increase of the SPDK user space NVMe driver over the standard NVMe kernel driver. As a part of the NVMe support, an extent-based block allocator was implemented and designed specifically for DAOS NVMe block device space management, including efficient management of smaller 4KB block allocations. A server module was also implemented for issuing I/O over NVMe SSDs. This involves internally managing a per-xstream DMA-safe buffer for SPDK DMA transfer over NVMe SSDs. The module also persistently tracks important server metadata. This per-server metadata includes the health state of each NVMe SSD, as well as the mapping between NVMe SSDs, DAOS server xstreams, DAOS pools, and allocated blocks IDs. Two other key components include faulty device detection and device health monitoring. DAOS handles storing NVMe SSD health data, including raw NVMe device health as well as I/O error and checksum errors counters. If and when an I/O error occurs, an event notification will be sent to the console to notify the administrator. Management utility commands are also available for administrators to query all NVMe device health stats to gauge the general health of the system. DAOS currently only supports manual faulty device events, with future work including auto-detection upon configurable faulty criteria. This would involve an administrator manually setting the device state of an NVMe SSD to FAULTY using the management utility, which will trigger the appropriate rebuild of data and exclusion of the faulty device from the system. Reintegration and hotplug of NVMe SSDs are not currently supported in DAOS 1.0 but will be a part of a future release. Per-Pool ACL \u00b6 Access to DAOS data is controlled through a simple identity based access control mechanism specified on a per pool basis. The access credentials for a DAOS client process are determined by the agent running on the compute node. This credential is validated against the Access Control List present on the DAOS server to determine the level of access granted to a specific user. The ACL mechanism support access permissions on an individual and group basis as well as a mechanism for supporting fall through users. As of DAOS 1.0, the set of permissions on a pool are very simple but will be extended when container-based ACLs are introduced in a future version. Certificate Support \u00b6 Securing the transport of data and authorizing actions by components make up the backbone of the security model used in the DAOS control plane. All control plane components communicate with each other using mutual TLS authentication (mTLS) backed by certificates signed by a per cluster certificate authority. In addition to securing, the communications between components, certificates are also used to authenticate the various components and ensure that requests only come from components who are authorized to perform those actions. Certificates are also used to secure the administrative interface to the cluster, ensuring only admins with the proper credentials can perform administrative actions. Unified Namespace (UNS) in DAOS via dfuse \u00b6 Unified NameSpace (UNS) is the ability to create relationships linking paths in the namespace tree to other DAOS containers, allowing greater flexibility of use and new workflows. UNS entry points can be created that behave in a similar way to hard links or submounts, where an attempt to traverse the entry point via dfuse or DAOS aware tools will automatically and seamlessly follow the link to the specified container. UNS entry points are created by providing a path to the DAOS container create command, and can exist either within existing containers or at locations within the regular POSIX filesystem. MPI-IO ROMIO Driver \u00b6 The MPI standard includes specification for a low level IO interface for parallel access to files. The MPI-IO standard loosens some of the POSIX semantics that are not required for many applications and defines routines and methods for parallel access to files from processes in an MPI communicator. Several existing applications and other high level middleware IO libraries use the MPI-IO standard as a backend for data access. ROMIO is the de-facto MPI-IO implementation that is released with the MPICH library and is used by most MPI implementations to support the MPI-IO standard. ROMIO exposes an ADIO module interface for different backends. A DAOS backend was implemented as an alternative to the POSIX backend for direct user-space access to the DAOS storage stack through the MPI-IO interface. The DAOS ROMIO driver is distributed with the MPICH ROMIO source code. HDF5 Support \u00b6 HDF5 is a data model, library, and file format for storing and managing data. It supports an unlimited variety of datatypes, and is designed for flexible and efficient I/O and for high volume and complex data. This DAOS release supports the HDF5 format, API, and tools through the HDF5 (sec2) POSIX backend or the HDF5 MPI-IO backend. HDF5 also provides a new DAOS VOL for mapping the HDF5 data model and API directly over the DAOS data model, bypassing the byte array serialization required over the POSIX and MPI-IO backends. The HDF5 DAOS VOL is not fully supported in this DAOS release and should be used as a prototype for basic testing of this new HDF5 feature. Basic POSIX I/O Support \u00b6 POSIX IO is the main building block for all applications and IO libraries. The DAOS library provides POSIX support through the DFS (DAOS File System) library. The DFS API provides an encapsulated namespace with a POSIX like API directly on top of the DAOS API. Applications can link directly to the DFS library and use the DFS API for direct user-space access to the DAOS stack through the DFS API. A FUSE plugin over the DFS library (dfuse) is also provided to support direct access to POSIX calls through FUSE over the DAOS stack. The primary support provided in this release provides loose POSIX consistency in terms of metadata and assumes applications generate conflict-free operations, otherwise, the behavior is undefined. FUSE adds stricter consistency on top of the DFS layer, but that consistency is limited to a node local instance of the dfuse mount. Replication and self-healing (preview) \u00b6 In DAOS, if the data is replicated with multiple copies on different targets, once one of the targets fail, the data on it will be rebuilt on the other targets. This reduces the data redundancy that would be impacted by the target failure. Self-healing in DAOS 1.0 is a preview feature, and it will not be enabled automatically when targets are failed; instead it can only be enabled manually by the dmg exclude command. In future versions, DAOS will support erasure coding to protect the data. At that time, the rebuild process will be updated accordingly. Document updates \u00b6 All documents supporting the https://daos-stack.github.io/ site have been refreshed and re-organized for this release. Design documents in the DAOS Source repository have also been refreshed for this release. Known Issues \u00b6 The dmg storage scan may report incorrect NUMA socket ID \u00b6 The ndctl package maintainers have confirmed that this is a kernel regression that has been resolved in CentOS 8. Some DAOS nodes may not report the correct NUMA socket ID when running a \"dmg storage scan.\" This appears to be a regression in the CentOS7.7 kernel rather than an ndctl issue. This is due to different versions of ndctl provisioning different JSON namespace details (storage scan command reads the \"numa_node\" field). PSM over OPA is not fully functional \u00b6 If you must evaluate DAOS on an OPA fabric, we recommend using IP over fabric/sockets for evaluation. For benchmarking, PSM2 over OPA offers a better picture of DAOS performance, but the PSM2 provider is not fully functional. For a discussion of issues and options, contact us via the mailing list . Replication and Self-healing \u00b6 While replication and self-healing features have been fully implemented, those features haven't been thoroughly tested in 1.0. As a result, they are supported as preview features and will be fully supported in the next release. The storage node fault detection has thus been disabled by default and failed storage nodes have to be excluded manually to trigger automatic repair. Please refer to the [Pool Modifications] (https://daos-stack.github.io/admin/pool_operations/#pool-modifications) section of the administration guide for more information. Limited bandwidth to SCM with some update/write operations \u00b6 With a configuration of only Intel(R) Optane Pmem for storage in a DAOS pool (no SSDs), a known limitation currently exists on the write/update performance with bulk transfers to the SCM with all network providers which limits the BW per storage server. Aggregation Issue \u00b6 The aggregation service is only activated after the system has idled for more than 5 seconds, so the aggregation is always suspended if there are sustained I/O requests from application. As a result, storage node will run out of SCM space even there is plenty of free space in SSD. Fixed Issues Details \u00b6 First release, this section will be updated in subsequent releases Change Log \u00b6 No changes for this first release.","title":"Release Notes"},{"location":"release/releaseNote_v1_0/#daos-version-10-release-notes","text":"We are pleased to announce the release of DAOS version 1.0, a key DAOS milestone focused on a newly created high-performance object store that is ultimately shifting the HPC and big data paradigm. Recently awarded the top spot in the IO500 10-node Challenge , DAOS is fully optimized for Intel(R) architecture and non-volatile memory (NVM). This release is targeted towards benchmarking, partner integration, evaluation, and brings support for the following features: NVMe and Persistent Memory support Per-pool ACL Certificate Support Unified Namespace via dfuse MPI-IO ROMIO Driver HDF5 Support Basic POSIX I/O Support Replication and Self-Healing (Preview) This release is not yet intended for production use. DAOS is an open-source, software-defined storage (SDS) and storage-as-a-service (STaaS) platform. This technology was developed from the ground up for nextgen NVM technologies like Intel(R) 3D NAND Technology and Intel(R) Optane technology. DAOS operates end-to-end in user-space for ease of deployment and to maximize IOPS, bandwidth, and minimize latency. DAOS is a scale-out solution allowing small and medium deployments to grow as much as required (i.e., 100's of PB with millions of client nodes and thousands of storage servers) to serve the most demanding scientific, Big Data and AI workloads. The primary storage for the first US Exascale supercomputer (the Aurora system at Argonne National Laboratory - ANL) will be a 230PB DAOS tier composed to deliver an aggregated bandwidth of at least 25TB/s. Intel is collaborating closely with different partners to propose DAOS-based solutions for production deployments. DAOS is gaining traction among the enterprise and hyperscalers. Designed to address evolving storage needs, DAOS is a new storage platform for the convergence of traditional modeling and simulation, data science analytics, and artificial intelligence. Visit the DAOS github.io page for more information. All DAOS project source code is maintained in the https://github.com/daos-stack/daos repository. Please visit this link for more information on the licenses.","title":"DAOS Version 1.0 Release Notes"},{"location":"release/releaseNote_v1_0/#software-dependencies","text":"Reference the Software Installation section of the DAOS Administration Guide for more details.","title":"Software Dependencies"},{"location":"release/releaseNote_v1_0/#distribution-packages","text":"DAOS RPMs are currently being developed for DAOS v1.0. Instructions for obtaining the RPMs will be provided in this document at a future date, and will be posted in the DAOS mailing list .","title":"Distribution Packages"},{"location":"release/releaseNote_v1_0/#build-prerequisites","text":"To build DAOS and its dependencies, several software packages must be installed on the system. This includes scons, libuuid, cmocka, ipmctl, and several other packages usually available on all the Linux distributions. Moreover, a Go version of at least 1.10 is required. CentOS is currently the only supported Linux distribution. An exhaustive list of packages for each supported Linux distribution is maintained in the Docker files. Refer to the Software Installation section of the DAOS Administration Guide for more details.","title":"Build Prerequisites"},{"location":"release/releaseNote_v1_0/#hardware-support","text":"","title":"Hardware Support"},{"location":"release/releaseNote_v1_0/#processor-requirements","text":"DAOS requires a 64-bit processor architecture and is primarily developed on Intel 64 architecture. The DAOS software and the libraries it depends on (e.g., ISA-L, SPDK, PMDK, and DPDK) can take advantage of Intel SSE and AVX extensions.","title":"Processor Requirements"},{"location":"release/releaseNote_v1_0/#network-requirements","text":"The DAOS network layer relies on libfabrics and supports OFI providers for Ethernet/sockets, InfiniBand/verbs. An RDMA-capable fabric is preferred for better performance. DAOS can support multiple rails by binding different instances of the DAOS server to individual network cards. The DAOS control plane provides methods for administering and managing the DAOS servers using a secure socket layer interface. An additional out-of-band network connecting the nodes in the DAOS service cluster is required for DAOS administration. Management traffic between clients and servers use IP over Fabric.","title":"Network Requirements"},{"location":"release/releaseNote_v1_0/#storage-requirements","text":"DAOS requires each storage node to have direct access to storage-class memory (SCM). While DAOS is primarily tested and tuned for Intel(R) Optane DC Persistent Memory, the DAOS software stack is built over the Persistent Memory Development Kit (PMDK) and the DAX feature of the Linux operating systems as described in the SNIA NVM Programming Model . As a result, the open-source DAOS software stack should be able to run transparently over any storage-class memory supported by the PMDK. The storage node should be equipped with NVMe (non-volatile memory express) SSDs to provide capacity. HDDs, as well as SATA and SAS SSDs, are not supported by DAOS. Both NVMe 3D-NAND and Optane SSDs are supported. NVMe-oF devices should theoretically work with the user-space storage stack but have not been tested. A recommended ratio of 6% SCM to SSD capacity will guarantee that DAOS has enough space in SCM to store its internal metadata (e.g., pool metadata, SSD block allocation tracking). For testing purposes, SCM can be emulated with DRAM by mounting a tmpfs filesystem, and NVMe SSDs can be also emulated with DRAM or a loopback file. Any data written using a tmpfs will not be persistent across a reboot.","title":"Storage Requirements"},{"location":"release/releaseNote_v1_0/#daos-testing","text":"DAOS 1.0 validation efforts were focused on anticipated initial use cases including: system integration, application porting, benchmarking, initial evaluations, and the like. This release is not intended for large scale production use and testing to date has not focused on use cases or hardware typically found in HPC production environments. Testing has been completed in the following areas: Testing has been performed on Centos 7.7 and SLES 15 with Centos being used in the majority of the test cycles. Testing has been conducted using Intel Xeon processors, Intel 3D NAND and Optane based NVMe SSDs and Optane persistent memory modules although generally storage density was not tested at production levels. DAOS uses the libfabric network abstraction layer and testing has been performed on a number of network specific providers, including the IB verbs, OPA PSM2, socket and TCP providers. Network testing is on-going and none of the above providers should be considered fully tested at this time. All DAOS 1.0 supported functionality has been tested with an emphasis on use cases with positive outcomes error cases (e.g. DAOS server failure) have limited test cycles at this time. Maximum scale-out of DAOS servers during test runs was 128. Maximum scale-out of DAOS clients was 2048. Soak testing with an emphasis on I/O jobs in combination with basic administrative actions has been run and found to be error free for periods up to 48 hours. As with functional testing the focus has been on positive path testing with failure paths and fault injection coming in a future release.","title":"DAOS Testing"},{"location":"release/releaseNote_v1_0/#version-10-major-features","text":"","title":"Version 1.0 major features"},{"location":"release/releaseNote_v1_0/#nvme-and-persistent-memory-support","text":"DAOS supports two tiers of storage: Storage Class Memory (SCM) and NVMe SSDs. Each DAOS server will be equipped with SCM (for byte-granular application data and metadata) along with NVMe SSDs (for DAOS application bulk data, ie >4KB). Similar to how PMDK is used to facilitate access to SCM, the Storage Performance Development Kit (SPDK) is used to provide seamless and efficient access to NVMe SSDs. DAOS utilizes the significant performance increase of the SPDK user space NVMe driver over the standard NVMe kernel driver. As a part of the NVMe support, an extent-based block allocator was implemented and designed specifically for DAOS NVMe block device space management, including efficient management of smaller 4KB block allocations. A server module was also implemented for issuing I/O over NVMe SSDs. This involves internally managing a per-xstream DMA-safe buffer for SPDK DMA transfer over NVMe SSDs. The module also persistently tracks important server metadata. This per-server metadata includes the health state of each NVMe SSD, as well as the mapping between NVMe SSDs, DAOS server xstreams, DAOS pools, and allocated blocks IDs. Two other key components include faulty device detection and device health monitoring. DAOS handles storing NVMe SSD health data, including raw NVMe device health as well as I/O error and checksum errors counters. If and when an I/O error occurs, an event notification will be sent to the console to notify the administrator. Management utility commands are also available for administrators to query all NVMe device health stats to gauge the general health of the system. DAOS currently only supports manual faulty device events, with future work including auto-detection upon configurable faulty criteria. This would involve an administrator manually setting the device state of an NVMe SSD to FAULTY using the management utility, which will trigger the appropriate rebuild of data and exclusion of the faulty device from the system. Reintegration and hotplug of NVMe SSDs are not currently supported in DAOS 1.0 but will be a part of a future release.","title":"NVMe and Persistent Memory Support"},{"location":"release/releaseNote_v1_0/#per-pool-acl","text":"Access to DAOS data is controlled through a simple identity based access control mechanism specified on a per pool basis. The access credentials for a DAOS client process are determined by the agent running on the compute node. This credential is validated against the Access Control List present on the DAOS server to determine the level of access granted to a specific user. The ACL mechanism support access permissions on an individual and group basis as well as a mechanism for supporting fall through users. As of DAOS 1.0, the set of permissions on a pool are very simple but will be extended when container-based ACLs are introduced in a future version.","title":"Per-Pool ACL"},{"location":"release/releaseNote_v1_0/#certificate-support","text":"Securing the transport of data and authorizing actions by components make up the backbone of the security model used in the DAOS control plane. All control plane components communicate with each other using mutual TLS authentication (mTLS) backed by certificates signed by a per cluster certificate authority. In addition to securing, the communications between components, certificates are also used to authenticate the various components and ensure that requests only come from components who are authorized to perform those actions. Certificates are also used to secure the administrative interface to the cluster, ensuring only admins with the proper credentials can perform administrative actions.","title":"Certificate Support"},{"location":"release/releaseNote_v1_0/#unified-namespace-uns-in-daos-via-dfuse","text":"Unified NameSpace (UNS) is the ability to create relationships linking paths in the namespace tree to other DAOS containers, allowing greater flexibility of use and new workflows. UNS entry points can be created that behave in a similar way to hard links or submounts, where an attempt to traverse the entry point via dfuse or DAOS aware tools will automatically and seamlessly follow the link to the specified container. UNS entry points are created by providing a path to the DAOS container create command, and can exist either within existing containers or at locations within the regular POSIX filesystem.","title":"Unified Namespace (UNS) in DAOS via dfuse"},{"location":"release/releaseNote_v1_0/#mpi-io-romio-driver","text":"The MPI standard includes specification for a low level IO interface for parallel access to files. The MPI-IO standard loosens some of the POSIX semantics that are not required for many applications and defines routines and methods for parallel access to files from processes in an MPI communicator. Several existing applications and other high level middleware IO libraries use the MPI-IO standard as a backend for data access. ROMIO is the de-facto MPI-IO implementation that is released with the MPICH library and is used by most MPI implementations to support the MPI-IO standard. ROMIO exposes an ADIO module interface for different backends. A DAOS backend was implemented as an alternative to the POSIX backend for direct user-space access to the DAOS storage stack through the MPI-IO interface. The DAOS ROMIO driver is distributed with the MPICH ROMIO source code.","title":"MPI-IO ROMIO Driver"},{"location":"release/releaseNote_v1_0/#hdf5-support","text":"HDF5 is a data model, library, and file format for storing and managing data. It supports an unlimited variety of datatypes, and is designed for flexible and efficient I/O and for high volume and complex data. This DAOS release supports the HDF5 format, API, and tools through the HDF5 (sec2) POSIX backend or the HDF5 MPI-IO backend. HDF5 also provides a new DAOS VOL for mapping the HDF5 data model and API directly over the DAOS data model, bypassing the byte array serialization required over the POSIX and MPI-IO backends. The HDF5 DAOS VOL is not fully supported in this DAOS release and should be used as a prototype for basic testing of this new HDF5 feature.","title":"HDF5 Support"},{"location":"release/releaseNote_v1_0/#basic-posix-io-support","text":"POSIX IO is the main building block for all applications and IO libraries. The DAOS library provides POSIX support through the DFS (DAOS File System) library. The DFS API provides an encapsulated namespace with a POSIX like API directly on top of the DAOS API. Applications can link directly to the DFS library and use the DFS API for direct user-space access to the DAOS stack through the DFS API. A FUSE plugin over the DFS library (dfuse) is also provided to support direct access to POSIX calls through FUSE over the DAOS stack. The primary support provided in this release provides loose POSIX consistency in terms of metadata and assumes applications generate conflict-free operations, otherwise, the behavior is undefined. FUSE adds stricter consistency on top of the DFS layer, but that consistency is limited to a node local instance of the dfuse mount.","title":"Basic POSIX I/O Support"},{"location":"release/releaseNote_v1_0/#replication-and-self-healing-preview","text":"In DAOS, if the data is replicated with multiple copies on different targets, once one of the targets fail, the data on it will be rebuilt on the other targets. This reduces the data redundancy that would be impacted by the target failure. Self-healing in DAOS 1.0 is a preview feature, and it will not be enabled automatically when targets are failed; instead it can only be enabled manually by the dmg exclude command. In future versions, DAOS will support erasure coding to protect the data. At that time, the rebuild process will be updated accordingly.","title":"Replication and self-healing (preview)"},{"location":"release/releaseNote_v1_0/#document-updates","text":"All documents supporting the https://daos-stack.github.io/ site have been refreshed and re-organized for this release. Design documents in the DAOS Source repository have also been refreshed for this release.","title":"Document updates"},{"location":"release/releaseNote_v1_0/#known-issues","text":"","title":"Known Issues"},{"location":"release/releaseNote_v1_0/#the-dmg-storage-scan-may-report-incorrect-numa-socket-id","text":"The ndctl package maintainers have confirmed that this is a kernel regression that has been resolved in CentOS 8. Some DAOS nodes may not report the correct NUMA socket ID when running a \"dmg storage scan.\" This appears to be a regression in the CentOS7.7 kernel rather than an ndctl issue. This is due to different versions of ndctl provisioning different JSON namespace details (storage scan command reads the \"numa_node\" field).","title":"The dmg storage scan may report incorrect NUMA socket ID"},{"location":"release/releaseNote_v1_0/#psm-over-opa-is-not-fully-functional","text":"If you must evaluate DAOS on an OPA fabric, we recommend using IP over fabric/sockets for evaluation. For benchmarking, PSM2 over OPA offers a better picture of DAOS performance, but the PSM2 provider is not fully functional. For a discussion of issues and options, contact us via the mailing list .","title":"PSM over OPA is not fully functional"},{"location":"release/releaseNote_v1_0/#replication-and-self-healing","text":"While replication and self-healing features have been fully implemented, those features haven't been thoroughly tested in 1.0. As a result, they are supported as preview features and will be fully supported in the next release. The storage node fault detection has thus been disabled by default and failed storage nodes have to be excluded manually to trigger automatic repair. Please refer to the [Pool Modifications] (https://daos-stack.github.io/admin/pool_operations/#pool-modifications) section of the administration guide for more information.","title":"Replication and Self-healing"},{"location":"release/releaseNote_v1_0/#limited-bandwidth-to-scm-with-some-updatewrite-operations","text":"With a configuration of only Intel(R) Optane Pmem for storage in a DAOS pool (no SSDs), a known limitation currently exists on the write/update performance with bulk transfers to the SCM with all network providers which limits the BW per storage server.","title":"Limited bandwidth to SCM with some update/write operations"},{"location":"release/releaseNote_v1_0/#aggregation-issue","text":"The aggregation service is only activated after the system has idled for more than 5 seconds, so the aggregation is always suspended if there are sustained I/O requests from application. As a result, storage node will run out of SCM space even there is plenty of free space in SSD.","title":"Aggregation Issue"},{"location":"release/releaseNote_v1_0/#fixed-issues-details","text":"First release, this section will be updated in subsequent releases","title":"Fixed Issues Details"},{"location":"release/releaseNote_v1_0/#change-log","text":"No changes for this first release.","title":"Change Log"},{"location":"user/container/","text":"Container Management \u00b6 DAOS containers are the unit of data management for users. Container Creation/Destroy \u00b6 Containers can be created and destroyed through the daos_cont_create/destroy() functions exported by the DAOS API. A user tool called daos is also provided to manage containers. Note In DAOS 1.0, in order to use the daos command the following environment variables need to be set (this is no longer needed in later versions of DAOS): For Omni-Path: export OFI_INTERFACE=\"ib0\"; export CRT_PHY_ADDR_STR=\"ofi+psm2\" For InfiniBand: export OFI_INTERFACE=\"ib0\"; export CRT_PHY_ADDR_STR=\"ofi+verbs;ofi_rxm\"; export OFI_DOMAIN=\"mlx5_0\" To create a container: $ daos cont create --pool=a171434a-05a5-4671-8fe2-615aa0d05094 --svc=0 Successfully created container 008123fc-6b6c-4768-a88a-a2a5ef34a1a2 The container type (i.e., POSIX or HDF5) can be passed via the --type option. As shown below, the pool UUID, container UUID, and container attributes can be stored in the extended attributes of a POSIX file or directory for convenience. Then subsequent invocations of the daos tools need to reference the path to the POSIX file or directory. $ daos cont create --pool=a171434a-05a5-4671-8fe2-615aa0d05094 \\ --svc=0 --path=/tmp/mycontainer --type=POSIX --oclass=large \\ --chunk_size=4K Successfully created container 419b7562-5bb8-453f-bd52-917c8f5d80d1 type POSIX $ daos container query --svc=0 --path=/tmp/mycontainer Pool UUID: a171434a-05a5-4671-8fe2-615aa0d05094 Container UUID: 419b7562-5bb8-453f-bd52-917c8f5d80d1 Number of snapshots: 0 Latest Persistent Snapshot: 0 DAOS Unified Namespace Attributes on path /tmp/mycontainer: Container Type: POSIX Object Class: large Chunk Size: 4096 Container Properties \u00b6 At creation time, a list of container properties can be specified: Container Property Description DAOS_PROP_CO_LABEL A string that a user can associate with a container. e.g., \"Cat Pics\" or \"ResNet-50 training data\" DAOS_PROP_CO_LAYOUT_TYPE The container type (POSIX, MPI-IO, HDF5, ...) DAOS_PROP_CO_LAYOUT_VER A version of the layout that can be used by I/O middleware and application to handle interoperability. DAOS_PROP_CO_REDUN_FAC The redundancy factor that drives the minimal data protection required for objects stored in the container. e.g., RF1 means no data protection, RF3 only allows 3-way replication or erasure code N+2. DAOS_PROP_CO_REDUN_LVL The fault domain level that should be used to place data redundancy information (e.g., storage nodes, racks...). This information will be eventually consumed to determine object placement. While those properties are currently stored persistently with container metadata, many of them are still under development. The ability to modify some of these properties on an existing container will also be provided in a future release. Data Integrity \u00b6 DAOS allows to detect and fix (when data protection is enabled) silent data corruptions. This is done by calculating checksums for both data and metadata in the DAOS library on the client side and storing those checksums persistently in SCM. The checksums will then be validated on access and on update/write as well on the server side if server verify option is enabled. Corrupted data will never be returned to the application. When a corruption is detected, DAOS will try to read from a different replica, if any. If the original data cannot be recovered, then an error will be reported to the application. To enable and configure checksums, the following container properties are used during container create. DAOS_PROP_CO_CSUM : Type of checksum algorithm to use. Supported values are DAOS_PROP_CO_CSUM_OFF, // default DAOS_PROP_CO_CSUM_CRC16, DAOS_PROP_CO_CSUM_CRC32, DAOS_PROP_CO_CSUM_CRC64, DAOS_PROP_CO_CSUM_SHA1, DAOS_PROP_CO_CSUM_SHA256, DAOS_PROP_CO_CSUM_SHA512 DAOS_PROP_CO_CSUM_CHUNK_SIZE : defines the chunk size used for creating checksums of array types. (default is 32K). DAOS_PROP_CO_CSUM_SERVER_VERIFY : Because of the probable decrease to IOPS, in most cases, it is not desired to verify checksums on an object update on the server side. It is sufficient for the client to verify on a fetch because any data corruption, whether on the object update, storage, or fetch, will be caught. However, there is an advantage to knowing if corruption happens on an update. The update would fail right away, indicating to the client to retry the RPC or report an error to upper levels. Note Note that currently, once a container is created, its checksum configuration cannot be changed. Warning The checksum feature is only supported in DAOS 1.2. Inline Deduplication (Preview) \u00b6 Data deduplication (dedup) is a process that allows to eliminate duplicated data copies in order to decrease capacity requirements. DAOS has some initial support of inline dedup. When dedup is enabled, each DAOS server maintains a per-pool table indexing extents by their hash (i.e. checksum). Any new I/Os bigger than the deduplication threshold will thus be looked up in this table to find out whether an existing extent with the same signature has already been stored. If an extent is found, then two options are provided: Transferring the data from the client to the server and doing a memory compare (i.e. memcmp) of the two extents to verify that they are indeed identical. Trusting the hash function and skipping the data transfer. To minimize issue with hash collision, a cryptographic hash function (i.e. SHA256) is used in this case. The benefit of this approarch is that the data to be written does not need to be transferred to the server. Data processing is thus greatly accelerated. The inline dedup feature can be enabled on a per-container basis. To enable and configure dedup, the following container properties are used: DAOS_PROP_CO_DEDUP : Type of dedup mechanism to use. Supported values are DAOS_PROP_CO_DEDUP_OFF, // default DAOS_PROP_CO_DEDUP_MEMCMP, // memory compare DAOS_PROP_CO_CSUM_HASH // hash-based using SHA256 DAOS_PROP_CO_DEDUP_THRESHOLD : defines the minimal I/O size to consider the I/O for dedup (default is 4K). Warning Dedup is a feature preview in 1.2 (i.e. master) and has some known limitations. Aggregation of deduplicated extents isn't supported and the checksum tree isn't persistent yet. This means that aggregation is disabled for a container with dedplication enabled and duplicated extents won't be matched after a server restart. Compression & Encryption \u00b6 The DAOS_PROP_CO_COMPRESS and DAOS_PROP_CO_ENCRYPT properties are reserved for configuring respectively online compression and encryption. These features are currently not on the roadmap. Snapshot & Rollback \u00b6 Similar to container create/destroy, a container can be snapshotted through the DAOS API by calling daos_cont_create_snap(). Additional functions are provided to destroy and list container snapshots. The API also provides the ability to subscribe to container snapshot events and to rollback the content of a container to a previous snapshot, but those operations are not yet fully implemented. This section will be updated once support for container snapshot is supported by the daos tool. The DAOS_PROP_CO_SNAPSHOT_MAX property is used to limit the maximum number of snapshots to retain. When a new snapshot is taken, and the threshold is reached, the oldest snapshot will be automatically deleted. Rolling back the content of a container to a snapshot is planned for future DAOS versions. User Attributes \u00b6 Similar to POSIX extended attributes, users can attach some metadata to each container through the daos_cont_{list/get/set}_attr() API. Access Control Lists \u00b6 Client user and group access for containers is controlled by Access Control Lists (ACLs) . Access-controlled container accesses include: Opening the container for access. Reading and writing data in the container. Reading and writing objects. Getting, setting, and listing user attributes. Getting, setting, and listing snapshots. Deleting the container (if the pool does not grant the user permission). Getting and setting container properties. Getting and modifying the container ACL. Modifying the container's owner. This is reflected in the set of supported container permissions . Pool vs. Container Permissions \u00b6 In general, pool permissions are separate from container permissions, and access to one does not guarantee access to the other. However, a user must have permission to connect to a container's pool before they can access the container in any way, regardless of their permissions on that container. Once the user has connected to a pool, container access decisions are based on the individual container ACL. A user need not have read/write access to a pool in order to open a container with read/write access, for example. There is one situation in which the pool can grant a container-level permission: Container deletion. If a user has Delete permission on a pool, this grants them the ability to delete any container in the pool, regardless of their permissions on that container. If the user does not have Delete permission on the pool, they will only be able to delete containers for which they have been explicitly granted Delete permission in the container's ACL. !!! note: In DAOS version 1.0, permissions are set on the pool level and all containers in the pool inherit the permissions of the pool. Starting with DAOS version 1.2, pool and container permissions are controlled individually. Creating Containers with Custom ACL \u00b6 To create a container with a custom ACL: $ daos cont create --pool=<UUID> --svc=<rank> --acl-file=<path> The ACL file format is detailed in the ACL section . Displaying a Container's ACL \u00b6 To view a container's ACL: $ daos cont get-acl --pool=<UUID> --svc=<rank> --cont=<UUID> The output is in the same string format used in the ACL file during creation, with one ACE per line. Modifying a Container's ACL \u00b6 For all of these commands using an ACL file, the ACL file must be in the format noted above for container creation. Overwriting the ACL \u00b6 To replace a container's ACL with a new ACL: $ daos cont overwrite-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --acl-file=<path> Adding and Updating ACEs \u00b6 To add or update multiple entries in an existing container ACL: $ daos cont update-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --acl-file=<path> To add or update a single entry in an existing container ACL: $ daos cont update-acl --pool=<UUID> --svc=<rank> --cont=<UUID> --entry <ACE> If there is no existing entry for the principal in the ACL, the new entry is added to the ACL. If there is already an entry for the principal, that entry is replaced with the new one. Removing an ACE \u00b6 To delete an entry for a given principal in an existing container ACL: $ daos cont delete-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --principal=<principal> The principal corresponds to the principal portion of an ACE that was set during container creation or a previous container ACL operation. For the delete operation, the principal argument must be formatted as follows: Named user: u:username@ Named group: g:groupname@ Special principals: OWNER@ GROUP@ EVERYONE@ The entry for that principal will be completely removed. This does not always mean that the principal will have no access. Rather, their access to the container will be decided based on the remaining ACL rules. Ownership \u00b6 The ownership of the container corresponds to the special principals OWNER@ and GROUP@ in the ACL. These values are a part of the container properties. They may be set on container creation and changed later. Privileges \u00b6 The owner-user ( OWNER@ ) has implicit privileges on their container. The owner-user can always open the container, and has set-ACL (A) and get-ACL (a) permissions. These permissions are included alongside any permissions that the user was explicitly granted by entries in the ACL. Because the owner's special permissions are implicit, they apply to access control decisions even if they do not appear in the OWNER@ entry, and even if the OWNER@ entry is deleted. The owner-group ( GROUP@ ) has no special permissions outside what they are granted by the ACL. Creating Containers with Specific Ownership \u00b6 The default owner user and group are the effective user and group of the user creating the container. However, a specific user and/or group may be specified at container creation time. $ daos cont create --pool=<UUID> --svc=<rank> --user=<owner-user> \\ --group=<owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals . Changing Ownership \u00b6 To change the owner user: $ daos cont set-owner --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --user=<owner-user> To change the owner group: $ daos cont set-owner --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --group=<owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals .","title":"Container Management"},{"location":"user/container/#container-management","text":"DAOS containers are the unit of data management for users.","title":"Container Management"},{"location":"user/container/#container-creationdestroy","text":"Containers can be created and destroyed through the daos_cont_create/destroy() functions exported by the DAOS API. A user tool called daos is also provided to manage containers. Note In DAOS 1.0, in order to use the daos command the following environment variables need to be set (this is no longer needed in later versions of DAOS): For Omni-Path: export OFI_INTERFACE=\"ib0\"; export CRT_PHY_ADDR_STR=\"ofi+psm2\" For InfiniBand: export OFI_INTERFACE=\"ib0\"; export CRT_PHY_ADDR_STR=\"ofi+verbs;ofi_rxm\"; export OFI_DOMAIN=\"mlx5_0\" To create a container: $ daos cont create --pool=a171434a-05a5-4671-8fe2-615aa0d05094 --svc=0 Successfully created container 008123fc-6b6c-4768-a88a-a2a5ef34a1a2 The container type (i.e., POSIX or HDF5) can be passed via the --type option. As shown below, the pool UUID, container UUID, and container attributes can be stored in the extended attributes of a POSIX file or directory for convenience. Then subsequent invocations of the daos tools need to reference the path to the POSIX file or directory. $ daos cont create --pool=a171434a-05a5-4671-8fe2-615aa0d05094 \\ --svc=0 --path=/tmp/mycontainer --type=POSIX --oclass=large \\ --chunk_size=4K Successfully created container 419b7562-5bb8-453f-bd52-917c8f5d80d1 type POSIX $ daos container query --svc=0 --path=/tmp/mycontainer Pool UUID: a171434a-05a5-4671-8fe2-615aa0d05094 Container UUID: 419b7562-5bb8-453f-bd52-917c8f5d80d1 Number of snapshots: 0 Latest Persistent Snapshot: 0 DAOS Unified Namespace Attributes on path /tmp/mycontainer: Container Type: POSIX Object Class: large Chunk Size: 4096","title":"Container Creation/Destroy"},{"location":"user/container/#container-properties","text":"At creation time, a list of container properties can be specified: Container Property Description DAOS_PROP_CO_LABEL A string that a user can associate with a container. e.g., \"Cat Pics\" or \"ResNet-50 training data\" DAOS_PROP_CO_LAYOUT_TYPE The container type (POSIX, MPI-IO, HDF5, ...) DAOS_PROP_CO_LAYOUT_VER A version of the layout that can be used by I/O middleware and application to handle interoperability. DAOS_PROP_CO_REDUN_FAC The redundancy factor that drives the minimal data protection required for objects stored in the container. e.g., RF1 means no data protection, RF3 only allows 3-way replication or erasure code N+2. DAOS_PROP_CO_REDUN_LVL The fault domain level that should be used to place data redundancy information (e.g., storage nodes, racks...). This information will be eventually consumed to determine object placement. While those properties are currently stored persistently with container metadata, many of them are still under development. The ability to modify some of these properties on an existing container will also be provided in a future release.","title":"Container Properties"},{"location":"user/container/#data-integrity","text":"DAOS allows to detect and fix (when data protection is enabled) silent data corruptions. This is done by calculating checksums for both data and metadata in the DAOS library on the client side and storing those checksums persistently in SCM. The checksums will then be validated on access and on update/write as well on the server side if server verify option is enabled. Corrupted data will never be returned to the application. When a corruption is detected, DAOS will try to read from a different replica, if any. If the original data cannot be recovered, then an error will be reported to the application. To enable and configure checksums, the following container properties are used during container create. DAOS_PROP_CO_CSUM : Type of checksum algorithm to use. Supported values are DAOS_PROP_CO_CSUM_OFF, // default DAOS_PROP_CO_CSUM_CRC16, DAOS_PROP_CO_CSUM_CRC32, DAOS_PROP_CO_CSUM_CRC64, DAOS_PROP_CO_CSUM_SHA1, DAOS_PROP_CO_CSUM_SHA256, DAOS_PROP_CO_CSUM_SHA512 DAOS_PROP_CO_CSUM_CHUNK_SIZE : defines the chunk size used for creating checksums of array types. (default is 32K). DAOS_PROP_CO_CSUM_SERVER_VERIFY : Because of the probable decrease to IOPS, in most cases, it is not desired to verify checksums on an object update on the server side. It is sufficient for the client to verify on a fetch because any data corruption, whether on the object update, storage, or fetch, will be caught. However, there is an advantage to knowing if corruption happens on an update. The update would fail right away, indicating to the client to retry the RPC or report an error to upper levels. Note Note that currently, once a container is created, its checksum configuration cannot be changed. Warning The checksum feature is only supported in DAOS 1.2.","title":"Data Integrity"},{"location":"user/container/#inline-deduplication-preview","text":"Data deduplication (dedup) is a process that allows to eliminate duplicated data copies in order to decrease capacity requirements. DAOS has some initial support of inline dedup. When dedup is enabled, each DAOS server maintains a per-pool table indexing extents by their hash (i.e. checksum). Any new I/Os bigger than the deduplication threshold will thus be looked up in this table to find out whether an existing extent with the same signature has already been stored. If an extent is found, then two options are provided: Transferring the data from the client to the server and doing a memory compare (i.e. memcmp) of the two extents to verify that they are indeed identical. Trusting the hash function and skipping the data transfer. To minimize issue with hash collision, a cryptographic hash function (i.e. SHA256) is used in this case. The benefit of this approarch is that the data to be written does not need to be transferred to the server. Data processing is thus greatly accelerated. The inline dedup feature can be enabled on a per-container basis. To enable and configure dedup, the following container properties are used: DAOS_PROP_CO_DEDUP : Type of dedup mechanism to use. Supported values are DAOS_PROP_CO_DEDUP_OFF, // default DAOS_PROP_CO_DEDUP_MEMCMP, // memory compare DAOS_PROP_CO_CSUM_HASH // hash-based using SHA256 DAOS_PROP_CO_DEDUP_THRESHOLD : defines the minimal I/O size to consider the I/O for dedup (default is 4K). Warning Dedup is a feature preview in 1.2 (i.e. master) and has some known limitations. Aggregation of deduplicated extents isn't supported and the checksum tree isn't persistent yet. This means that aggregation is disabled for a container with dedplication enabled and duplicated extents won't be matched after a server restart.","title":"Inline Deduplication (Preview)"},{"location":"user/container/#compression-encryption","text":"The DAOS_PROP_CO_COMPRESS and DAOS_PROP_CO_ENCRYPT properties are reserved for configuring respectively online compression and encryption. These features are currently not on the roadmap.","title":"Compression &amp; Encryption"},{"location":"user/container/#snapshot-rollback","text":"Similar to container create/destroy, a container can be snapshotted through the DAOS API by calling daos_cont_create_snap(). Additional functions are provided to destroy and list container snapshots. The API also provides the ability to subscribe to container snapshot events and to rollback the content of a container to a previous snapshot, but those operations are not yet fully implemented. This section will be updated once support for container snapshot is supported by the daos tool. The DAOS_PROP_CO_SNAPSHOT_MAX property is used to limit the maximum number of snapshots to retain. When a new snapshot is taken, and the threshold is reached, the oldest snapshot will be automatically deleted. Rolling back the content of a container to a snapshot is planned for future DAOS versions.","title":"Snapshot &amp; Rollback"},{"location":"user/container/#user-attributes","text":"Similar to POSIX extended attributes, users can attach some metadata to each container through the daos_cont_{list/get/set}_attr() API.","title":"User Attributes"},{"location":"user/container/#access-control-lists","text":"Client user and group access for containers is controlled by Access Control Lists (ACLs) . Access-controlled container accesses include: Opening the container for access. Reading and writing data in the container. Reading and writing objects. Getting, setting, and listing user attributes. Getting, setting, and listing snapshots. Deleting the container (if the pool does not grant the user permission). Getting and setting container properties. Getting and modifying the container ACL. Modifying the container's owner. This is reflected in the set of supported container permissions .","title":"Access Control Lists"},{"location":"user/container/#pool-vs-container-permissions","text":"In general, pool permissions are separate from container permissions, and access to one does not guarantee access to the other. However, a user must have permission to connect to a container's pool before they can access the container in any way, regardless of their permissions on that container. Once the user has connected to a pool, container access decisions are based on the individual container ACL. A user need not have read/write access to a pool in order to open a container with read/write access, for example. There is one situation in which the pool can grant a container-level permission: Container deletion. If a user has Delete permission on a pool, this grants them the ability to delete any container in the pool, regardless of their permissions on that container. If the user does not have Delete permission on the pool, they will only be able to delete containers for which they have been explicitly granted Delete permission in the container's ACL. !!! note: In DAOS version 1.0, permissions are set on the pool level and all containers in the pool inherit the permissions of the pool. Starting with DAOS version 1.2, pool and container permissions are controlled individually.","title":"Pool vs. Container Permissions"},{"location":"user/container/#creating-containers-with-custom-acl","text":"To create a container with a custom ACL: $ daos cont create --pool=<UUID> --svc=<rank> --acl-file=<path> The ACL file format is detailed in the ACL section .","title":"Creating Containers with Custom ACL"},{"location":"user/container/#displaying-a-containers-acl","text":"To view a container's ACL: $ daos cont get-acl --pool=<UUID> --svc=<rank> --cont=<UUID> The output is in the same string format used in the ACL file during creation, with one ACE per line.","title":"Displaying a Container's ACL"},{"location":"user/container/#modifying-a-containers-acl","text":"For all of these commands using an ACL file, the ACL file must be in the format noted above for container creation.","title":"Modifying a Container's ACL"},{"location":"user/container/#overwriting-the-acl","text":"To replace a container's ACL with a new ACL: $ daos cont overwrite-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --acl-file=<path>","title":"Overwriting the ACL"},{"location":"user/container/#adding-and-updating-aces","text":"To add or update multiple entries in an existing container ACL: $ daos cont update-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --acl-file=<path> To add or update a single entry in an existing container ACL: $ daos cont update-acl --pool=<UUID> --svc=<rank> --cont=<UUID> --entry <ACE> If there is no existing entry for the principal in the ACL, the new entry is added to the ACL. If there is already an entry for the principal, that entry is replaced with the new one.","title":"Adding and Updating ACEs"},{"location":"user/container/#removing-an-ace","text":"To delete an entry for a given principal in an existing container ACL: $ daos cont delete-acl --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --principal=<principal> The principal corresponds to the principal portion of an ACE that was set during container creation or a previous container ACL operation. For the delete operation, the principal argument must be formatted as follows: Named user: u:username@ Named group: g:groupname@ Special principals: OWNER@ GROUP@ EVERYONE@ The entry for that principal will be completely removed. This does not always mean that the principal will have no access. Rather, their access to the container will be decided based on the remaining ACL rules.","title":"Removing an ACE"},{"location":"user/container/#ownership","text":"The ownership of the container corresponds to the special principals OWNER@ and GROUP@ in the ACL. These values are a part of the container properties. They may be set on container creation and changed later.","title":"Ownership"},{"location":"user/container/#privileges","text":"The owner-user ( OWNER@ ) has implicit privileges on their container. The owner-user can always open the container, and has set-ACL (A) and get-ACL (a) permissions. These permissions are included alongside any permissions that the user was explicitly granted by entries in the ACL. Because the owner's special permissions are implicit, they apply to access control decisions even if they do not appear in the OWNER@ entry, and even if the OWNER@ entry is deleted. The owner-group ( GROUP@ ) has no special permissions outside what they are granted by the ACL.","title":"Privileges"},{"location":"user/container/#creating-containers-with-specific-ownership","text":"The default owner user and group are the effective user and group of the user creating the container. However, a specific user and/or group may be specified at container creation time. $ daos cont create --pool=<UUID> --svc=<rank> --user=<owner-user> \\ --group=<owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals .","title":"Creating Containers with Specific Ownership"},{"location":"user/container/#changing-ownership","text":"To change the owner user: $ daos cont set-owner --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --user=<owner-user> To change the owner group: $ daos cont set-owner --pool=<UUID> --svc=<rank> --cont=<UUID> \\ --group=<owner-group> The user and group names are case sensitive and must be formatted as DAOS ACL user/group principals .","title":"Changing Ownership"},{"location":"user/hdf5/","text":"HDF5 Support \u00b6 The Hierarchical Data Format Version 5 (HDF5) specification and tools are maintained by the HDF Group (https://www.hdfgroup.org/). Applications that use HDF5 can utilize DAOS in two ways: HDF5 over MPI-IO \u00b6 Parallel HDF5 is typically layered on top of MPI-IO. By building HDF5 and the user application with an MPI stack that includes the DAOS support for MPI-IO, such HDF5 applications can be run on top of DAOS. See the MPI-IO section for instructions on how to build and run applications with MPI-IO DAOS support. HDF5 DAOS VOL Connector \u00b6 A HDF5 DAOS connector is available from the HDF Group. Please refer to the HDF5 DAOS VOL Connector Users Guide for instructions on how to build and use HDF5 with this DAOS VOL connector. The presentation Advancing HDF5\u2019s Parallel I/O for Exascale with DAOS from the HDF Users Group 2020 describes the HDF5 DAOS VOL Connector Project and its current status. The video of that presentation is also available online.","title":"HDF5 Support"},{"location":"user/hdf5/#hdf5-support","text":"The Hierarchical Data Format Version 5 (HDF5) specification and tools are maintained by the HDF Group (https://www.hdfgroup.org/). Applications that use HDF5 can utilize DAOS in two ways:","title":"HDF5 Support"},{"location":"user/hdf5/#hdf5-over-mpi-io","text":"Parallel HDF5 is typically layered on top of MPI-IO. By building HDF5 and the user application with an MPI stack that includes the DAOS support for MPI-IO, such HDF5 applications can be run on top of DAOS. See the MPI-IO section for instructions on how to build and run applications with MPI-IO DAOS support.","title":"HDF5 over MPI-IO"},{"location":"user/hdf5/#hdf5-daos-vol-connector","text":"A HDF5 DAOS connector is available from the HDF Group. Please refer to the HDF5 DAOS VOL Connector Users Guide for instructions on how to build and use HDF5 with this DAOS VOL connector. The presentation Advancing HDF5\u2019s Parallel I/O for Exascale with DAOS from the HDF Users Group 2020 describes the HDF5 DAOS VOL Connector Project and its current status. The video of that presentation is also available online.","title":"HDF5 DAOS VOL Connector"},{"location":"user/interface/","text":"Native Programming Interface \u00b6 Building against the DAOS library \u00b6 To build application or I/O middleware against the native DAOS API, include the daos.h header file in your program and link with -Ldaos . Examples are available under src/tests . DAOS API Reference \u00b6 libdaos is written in C and uses Doxygen comments that are added to C header files. The Doxygen documentation is available here . Python Bindings \u00b6 A python module called PyDAOS provides the DAOS API to python users. pydaos \u00b6 pydaos provides a native DAOS python interface exported by a C module. It integrates the DAOS key-value store API with python dictionaries. Only strings are supported for both the key and value for now. Key-value pairs can be inserted/looked up one at a time (see put/get) or in bulk (see bput/bget) taking a python dict as an input. The bulk operations are issued in parallel (up to 16 operations in flight) to maximize the operation rate. Key-value pairs are deleted via the put/bput operations by setting the value to either None or the empty string. Once deleted, the key won't be reported during iteration. It also supports the del operation via 'del dkv.key'. The DAOS KV objects behave like a python dictionary and supports: 'dkv[key]' which invokes 'dkv.get(key)' 'dkv[key] = val' which invokes 'dkv.put(key, val)' 'for key in dkv:' allows to walk through the key space via the support of python iterators 'if key is in dkv:' allows to test whether a give key is present in the DAOS KV store. 'len(dkv)' returns the number of key-value pairs. 'bool(dkv)' reports 'False' if there is no key-value pairs in the DAOS KV and 'True' otherwise. Python iterators are supported, which means that \"for key in kvobj:\" will allow you to walk through the key space. For each method, a PyDError exception is raised with a proper DAOS error code (in string format) if the operation cannot be completed. Both python 2.7 and 3.x are supported. pydaos.raw \u00b6 The pydaos.raw submodule provides access to DAOS API functionality via Ctypes and was developed with an emphasis on test use cases. While the majority of unit tests are written in C, higher-level tests are written primarily using the Python API. Interfaces are provided for accessing DAOS management and DAOS API functionality from Python. This higher level interface allows a faster turnaround time on implementing test cases for DAOS. Layout \u00b6 The Python API is split into several files based on functionality: The Python object API: daos_api.py . The mapping of C structures to Python classes daos_cref.py High-level abstraction classes exist to manipulate DAOS storage: class DaosPool(object) class DaosContainer(object) class DaosObj(object) class IORequest(object) DaosPool is a Python class representing a DAOS pool. All pool-related functionality is exposed from this class. Operations such as creating/destroying a pool, connecting to a pool, and adding a target to a storage pool are supported. DaosContainer is a Python class representing a DAOS container. As with the DaosPool class, all container-related functionality is exposed here. This class also exposes abstracted wrapper functions for the flow of creating and committing an object to a DAOS container. DaosObj is a Python class representing a DAOS object. Functionality such as creating/deleting objects in a container, 'punching' objects (delete an object from the specified transaction only), and object query. IORequest is a Python class representing a read or write request against a DAOS object. Several classes exist for management purposes as well: class DaosContext(object) class DaosLog class DaosApiError(Exception) DaosContext is a wrapper around the DAOS libraries. It is initialized with the path where DAOS libraries can be found. DaosLog exposes functionality to write messages to the DAOS client log. DaosApiError is a custom exception class raised by the API internally in the event of a failed DAOS action. Most functions exposed in the DAOS C API support both synchronous and asynchronous execution, and the Python API exposes this same functionality. Each API takes an input event. DaosEvent is the Python representation of this event. If the input event is NULL , the call is synchronous. If an event is supplied, the function will return immediately after submitting API requests to the underlying stack and the user can poll and query the event for completion. Ctypes \u00b6 Ctypes is a built-in Python module for interfacing Python with existing libraries written in C/C++. The Python API is built as an object-oriented wrapper around the DAOS libraries utilizing ctypes. Ctypes documentation can be found here https://docs.python.org/3/library/ctypes.html The following demonstrates a simplified example of creating a Python wrapper for the C function daos_pool_tgt_exclude_out , with each input parameter to the C function being cast via ctypes. This also demonstrates struct representation via ctypes: // daos_exclude.c #include <stdio.h> int daos_pool_tgt_exclude_out(const uuid_t uuid, const char *grp, const d_rank_list_t *svc, struct d_tgt_list *tgts, daos_event_t *ev); All input parameters must be represented via ctypes. If a struct is required as an input parameter, a corresponding Python class can be created. For struct d_tgt_list : struct d_tgt_list { d_rank_t *tl_ranks; int32_t *tl_tgts; uint32_t tl_nr; }; class DTgtList(ctypes.Structure): _fields_ = [(\"tl_ranks\", ctypes.POINTER(ctypes.c_uint32)), (\"tl_tgts\", ctypes.POINTER(ctypes.c_int32)), (\"tl_nr\", ctypes.c_uint32)] The shared object containing daos_pool_tgt_exclude_out can then be imported and the function called directly: # api.py import ctypes import uuid import conversion # utility library to convert C <---> Python UUIDs # init python variables p_uuid = str(uuid.uuid4()) p_tgts = 2 p_ranks = DaosPool.__pylist_to_array([2]) # cast python variables via ctypes as necessary c_uuid = str_to_c_uuid(p_uuid) c_grp = ctypes.create_string_buffer(b\"daos_group_name\") c_svc = ctypes.POINTER(2) # ensure pointers are cast/passed as such c_tgt_list = ctypes.POINTER(DTgtList(p_ranks, p_tgts, 2))) # again, DTgtList must be passed as pointer # load the shared object my_lib = ctypes.CDLL('/full/path/to/daos_exclude.so') # now call it my_lib.daos_pool_tgt_exclude_out(c_uuid, c_grp, c_svc, c_tgt_list, None) Error Handling \u00b6 The API was designed using the EAFP ( E asier to A sk F orgiveness than get P ermission) idiom. A given function will raise a custom exception on error state, DaosApiError . A user of the API is expected to catch and handle this exception as needed: # catch and log try: daos_some_action() except DaosApiError as e: self.d_log.ERROR(\"My DAOS action encountered an error!\") Logging \u00b6 The Python DAOS API exposes functionality to log messages to the DAOS client log. Messages can be logged as INFO , DEBUG , WARN , or ERR log levels. The DAOS log object must be initialized with the environmental context in which to run: from pydaos.raw import DaosLog self.d_log = DaosLog(self.context) self.d_log.INFO(\"FYI\") self.d_log.DEBUG(\"Debugging code\") self.d_log.WARNING(\"Be aware, may be issues\") self.d_log.ERROR(\"Something went very wrong\") Go Bindings \u00b6 API bindings for Go 2 are also available. https://github.com/daos-stack/daos/blob/master/src/client/pydaos/raw/README.md \u21a9 https://godoc.org/github.com/daos-stack/go-daos/pkg/daos \u21a9","title":"Native Programming Interface"},{"location":"user/interface/#native-programming-interface","text":"","title":"Native Programming Interface"},{"location":"user/interface/#building-against-the-daos-library","text":"To build application or I/O middleware against the native DAOS API, include the daos.h header file in your program and link with -Ldaos . Examples are available under src/tests .","title":"Building against the DAOS library"},{"location":"user/interface/#daos-api-reference","text":"libdaos is written in C and uses Doxygen comments that are added to C header files. The Doxygen documentation is available here .","title":"DAOS API Reference"},{"location":"user/interface/#python-bindings","text":"A python module called PyDAOS provides the DAOS API to python users.","title":"Python Bindings"},{"location":"user/interface/#pydaos","text":"pydaos provides a native DAOS python interface exported by a C module. It integrates the DAOS key-value store API with python dictionaries. Only strings are supported for both the key and value for now. Key-value pairs can be inserted/looked up one at a time (see put/get) or in bulk (see bput/bget) taking a python dict as an input. The bulk operations are issued in parallel (up to 16 operations in flight) to maximize the operation rate. Key-value pairs are deleted via the put/bput operations by setting the value to either None or the empty string. Once deleted, the key won't be reported during iteration. It also supports the del operation via 'del dkv.key'. The DAOS KV objects behave like a python dictionary and supports: 'dkv[key]' which invokes 'dkv.get(key)' 'dkv[key] = val' which invokes 'dkv.put(key, val)' 'for key in dkv:' allows to walk through the key space via the support of python iterators 'if key is in dkv:' allows to test whether a give key is present in the DAOS KV store. 'len(dkv)' returns the number of key-value pairs. 'bool(dkv)' reports 'False' if there is no key-value pairs in the DAOS KV and 'True' otherwise. Python iterators are supported, which means that \"for key in kvobj:\" will allow you to walk through the key space. For each method, a PyDError exception is raised with a proper DAOS error code (in string format) if the operation cannot be completed. Both python 2.7 and 3.x are supported.","title":"pydaos"},{"location":"user/interface/#pydaosraw","text":"The pydaos.raw submodule provides access to DAOS API functionality via Ctypes and was developed with an emphasis on test use cases. While the majority of unit tests are written in C, higher-level tests are written primarily using the Python API. Interfaces are provided for accessing DAOS management and DAOS API functionality from Python. This higher level interface allows a faster turnaround time on implementing test cases for DAOS.","title":"pydaos.raw"},{"location":"user/interface/#layout","text":"The Python API is split into several files based on functionality: The Python object API: daos_api.py . The mapping of C structures to Python classes daos_cref.py High-level abstraction classes exist to manipulate DAOS storage: class DaosPool(object) class DaosContainer(object) class DaosObj(object) class IORequest(object) DaosPool is a Python class representing a DAOS pool. All pool-related functionality is exposed from this class. Operations such as creating/destroying a pool, connecting to a pool, and adding a target to a storage pool are supported. DaosContainer is a Python class representing a DAOS container. As with the DaosPool class, all container-related functionality is exposed here. This class also exposes abstracted wrapper functions for the flow of creating and committing an object to a DAOS container. DaosObj is a Python class representing a DAOS object. Functionality such as creating/deleting objects in a container, 'punching' objects (delete an object from the specified transaction only), and object query. IORequest is a Python class representing a read or write request against a DAOS object. Several classes exist for management purposes as well: class DaosContext(object) class DaosLog class DaosApiError(Exception) DaosContext is a wrapper around the DAOS libraries. It is initialized with the path where DAOS libraries can be found. DaosLog exposes functionality to write messages to the DAOS client log. DaosApiError is a custom exception class raised by the API internally in the event of a failed DAOS action. Most functions exposed in the DAOS C API support both synchronous and asynchronous execution, and the Python API exposes this same functionality. Each API takes an input event. DaosEvent is the Python representation of this event. If the input event is NULL , the call is synchronous. If an event is supplied, the function will return immediately after submitting API requests to the underlying stack and the user can poll and query the event for completion.","title":"Layout"},{"location":"user/interface/#ctypes","text":"Ctypes is a built-in Python module for interfacing Python with existing libraries written in C/C++. The Python API is built as an object-oriented wrapper around the DAOS libraries utilizing ctypes. Ctypes documentation can be found here https://docs.python.org/3/library/ctypes.html The following demonstrates a simplified example of creating a Python wrapper for the C function daos_pool_tgt_exclude_out , with each input parameter to the C function being cast via ctypes. This also demonstrates struct representation via ctypes: // daos_exclude.c #include <stdio.h> int daos_pool_tgt_exclude_out(const uuid_t uuid, const char *grp, const d_rank_list_t *svc, struct d_tgt_list *tgts, daos_event_t *ev); All input parameters must be represented via ctypes. If a struct is required as an input parameter, a corresponding Python class can be created. For struct d_tgt_list : struct d_tgt_list { d_rank_t *tl_ranks; int32_t *tl_tgts; uint32_t tl_nr; }; class DTgtList(ctypes.Structure): _fields_ = [(\"tl_ranks\", ctypes.POINTER(ctypes.c_uint32)), (\"tl_tgts\", ctypes.POINTER(ctypes.c_int32)), (\"tl_nr\", ctypes.c_uint32)] The shared object containing daos_pool_tgt_exclude_out can then be imported and the function called directly: # api.py import ctypes import uuid import conversion # utility library to convert C <---> Python UUIDs # init python variables p_uuid = str(uuid.uuid4()) p_tgts = 2 p_ranks = DaosPool.__pylist_to_array([2]) # cast python variables via ctypes as necessary c_uuid = str_to_c_uuid(p_uuid) c_grp = ctypes.create_string_buffer(b\"daos_group_name\") c_svc = ctypes.POINTER(2) # ensure pointers are cast/passed as such c_tgt_list = ctypes.POINTER(DTgtList(p_ranks, p_tgts, 2))) # again, DTgtList must be passed as pointer # load the shared object my_lib = ctypes.CDLL('/full/path/to/daos_exclude.so') # now call it my_lib.daos_pool_tgt_exclude_out(c_uuid, c_grp, c_svc, c_tgt_list, None)","title":"Ctypes"},{"location":"user/interface/#error-handling","text":"The API was designed using the EAFP ( E asier to A sk F orgiveness than get P ermission) idiom. A given function will raise a custom exception on error state, DaosApiError . A user of the API is expected to catch and handle this exception as needed: # catch and log try: daos_some_action() except DaosApiError as e: self.d_log.ERROR(\"My DAOS action encountered an error!\")","title":"Error Handling"},{"location":"user/interface/#logging","text":"The Python DAOS API exposes functionality to log messages to the DAOS client log. Messages can be logged as INFO , DEBUG , WARN , or ERR log levels. The DAOS log object must be initialized with the environmental context in which to run: from pydaos.raw import DaosLog self.d_log = DaosLog(self.context) self.d_log.INFO(\"FYI\") self.d_log.DEBUG(\"Debugging code\") self.d_log.WARNING(\"Be aware, may be issues\") self.d_log.ERROR(\"Something went very wrong\")","title":"Logging"},{"location":"user/interface/#go-bindings","text":"API bindings for Go 2 are also available. https://github.com/daos-stack/daos/blob/master/src/client/pydaos/raw/README.md \u21a9 https://godoc.org/github.com/daos-stack/go-daos/pkg/daos \u21a9","title":"Go Bindings"},{"location":"user/mpi-io/","text":"MPI-IO Support \u00b6 The Message Passing Interface (MPI) Standard, maintained by the MPI Forum , includes a chapter on MPI-IO. ROMIO is a well-known implementation of MPI-IO and is included in many MPI implementations. DAOS provides its own MPI-IO ROMIO ADIO driver, located in a MPICH fork on the DAOS-Stack GitHub . This driver has been merged in the upstream MPICH repository. MPI Implementations that support DAOS \u00b6 MPICH \u00b6 The DAOS ROMIO ADIO driver has been accepted into MPICH . It is included in mpich-3.4b1 (alpha release) , but not in mpich-3.3.2 (stable release). Intel MPI \u00b6 The Intel MPI Library includes DAOS support since the 2019.8 release . Note that Intel MPI uses libfabric (both 2019.8 and 2019.9 use libfabric-1.10.1-impi ). Care must be taken to ensure that the installed version of libfabric works cleanly with both DAOS and Intel MPI (DAOS 1.0.1 includes libfabric-1.9.0 , and the DAOS 1.1.1 pre-release includes libfabric-1.11.1 ). Open MPI \u00b6 Open MPI 4.0.5 does not yet provide DAOS support. Since one of its MPI-IO implementations is based on ROMIO, it will likely pick up DAOS support in an upcoming release. MVAPICH2 \u00b6 MVAPICH2 2.3.4 does not yet provide DAOS support. Since its MPI-IO implementation is based on ROMIO, it will likely pick up DAOS support in an upcoming release. Building MPI-IO with DAOS Support \u00b6 To build the MPI-IO driver with DAOS support: export MPI_LIB=\"\" git clone https://github.com/daos-stack/mpich cd mpich ./autogen.sh mkdir build; cd build ../configure --prefix=dir --enable-fortran=all --enable-romio \\ --enable-cxx --enable-g=all --enable-debuginfo --with-device=ch3:sock \\ --with-file-system=ufs+daos --with-daos=dir --with-cart=dir make -j8; make install Set the PATH and LD_LIBRARY_PATH to where you want to build your client apps or libs that use MPI to the installed MPICH. Build any client (HDF5, ior, mpi test suites) normally with the mpicc command and mpich library installed above (see child pages). To run an example: Create a DAOS pool on the DAOS server(s). This will return a pool uuid \"puuid\" and service rank list \"svcl\". Create a POSIX type container: daos cont create --pool=puuid --svc=svcl --type=POSIX This will return a container uuid \"cuuid\". At the client side, the following environment variables need to be set: export DAOS_POOL=puuid; export DAOS_SVCL=svcl; export DAOS_CONT=cuuid . Alternatively, the unified namespace mode can be used instead. Run the client application or test. Limitations to the current implementation include: Reading Holes does not return 0, but leaves the buffer untouched. No support for MPI file atomicity, preallocate, or shared file pointers.","title":"MPI-IO Support"},{"location":"user/mpi-io/#mpi-io-support","text":"The Message Passing Interface (MPI) Standard, maintained by the MPI Forum , includes a chapter on MPI-IO. ROMIO is a well-known implementation of MPI-IO and is included in many MPI implementations. DAOS provides its own MPI-IO ROMIO ADIO driver, located in a MPICH fork on the DAOS-Stack GitHub . This driver has been merged in the upstream MPICH repository.","title":"MPI-IO Support"},{"location":"user/mpi-io/#mpi-implementations-that-support-daos","text":"","title":"MPI Implementations that support DAOS"},{"location":"user/mpi-io/#mpich","text":"The DAOS ROMIO ADIO driver has been accepted into MPICH . It is included in mpich-3.4b1 (alpha release) , but not in mpich-3.3.2 (stable release).","title":"MPICH"},{"location":"user/mpi-io/#intel-mpi","text":"The Intel MPI Library includes DAOS support since the 2019.8 release . Note that Intel MPI uses libfabric (both 2019.8 and 2019.9 use libfabric-1.10.1-impi ). Care must be taken to ensure that the installed version of libfabric works cleanly with both DAOS and Intel MPI (DAOS 1.0.1 includes libfabric-1.9.0 , and the DAOS 1.1.1 pre-release includes libfabric-1.11.1 ).","title":"Intel MPI"},{"location":"user/mpi-io/#open-mpi","text":"Open MPI 4.0.5 does not yet provide DAOS support. Since one of its MPI-IO implementations is based on ROMIO, it will likely pick up DAOS support in an upcoming release.","title":"Open MPI"},{"location":"user/mpi-io/#mvapich2","text":"MVAPICH2 2.3.4 does not yet provide DAOS support. Since its MPI-IO implementation is based on ROMIO, it will likely pick up DAOS support in an upcoming release.","title":"MVAPICH2"},{"location":"user/mpi-io/#building-mpi-io-with-daos-support","text":"To build the MPI-IO driver with DAOS support: export MPI_LIB=\"\" git clone https://github.com/daos-stack/mpich cd mpich ./autogen.sh mkdir build; cd build ../configure --prefix=dir --enable-fortran=all --enable-romio \\ --enable-cxx --enable-g=all --enable-debuginfo --with-device=ch3:sock \\ --with-file-system=ufs+daos --with-daos=dir --with-cart=dir make -j8; make install Set the PATH and LD_LIBRARY_PATH to where you want to build your client apps or libs that use MPI to the installed MPICH. Build any client (HDF5, ior, mpi test suites) normally with the mpicc command and mpich library installed above (see child pages). To run an example: Create a DAOS pool on the DAOS server(s). This will return a pool uuid \"puuid\" and service rank list \"svcl\". Create a POSIX type container: daos cont create --pool=puuid --svc=svcl --type=POSIX This will return a container uuid \"cuuid\". At the client side, the following environment variables need to be set: export DAOS_POOL=puuid; export DAOS_SVCL=svcl; export DAOS_CONT=cuuid . Alternatively, the unified namespace mode can be used instead. Run the client application or test. Limitations to the current implementation include: Reading Holes does not return 0, but leaves the buffer untouched. No support for MPI file atomicity, preallocate, or shared file pointers.","title":"Building MPI-IO with DAOS Support"},{"location":"user/posix/","text":"POSIX Namespace \u00b6 A regular POSIX namespace can be encapsulated into a DAOS container. This capability is provided by the libdfs library that implements the file and directory abstractions over the native libdaos library. The POSIX emulation can be exposed directly to applications or I/O frameworks (e.g., for frameworks like Spark or TensorFlow, or benchmarks like IOR or mdtest that support different storage backend plugins). It can also be exposed transparently via a FUSE daemon, combined optionally with an interception library to address some of the FUSE performance bottlenecks by delivering full OS bypass for POSIX read/write operations. libdfs \u00b6 The DAOS File System (DFS) is implemented in the libdfs library, and allows a DAOS container to be accessed as a hierarchical POSIX namespace. libdfs supports files, directories, and symbolic links, but not hard links. Access permissions are inherited from the parent pool and are not implemented on a per-file or per-directory basis. setuid() and setgid() programs, as well as supplementary groups, are currently not supported. It is possible to use libdfs in a parallel application from multiple nodes. When the same POSIX container is mounted concurrently by multiple processes, a few limitations exist in DAOS v1.0. In particular: Unlinking a file in one process while another process has the same file open: This may or may not cause an I/O error on the open file. The atomicity of rename operations is not guaranteed. These corner cases will be addressed in a future DAOS release. DFuse \u00b6 DFuse provides DAOS File System access through the standard libc/kernel/VFS POSIX infrastructure. This allows existing applications to use DAOS without modification, and provides a path to upgrade those applications to native DAOS support. Additionally, DFuse provides an Interception Library libioil to transparently allow POSIX clients to talk directly to DAOS servers, providing OS-Bypass for I/O without modifying or recompiling of the application. DFuse builds heavily on DFS. Data written via DFuse can be accessed by DFS and vice versa. DFuse Daemon \u00b6 The dfuse daemon runs a single instance per node to provide a user POSIX access to DAOS. It should be run with the credentials of the user, and typically will be started and stopped on each compute node as part of the prolog and epilog scripts of any resource manager or scheduler in use. One DFuse daemon per node can process requests for multiple clients. A single DFuse instance can provide access to multiple pools and containers concurrently, or can be limited to a single pool, or a single container. Restrictions \u00b6 DFuse is limited to a single user. Access to the filesystem from other users, including root, will not be honored. As a consequence of this, the chown and chgrp calls are not supported. Hard links and special device files, except symbolic links, are not supported, nor are any ACLs. DFuse can run in the foreground, keeping the terminal window open, or it can daemonize to run like a system daemon. However, to do this and still be able to access DAOS it needs to daemonize before calling daos_init() . This in turns means it cannot report some kinds of startup errors either on stdout/stderr or via its return code. When initially starting with DFuse it is recommended to run in foreground mode ( --foreground ) to better observe any failures. Inodes are managed on the local node by DFuse. So while inode numbers will be consistent on a node for the duration of the session, they are not guaranteed to be consistent across restarts of DFuse or across nodes. It is not possible to see pool/container listings through DFuse. So if readdir , ls or others are used, DFuse will return ENOTSUP . Launching \u00b6 DFuse should be run with the credentials (user/group) of the user who will be accessing it, and who owns any pools that will be used. There are two mandatory command-line options, these are: Command-line Option Description --svc=<ranks> service replicas --mountpoint=<path> path to mount dfuse The mount point specified should be an empty directory on the local node that is owned by the user. Additionally, there are several optional command-line options: Command-line Option Description --pool=<uuid> pool uuid to connect to --container=<uuid> container uuid to open --sys-name=<name> DAOS system name --foreground run in foreground --singlethreaded run single threaded When DFuse starts, it will register a single mount with the kernel, at the location specified by the --mountpoint option. This mount will be visible in /proc/mounts , and possibly in the output of df . The contents of multiple pools/containers will be accessible via this single kernel mountpoint. Pool/Container Paths \u00b6 DFuse will only create one kernel level mount point regardless of how it is launched. How POSIX containers are represented within that mount point varies depending on the DFuse command-line options: If both a pool uuid and a container uuid are specified on the command line, then the mount point will map to the root of the container itself. Files can be accessed by simply concatenating the mount point and the name of the file, relative to the root of the container. If neither a pool or container is specified, then pools and container can be accessed by the path <mount point>/<pool uuid>/<container uuid> . However it should be noted that readdir() and therefore ls do not work on either mount points or directories representing pools here. So the pool and container uuids will have to be provided from an external source. If a pool uuid is specified but not a container uuid, then the containers can be accessed by the path <mount point>/<container uuid> . The container uuid will have to be provided from an external source. It is anticipated that in most cases, both pool uuid and container uuid will be used, so the mount point itself will map directly onto a POSIX container. Links into other Containers \u00b6 It is possible to link to other containers in DFuse, where subdirectories within a container resolve not to regular directories, but rather to the root of entirely different POSIX containers. To create a new container and link it into the namespace of an existing one, use the following command. $ daos container create --svc <svc> --type POSIX --pool <pool uuid> --path <path to entry point> The pool uuid should already exist, and the path should specify a location somewhere within a DFuse mount point that resolves to a POSIX container. Once a link is created, it can be accessed through the new path. Following the link is virtually transparent. No container uuid is required. If one is not supplied, it will be created. To destroy a container again, the following command should be used. $ daos container destroy --svc --path <path to entry point> This will both remove the link between the containers and remove the container that was linked to. There is no support for adding links to already existing containers or removing links to containers without also removing the container itself. Information about a container, for example, the presence of an entry point between containers, or the pool and container uuids of the container linked to can be read with the following command. $ daos container info --svc --path <path to entry point> Enabling Caching \u00b6 DFuse in normal mode simply provides a communication path between the kernel and DAOS. However, this can come with a performance impact. To help alleviate this it is possible to turn on caching, both within dfuse itself and by allowing the kernel to cache certain data. Where and when data is cached, there is no attempt made to invalidate the caches based on changes to DAOS, other than simple timeouts. Enabling this option will turn on the following features: Kernel caching of dentries Kernel caching of negative dentries Kernel caching of inodes (file sizes, permissions etc) Kernel caching of file contents Readahead in dfuse and inserting data into kernel cache MMAP write optimization To turn on caching use the --enable-caching command-line option for dfuse. This will enable the feature for all accessed containers. When this option is used, the containers accessed should only be accessed from one node, so it may be necessary to create a container per node in this model. Stopping DFuse \u00b6 When done, the file system can be unmounted via fusermount: $ fusermount3 -u /tmp/daos When this is done, the local DFuse daemon should shut down the mount point, disconnect from the DAOS servers, and exit. You can also verify that the mount point is no longer listed in /proc/mounts . Interception Library \u00b6 An interception library called libioil is available to work with DFuse. This library works in conjunction with DFuse and allows the interception of POSIX I/O calls and issue the I/O operations directly from the application context through libdaos without any application changes. This provides kernel-bypass for I/O data, leading to improved performance. To use this, set LD_PRELOAD to point to the shared library in the DAOS install directory: LD_PRELOAD=/path/to/daos/install/lib/libioil.so LD_PRELOAD=/usr/lib64/libioil.so # when installed from RPMs","title":"POSIX Namespace"},{"location":"user/posix/#posix-namespace","text":"A regular POSIX namespace can be encapsulated into a DAOS container. This capability is provided by the libdfs library that implements the file and directory abstractions over the native libdaos library. The POSIX emulation can be exposed directly to applications or I/O frameworks (e.g., for frameworks like Spark or TensorFlow, or benchmarks like IOR or mdtest that support different storage backend plugins). It can also be exposed transparently via a FUSE daemon, combined optionally with an interception library to address some of the FUSE performance bottlenecks by delivering full OS bypass for POSIX read/write operations.","title":"POSIX Namespace"},{"location":"user/posix/#libdfs","text":"The DAOS File System (DFS) is implemented in the libdfs library, and allows a DAOS container to be accessed as a hierarchical POSIX namespace. libdfs supports files, directories, and symbolic links, but not hard links. Access permissions are inherited from the parent pool and are not implemented on a per-file or per-directory basis. setuid() and setgid() programs, as well as supplementary groups, are currently not supported. It is possible to use libdfs in a parallel application from multiple nodes. When the same POSIX container is mounted concurrently by multiple processes, a few limitations exist in DAOS v1.0. In particular: Unlinking a file in one process while another process has the same file open: This may or may not cause an I/O error on the open file. The atomicity of rename operations is not guaranteed. These corner cases will be addressed in a future DAOS release.","title":"libdfs"},{"location":"user/posix/#dfuse","text":"DFuse provides DAOS File System access through the standard libc/kernel/VFS POSIX infrastructure. This allows existing applications to use DAOS without modification, and provides a path to upgrade those applications to native DAOS support. Additionally, DFuse provides an Interception Library libioil to transparently allow POSIX clients to talk directly to DAOS servers, providing OS-Bypass for I/O without modifying or recompiling of the application. DFuse builds heavily on DFS. Data written via DFuse can be accessed by DFS and vice versa.","title":"DFuse"},{"location":"user/posix/#dfuse-daemon","text":"The dfuse daemon runs a single instance per node to provide a user POSIX access to DAOS. It should be run with the credentials of the user, and typically will be started and stopped on each compute node as part of the prolog and epilog scripts of any resource manager or scheduler in use. One DFuse daemon per node can process requests for multiple clients. A single DFuse instance can provide access to multiple pools and containers concurrently, or can be limited to a single pool, or a single container.","title":"DFuse Daemon"},{"location":"user/posix/#restrictions","text":"DFuse is limited to a single user. Access to the filesystem from other users, including root, will not be honored. As a consequence of this, the chown and chgrp calls are not supported. Hard links and special device files, except symbolic links, are not supported, nor are any ACLs. DFuse can run in the foreground, keeping the terminal window open, or it can daemonize to run like a system daemon. However, to do this and still be able to access DAOS it needs to daemonize before calling daos_init() . This in turns means it cannot report some kinds of startup errors either on stdout/stderr or via its return code. When initially starting with DFuse it is recommended to run in foreground mode ( --foreground ) to better observe any failures. Inodes are managed on the local node by DFuse. So while inode numbers will be consistent on a node for the duration of the session, they are not guaranteed to be consistent across restarts of DFuse or across nodes. It is not possible to see pool/container listings through DFuse. So if readdir , ls or others are used, DFuse will return ENOTSUP .","title":"Restrictions"},{"location":"user/posix/#launching","text":"DFuse should be run with the credentials (user/group) of the user who will be accessing it, and who owns any pools that will be used. There are two mandatory command-line options, these are: Command-line Option Description --svc=<ranks> service replicas --mountpoint=<path> path to mount dfuse The mount point specified should be an empty directory on the local node that is owned by the user. Additionally, there are several optional command-line options: Command-line Option Description --pool=<uuid> pool uuid to connect to --container=<uuid> container uuid to open --sys-name=<name> DAOS system name --foreground run in foreground --singlethreaded run single threaded When DFuse starts, it will register a single mount with the kernel, at the location specified by the --mountpoint option. This mount will be visible in /proc/mounts , and possibly in the output of df . The contents of multiple pools/containers will be accessible via this single kernel mountpoint.","title":"Launching"},{"location":"user/posix/#poolcontainer-paths","text":"DFuse will only create one kernel level mount point regardless of how it is launched. How POSIX containers are represented within that mount point varies depending on the DFuse command-line options: If both a pool uuid and a container uuid are specified on the command line, then the mount point will map to the root of the container itself. Files can be accessed by simply concatenating the mount point and the name of the file, relative to the root of the container. If neither a pool or container is specified, then pools and container can be accessed by the path <mount point>/<pool uuid>/<container uuid> . However it should be noted that readdir() and therefore ls do not work on either mount points or directories representing pools here. So the pool and container uuids will have to be provided from an external source. If a pool uuid is specified but not a container uuid, then the containers can be accessed by the path <mount point>/<container uuid> . The container uuid will have to be provided from an external source. It is anticipated that in most cases, both pool uuid and container uuid will be used, so the mount point itself will map directly onto a POSIX container.","title":"Pool/Container Paths"},{"location":"user/posix/#links-into-other-containers","text":"It is possible to link to other containers in DFuse, where subdirectories within a container resolve not to regular directories, but rather to the root of entirely different POSIX containers. To create a new container and link it into the namespace of an existing one, use the following command. $ daos container create --svc <svc> --type POSIX --pool <pool uuid> --path <path to entry point> The pool uuid should already exist, and the path should specify a location somewhere within a DFuse mount point that resolves to a POSIX container. Once a link is created, it can be accessed through the new path. Following the link is virtually transparent. No container uuid is required. If one is not supplied, it will be created. To destroy a container again, the following command should be used. $ daos container destroy --svc --path <path to entry point> This will both remove the link between the containers and remove the container that was linked to. There is no support for adding links to already existing containers or removing links to containers without also removing the container itself. Information about a container, for example, the presence of an entry point between containers, or the pool and container uuids of the container linked to can be read with the following command. $ daos container info --svc --path <path to entry point>","title":"Links into other Containers"},{"location":"user/posix/#enabling-caching","text":"DFuse in normal mode simply provides a communication path between the kernel and DAOS. However, this can come with a performance impact. To help alleviate this it is possible to turn on caching, both within dfuse itself and by allowing the kernel to cache certain data. Where and when data is cached, there is no attempt made to invalidate the caches based on changes to DAOS, other than simple timeouts. Enabling this option will turn on the following features: Kernel caching of dentries Kernel caching of negative dentries Kernel caching of inodes (file sizes, permissions etc) Kernel caching of file contents Readahead in dfuse and inserting data into kernel cache MMAP write optimization To turn on caching use the --enable-caching command-line option for dfuse. This will enable the feature for all accessed containers. When this option is used, the containers accessed should only be accessed from one node, so it may be necessary to create a container per node in this model.","title":"Enabling Caching"},{"location":"user/posix/#stopping-dfuse","text":"When done, the file system can be unmounted via fusermount: $ fusermount3 -u /tmp/daos When this is done, the local DFuse daemon should shut down the mount point, disconnect from the DAOS servers, and exit. You can also verify that the mount point is no longer listed in /proc/mounts .","title":"Stopping DFuse"},{"location":"user/posix/#interception-library","text":"An interception library called libioil is available to work with DFuse. This library works in conjunction with DFuse and allows the interception of POSIX I/O calls and issue the I/O operations directly from the application context through libdaos without any application changes. This provides kernel-bypass for I/O data, leading to improved performance. To use this, set LD_PRELOAD to point to the shared library in the DAOS install directory: LD_PRELOAD=/path/to/daos/install/lib/libioil.so LD_PRELOAD=/usr/lib64/libioil.so # when installed from RPMs","title":"Interception Library"},{"location":"user/spark/","text":"Getting Started with the DAOS Hadoop Filesystem \u00b6 Here, we describe the steps required to build and deploy the DAOS Hadoop filesystem, and the configurations to access DAOS in Spark and Hadoop. We assume that the DAOS servers and agents have already been deployed in the environment. Otherwise, they can be deployed by following the DAOS Installation Guide . !!!note DAOS support for Spark and Hadoop is not available in DAOS 1.0. It is targeted for the DAOS 1.2 release. Build DAOS Hadoop Filesystem \u00b6 Below are the steps to build the Java jar files for the DAOS Java and DAOS Hadoop filesystem. These jar files are required when running Spark and Hadoop. You can ignore this section if you already have the pre-built jars. $ git clone https://github.com/daos-stack/daos.git $ cd daos $ git checkout <desired branch or commit> ## assume DAOS is built and installed to <daos_install> directory $ cd src/client/java $ mvn clean package -DskipITs -Ddaos.install.path=<daos_install> After build, the package daos-java-<version>-assemble.tgz will be available under distribution/target . Deploy DAOS Hadoop Filesystem \u00b6 After unzipping daos-java-<version>-assemble.tgz , you will get the following files. daos-java-<version>.jar and hadoop-daos-<version>.jar \u00b6 They need to be deployed on every compute node that runs Spark or Hadoop. Place them in a directory, e.g., $SPARK_HOME/jars for Spark and $HADOOP_HOME/share/hadoop/common/lib for Hadoop, which is accessible to all the nodes or copy them to every node. daos-site-example.xml \u00b6 You have two choices, with or without UNS path, to construct DAOS URI. If you choose the second choice, you have to copy the file to your application config directory, e.g., $SPARK_HOME/conf for Spark and $HADOOP_HOME/etc/hadoop for Hadoop. Then do some proper configuration and rename it to daos-site.xml . For the second choice, daos-site.xml is optional. See next section for details. Configure DAOS Hadoop FileSystem \u00b6 DAOS Environment Variable \u00b6 Export all DAOS related env variables and the following env variable in your application, e.g., spark-env.sh for Spark and hadoop-env.sh for Hadoop. The following env enables signal chaining in JVM to better interoperate with DAOS native code that installs its own signal handlers. It ensures that signal calls are intercepted so that they do not actually replace the JVM's signal handlers if the handlers conflict with those already installed by the JVM. Instead, these calls save the new signal handlers, or \"chain\" them behind the JVM-installed handlers. Later, when any of these signals are raised and found not to be targeted at the JVM, the DAOS's handlers are invoked. $ export LD_PRELOAD=<YOUR JDK HOME>/jre/lib/amd64/libjsig.so DAOS URIs \u00b6 DAOS FileSystem binds to schema \"daos\". DAOS URIs are in the format of \"daos://[authority]//[path]\". Both authority and path are optional. There are two types of DAOS URIs, with and without DAOS UNS path depending on where you want the DAOS Filesystem to get initialized and configured. With DAOS UNS Path \u00b6 The simple form of URI is \"daos:///\\<your uns path>[/sub path]\". \"\\<your path>\" is your OS file path created with the daos command or Java DAOS UNS method, DaosUns.create() . The \"[sub path]\" is optional. You can create the UNS path with below command. $ daos cont create --pool <pool UUID> --svc <svc list> -path <your path> --type=POSIX Or $ java -Dpath=\"your path\" -Dpool_id=\"your pool uuid\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns create After creation, you can use below command to see what DAOS properties set to the path. $ getfattr -d -m - <your path> Without DAOS UNS Path \u00b6 The simple form of URI is \"daos:///[sub path]\". Please check description of \"fs.defaultFS\" in daos-site-example.xml for how to configure filesystem. In this way, preferred configurations are in daos-site.xml which should be put in right place, e.g., Java classpath, and loadable by Hadoop DAOS FileSystem. If the DAOS pool and container have not been created, we can use the following command to create them and get the pool UUID, container UUID, and service replicas. $ dmg pool create --scm-size=<scm size> --nvme-size=<nvme size> $ daos cont create --pool <pool UUID> --svc <service replicas> --type POSIX After that, configure daos-site.xml with the pool and container created. <configuration> ... <property> <name>fs.daos.pool.uuid</name> <value>your pool UUID</value> <description>UUID of DAOS pool</description> </property> <property> <name>fs.daos.container.uuid</name> <value>your container UUID</value> <description>UUID of DAOS container created with \"--type posix\"</description> </property> <property> <name>fs.daos.pool.svc</name> <value>your pool service replicas</value> <description>service list separated by \":\" if more than one service</description> </property> ... </configuration> You may want to connect to two DAOS servers or two DFS instances mounted to different containers in one DAOS server from same JVM. Then, you need to add authority to your URI to make it unique since Hadoop caches filesystem instance keyed by \"schema + authority\" in global (JVM). It applies to the both types of URIs described above. Tune More Configurations \u00b6 If your DAOS URI is the mapped UUIDs, you can follow descriptions of each config item in daos-site-example.xml to set your own values in loadable daos-site.xml . If your DAOS URI is the UNS path, your configurations, except those set by DAOS UNS creation, in daos-site.xml can still be effective. To make configuration source consistent, an alternative to the configuration file daos-site.xml is to set all configurations to the UNS path. You put the configs to the same UNS path with below command. # install attr package if get \"command not found\" error $ setfattr -n user.daos.hadoop -v \"fs.daos.server.group=daos_server:fs.daos.pool.svc=0\" <your path> Or $ java -Dpath=\"your path\" -Dattr=user.daos.hadoop -Dvalue=\"fs.daos.server.group=daos_server:fs.daos.pool.svc=0\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns setappinfo For the \"value\" property, you need to follow pattern, key1=value1:key2=value2.. .. And key should be from daos-site-example.xml . If value contains characters of '=' or ':', you need to escape the value with below command. $ java -Dop=escape-app-value -Dinput=\"daos_server:1=2\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns util You'll get escaped value, \"daos_server\\u003a1\\u003d2\", for \"daos_server:1=2\". If you configure the same property in both daos-site.xml and UNS path, the value in daos-sitem.xml takes priority. If user set Hadoop configuration before initializing Hadoop DAOS FileSystem, the user's configuration takes priority. Configure Spark to Use DAOS \u00b6 To access DAOS Hadoop filesystem in Spark, add the jar files to the classpath of the Spark executor and driver. This can be configured in Spark's configuration file spark-defaults.conf . spark.executor.extraClassPath /path/to/daos-java-<version>.jar:/path/to/hadoop-daos-<version>.jar spark.driver.extraClassPath /path/to/daos-java-<version>.jar:/path/to/hadoop-daos-<version>.jar Access DAOS in Spark \u00b6 All Spark APIs that work with the Hadoop filesystem will work with DAOS. We use the daos:// URI to access files stored in DAOS. For example, to read the people.json file from the root directory of DAOS filesystem, we can use the following pySpark code: df = spark.read.json(\"daos://default:1/people.json\") Configure Hadoop to Use DAOS \u00b6 Edit $HADOOP_HOME/etc/hadoop/core-site.xml to change fs.defaultFS to daos://default:1 or \"daos://uns/\\<your path>\". Then append below configuration to this file and $HADOOP_HOME/etc/hadoop/yarn-site.xml . <property> <name>fs.AbstractFileSystem.daos.impl</name> <value>io.daos.fs.hadoop.DaosAbsFsImpl</value> </property> DAOS has no data locality since it is remote storage. You need to add below configuration to the scheduler configuration file, like capacity-scheduler.xml in yarn. <property> <name>yarn.scheduler.capacity.node-locality-delay</name> <value>-1</value> </property> Then replicate daos-site.xml , core-site.xml , yarn-site.xml and capacity-scheduler.xml to other nodes. Access DAOS in Hadoop \u00b6 If everything goes well, you should see \u201c/user\u201d directory being listed after issuing below command. $ hadoop fs -ls / You can also play around with other Hadoop commands, like -copyFromLocal and -copyToLocal. You can also start Yarn and run some mapreduce jobs on Yarn. Just make sure you have DAOS URI, daos://default:1/ , set correctly in your job. Known Issues \u00b6 If you use Omni-path PSM2 provider in DAOS, you'll get connection issue in Yarn container due to PSM2 resource not being released properly in time.","title":"Spark and Hadoop"},{"location":"user/spark/#getting-started-with-the-daos-hadoop-filesystem","text":"Here, we describe the steps required to build and deploy the DAOS Hadoop filesystem, and the configurations to access DAOS in Spark and Hadoop. We assume that the DAOS servers and agents have already been deployed in the environment. Otherwise, they can be deployed by following the DAOS Installation Guide . !!!note DAOS support for Spark and Hadoop is not available in DAOS 1.0. It is targeted for the DAOS 1.2 release.","title":"Getting Started with the DAOS Hadoop Filesystem"},{"location":"user/spark/#build-daos-hadoop-filesystem","text":"Below are the steps to build the Java jar files for the DAOS Java and DAOS Hadoop filesystem. These jar files are required when running Spark and Hadoop. You can ignore this section if you already have the pre-built jars. $ git clone https://github.com/daos-stack/daos.git $ cd daos $ git checkout <desired branch or commit> ## assume DAOS is built and installed to <daos_install> directory $ cd src/client/java $ mvn clean package -DskipITs -Ddaos.install.path=<daos_install> After build, the package daos-java-<version>-assemble.tgz will be available under distribution/target .","title":"Build DAOS Hadoop Filesystem"},{"location":"user/spark/#deploy-daos-hadoop-filesystem","text":"After unzipping daos-java-<version>-assemble.tgz , you will get the following files.","title":"Deploy DAOS Hadoop Filesystem"},{"location":"user/spark/#daos-java-ltversiongtjar-and-hadoop-daos-ltversiongtjar","text":"They need to be deployed on every compute node that runs Spark or Hadoop. Place them in a directory, e.g., $SPARK_HOME/jars for Spark and $HADOOP_HOME/share/hadoop/common/lib for Hadoop, which is accessible to all the nodes or copy them to every node.","title":"daos-java-&amp;lt;version&amp;gt;.jar and hadoop-daos-&amp;lt;version&amp;gt;.jar"},{"location":"user/spark/#daos-site-examplexml","text":"You have two choices, with or without UNS path, to construct DAOS URI. If you choose the second choice, you have to copy the file to your application config directory, e.g., $SPARK_HOME/conf for Spark and $HADOOP_HOME/etc/hadoop for Hadoop. Then do some proper configuration and rename it to daos-site.xml . For the second choice, daos-site.xml is optional. See next section for details.","title":"daos-site-example.xml"},{"location":"user/spark/#configure-daos-hadoop-filesystem","text":"","title":"Configure DAOS Hadoop FileSystem"},{"location":"user/spark/#daos-environment-variable","text":"Export all DAOS related env variables and the following env variable in your application, e.g., spark-env.sh for Spark and hadoop-env.sh for Hadoop. The following env enables signal chaining in JVM to better interoperate with DAOS native code that installs its own signal handlers. It ensures that signal calls are intercepted so that they do not actually replace the JVM's signal handlers if the handlers conflict with those already installed by the JVM. Instead, these calls save the new signal handlers, or \"chain\" them behind the JVM-installed handlers. Later, when any of these signals are raised and found not to be targeted at the JVM, the DAOS's handlers are invoked. $ export LD_PRELOAD=<YOUR JDK HOME>/jre/lib/amd64/libjsig.so","title":"DAOS Environment Variable"},{"location":"user/spark/#daos-uris","text":"DAOS FileSystem binds to schema \"daos\". DAOS URIs are in the format of \"daos://[authority]//[path]\". Both authority and path are optional. There are two types of DAOS URIs, with and without DAOS UNS path depending on where you want the DAOS Filesystem to get initialized and configured.","title":"DAOS URIs"},{"location":"user/spark/#with-daos-uns-path","text":"The simple form of URI is \"daos:///\\<your uns path>[/sub path]\". \"\\<your path>\" is your OS file path created with the daos command or Java DAOS UNS method, DaosUns.create() . The \"[sub path]\" is optional. You can create the UNS path with below command. $ daos cont create --pool <pool UUID> --svc <svc list> -path <your path> --type=POSIX Or $ java -Dpath=\"your path\" -Dpool_id=\"your pool uuid\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns create After creation, you can use below command to see what DAOS properties set to the path. $ getfattr -d -m - <your path>","title":"With DAOS UNS Path"},{"location":"user/spark/#without-daos-uns-path","text":"The simple form of URI is \"daos:///[sub path]\". Please check description of \"fs.defaultFS\" in daos-site-example.xml for how to configure filesystem. In this way, preferred configurations are in daos-site.xml which should be put in right place, e.g., Java classpath, and loadable by Hadoop DAOS FileSystem. If the DAOS pool and container have not been created, we can use the following command to create them and get the pool UUID, container UUID, and service replicas. $ dmg pool create --scm-size=<scm size> --nvme-size=<nvme size> $ daos cont create --pool <pool UUID> --svc <service replicas> --type POSIX After that, configure daos-site.xml with the pool and container created. <configuration> ... <property> <name>fs.daos.pool.uuid</name> <value>your pool UUID</value> <description>UUID of DAOS pool</description> </property> <property> <name>fs.daos.container.uuid</name> <value>your container UUID</value> <description>UUID of DAOS container created with \"--type posix\"</description> </property> <property> <name>fs.daos.pool.svc</name> <value>your pool service replicas</value> <description>service list separated by \":\" if more than one service</description> </property> ... </configuration> You may want to connect to two DAOS servers or two DFS instances mounted to different containers in one DAOS server from same JVM. Then, you need to add authority to your URI to make it unique since Hadoop caches filesystem instance keyed by \"schema + authority\" in global (JVM). It applies to the both types of URIs described above.","title":"Without DAOS UNS Path"},{"location":"user/spark/#tune-more-configurations","text":"If your DAOS URI is the mapped UUIDs, you can follow descriptions of each config item in daos-site-example.xml to set your own values in loadable daos-site.xml . If your DAOS URI is the UNS path, your configurations, except those set by DAOS UNS creation, in daos-site.xml can still be effective. To make configuration source consistent, an alternative to the configuration file daos-site.xml is to set all configurations to the UNS path. You put the configs to the same UNS path with below command. # install attr package if get \"command not found\" error $ setfattr -n user.daos.hadoop -v \"fs.daos.server.group=daos_server:fs.daos.pool.svc=0\" <your path> Or $ java -Dpath=\"your path\" -Dattr=user.daos.hadoop -Dvalue=\"fs.daos.server.group=daos_server:fs.daos.pool.svc=0\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns setappinfo For the \"value\" property, you need to follow pattern, key1=value1:key2=value2.. .. And key should be from daos-site-example.xml . If value contains characters of '=' or ':', you need to escape the value with below command. $ java -Dop=escape-app-value -Dinput=\"daos_server:1=2\" -cp ./daos-java-1.1.0-shaded.jar io.daos.dfs.DaosUns util You'll get escaped value, \"daos_server\\u003a1\\u003d2\", for \"daos_server:1=2\". If you configure the same property in both daos-site.xml and UNS path, the value in daos-sitem.xml takes priority. If user set Hadoop configuration before initializing Hadoop DAOS FileSystem, the user's configuration takes priority.","title":"Tune More Configurations"},{"location":"user/spark/#configure-spark-to-use-daos","text":"To access DAOS Hadoop filesystem in Spark, add the jar files to the classpath of the Spark executor and driver. This can be configured in Spark's configuration file spark-defaults.conf . spark.executor.extraClassPath /path/to/daos-java-<version>.jar:/path/to/hadoop-daos-<version>.jar spark.driver.extraClassPath /path/to/daos-java-<version>.jar:/path/to/hadoop-daos-<version>.jar","title":"Configure Spark to Use DAOS"},{"location":"user/spark/#access-daos-in-spark","text":"All Spark APIs that work with the Hadoop filesystem will work with DAOS. We use the daos:// URI to access files stored in DAOS. For example, to read the people.json file from the root directory of DAOS filesystem, we can use the following pySpark code: df = spark.read.json(\"daos://default:1/people.json\")","title":"Access DAOS in Spark"},{"location":"user/spark/#configure-hadoop-to-use-daos","text":"Edit $HADOOP_HOME/etc/hadoop/core-site.xml to change fs.defaultFS to daos://default:1 or \"daos://uns/\\<your path>\". Then append below configuration to this file and $HADOOP_HOME/etc/hadoop/yarn-site.xml . <property> <name>fs.AbstractFileSystem.daos.impl</name> <value>io.daos.fs.hadoop.DaosAbsFsImpl</value> </property> DAOS has no data locality since it is remote storage. You need to add below configuration to the scheduler configuration file, like capacity-scheduler.xml in yarn. <property> <name>yarn.scheduler.capacity.node-locality-delay</name> <value>-1</value> </property> Then replicate daos-site.xml , core-site.xml , yarn-site.xml and capacity-scheduler.xml to other nodes.","title":"Configure Hadoop to Use DAOS"},{"location":"user/spark/#access-daos-in-hadoop","text":"If everything goes well, you should see \u201c/user\u201d directory being listed after issuing below command. $ hadoop fs -ls / You can also play around with other Hadoop commands, like -copyFromLocal and -copyToLocal. You can also start Yarn and run some mapreduce jobs on Yarn. Just make sure you have DAOS URI, daos://default:1/ , set correctly in your job.","title":"Access DAOS in Hadoop"},{"location":"user/spark/#known-issues","text":"If you use Omni-path PSM2 provider in DAOS, you'll get connection issue in Yarn container due to PSM2 resource not being released properly in time.","title":"Known Issues"}]}